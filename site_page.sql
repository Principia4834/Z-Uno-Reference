SET SQL_MODE="NO_AUTO_VALUE_ON_ZERO";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;

CREATE TABLE IF NOT EXISTS `site_page` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `domain_id` int(11) NOT NULL,
  `route` varchar(64) NOT NULL DEFAULT '',
  `name` varchar(255) NOT NULL,
  `title` varchar(255) NOT NULL DEFAULT '',
  `url` varchar(255) DEFAULT NULL,
  `full_url` varchar(255) DEFAULT NULL,
  `content` longtext NOT NULL,
  `create_datetime` datetime NOT NULL,
  `update_datetime` datetime NOT NULL,
  `create_contact_id` int(11) NOT NULL,
  `sort` int(11) NOT NULL DEFAULT '0',
  `status` tinyint(1) NOT NULL DEFAULT '0',
  `parent_id` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `url` (`domain_id`,`route`,`full_url`),
  KEY `parent_id` (`parent_id`)
) ENGINE=MyISAM  DEFAULT CHARSET=utf8 AUTO_INCREMENT=491 ;

INSERT INTO `site_page` (`id`, `domain_id`, `route`, `name`, `title`, `url`, `full_url`, `content`, `create_datetime`, `update_datetime`, `create_contact_id`, `sort`, `status`, `parent_id`) VALUES
(84, 6, '*', 'Reference', '', 'Reference/', 'Reference/', '<table class="reference_index">\r\n<tbody>\r\n<tr>\r\n	<td>\r\n		<h3><span class="z1">Structure</span></h3>\r\n		<ul>\r\n			<li><span class="function_ref">setup</span>()</li>\r\n			<li><span class="function_ref">loop</span>()</li>\r\n		</ul>\r\n		<h4>Control Structures</h4>\r\n		<ul>\r\n			<li><span class="function_ref">if</span></li>\r\n			<li><span class="function_ref" link="if-else">if...else</span></li>\r\n			<li><span class="function_ref">for</span></li>\r\n			<li><span class="function_ref" link="switch-case">switch case</span></li>\r\n			<li><span class="function_ref">while</span></li>\r\n			<li><span class="function_ref" link="do-while">do...while</span></li>\r\n			<li><span class="function_ref">break</span></li>\r\n			<li><span class="function_ref">continue</span></li>\r\n			<li><span class="function_ref">return</span></li>\r\n			<li><span class="function_ref">goto</span></li>\r\n		</ul>\r\n		<h4>Further Syntax</h4>\r\n		<ul>\r\n			<li><span class="function_ref" link="semicolon">;</span> (semicolon)</li>\r\n			<li><span class="function_ref" link="curly-braces">{}</span> (curly braces)</li>\r\n			<li><span class="function_ref" link="single-line-comment">//</span> (single line comment)</li>\r\n			<li><span class="function_ref" link="multi-line-comment">/* */</span> (multi-line comment)</li>\r\n			<li><span class="function_ref" link="define">#define</span></li>\r\n			<li><span class="function_ref" link="include">#include</span></li>\r\n		</ul>\r\n		<h4>Arithmetic Operators</h4>\r\n		<ul>\r\n			<li><span class="function_ref" link="assignment-operator">=</span> (assignment operator)</li>\r\n			<li><span class="function_ref" link="addition">+ </span> (addition)</li>\r\n			<li><span class="function_ref" link="addition">-</span> (subtraction)</li>\r\n			<li><span class="function_ref" link="addition">*</span> (multiplication)</li>\r\n			<li><span class="function_ref" link="addition">/</span> (division)</li>\r\n			<li><span class="function_ref" link="modulo">%</span> (modulo)</li>\r\n		</ul>\r\n		<h4>Comparison Operators</h4>\r\n		<ul>\r\n			<li><span class="function_ref" link="equal-to">==</span> (equal to)</li>\r\n			<li><span class="function_ref" link="not-equal-to">!=</span> (not equal to)</li>\r\n			<li><span class="function_ref" link="less-than">&lt;</span> (less than)</li>\r\n			<li><span class="function_ref" link="greater-than">&gt;</span> (greater than)</li>\r\n			<li><span class="function_ref" link="less-than-or-equal-to">&lt;=</span> (less than or equal to)\r\n			</li>\r\n			<li><span class="function_ref" link="greater-than-or-equal-to">&gt;=</span> (greater than or equal to)</li>\r\n		</ul>\r\n		<h4>Boolean Operators</h4>\r\n		<ul>\r\n			<li><span class="function_ref" link="and">&amp;&amp;</span> (and)</li>\r\n			<li><span class="function_ref" link="or">||</span> (or)</li>\r\n			<li><span class="function_ref" link="not">!</span> (not)</li>\r\n		</ul>\r\n		<h4>Pointer Access Operators</h4>\r\n		<ul>\r\n			<li><span class="function_ref" link="dereference-operator">*</span> (dereference operator)</li>\r\n			<li><span class="function_ref" link="reference-operator">&amp;</span> (reference operator)</li>\r\n		</ul>\r\n		<h4>Bitwise Operators</h4>\r\n		<ul>\r\n			<li><span class="function_ref" link="bitwise-and">&amp;</span> (bitwise and)</li>\r\n			<li><span class="function_ref" link="bitwise-or">|</span> (bitwise or)</li>\r\n			<li><span class="function_ref" link="bitwise-xor">^</span> (bitwise xor)</li>\r\n			<li><span class="function_ref" link="bitwise-not">~</span> (bitwise not)</li>\r\n			<!-- TODO\r\n			<li><span class="function_ref" link"bitshift-left"="">&lt;&lt;</span> (bitshift left)</li>\r\n			<li><span class="function_ref" link"bitshift-right"="">&gt;&gt;</span> (bitshift right)</li>\r\n			-->\r\n		</ul>\r\n		<h4>Compound Operators</h4>\r\n		<ul>\r\n			<li><span class="function_ref" link="increment">++</span> (increment)</li>\r\n			<li><span class="function_ref" link="decrement">--</span> (decrement)</li>\r\n			<li><span class="function_ref" link="compound-addition">+=</span> (compound addition)</li>\r\n			<li><span class="function_ref" link="compound-addition">-=</span> (compound subtraction)</li>\r\n			<li><span class="function_ref" link="compound-addition">*=</span> (compound multiplication)</li>\r\n			<li><span class="function_ref" link="compound-addition">/=</span> (compound division)</li>\r\n			<li><span class="function_ref" link="compound-bitwise-and">&amp;=</span> (compound bitwise and)</li>\r\n			<li><span class="function_ref" link="compound-bitwise-or">|=</span> (compound bitwise or)</li>\r\n		</ul>\r\n	</td>\r\n	<td>\r\n		<h3><span class="z2">Variables</span></h3>\r\n		<h4>Constants</h4>\r\n		<ul>\r\n			<li><span class="function_ref">HIGH</span>, <span class="function_ref">LOW</span></li>\r\n			<li><span class="function_ref">INPUT</span>, <span class="function_ref">OUTPUT</span>, <span class="function_ref">INPUT_PULLUP</span></li>\r\n			<!--\r\n			<li><span class="function_ref">LED_BUILTIN</span></li>\r\n			-->\r\n			<li><span class="function_ref">true</span>, <span class="function_ref" link="true">false</span></li>\r\n			<!-- TODO\r\n			<li><span class="function_ref" link="integer-constants">integer constants</span></li>\r\n			<li><span class="function_ref" link="floating-point-constants">floating point constants</span></li>\r\n			-->\r\n		</ul>\r\n		<h4>Data Types</h4>\r\n		<ul>\r\n			<li><span class="function_ref">void</span></li>\r\n			<li><span class="function_ref">boolean</span></li>\r\n			<li><span class="function_ref">char</span></li>\r\n			<li><span class="function_ref" link="unsigned-char">unsigned char</span></li>\r\n			<li><span class="function_ref">byte</span></li>\r\n			<li><span class="function_ref">int</span></li>\r\n			<li><span class="function_ref" link="unsigned-int">unsigned int</span></li>\r\n			<li><span class="function_ref">word</span></li>\r\n			<li><span class="function_ref">dword</span></li>\r\n			<li><span class="function_ref">float</span></li>\r\n			<li><span class="function_ref">s_pin</span> (fast pin mode)</li>\r\n			<!-- TODO\r\n			<li><span class="function_ref">long</span></li>\r\n			<li><span class="function_ref">unsigned long</span></li>\r\n			<li><span class="function_ref">short</span></li>\r\n			<li><span class="function_ref">string</span> - char array</li>\r\n			<li><span class="function_ref">array</span></li>\r\n			-->\r\n		</ul>\r\n		<!-- TODO\r\n		<h4>Conversion</h4>\r\n		<ul>\r\n			<li><span class="function_ref">char()</span></li>\r\n			<li><span class="function_ref">byte()</span></li>\r\n			<li><span class="function_ref">int()</span></li>\r\n			<li><span class="function_ref">word()</span></li>\r\n			<li><span class="function_ref">long()</span></li>\r\n			<li><span class="function_ref">float()</span></li>\r\n		</ul>\r\n		-->\r\n		<h4>Variable Scope &amp; Qualifiers</h4>\r\n		<ul>\r\n			<li><span class="function_ref" link="variable-scope">variable scope</span></li>\r\n			<!-- TODO\r\n			<li><span class="function_ref">static</span></li>\r\n			<li><span class="function_ref">volatile</span></li>\r\n			-->\r\n			<li><span class="function_ref">const</span></li>\r\n		</ul>\r\n		<!-- TODO\r\n		<h4>Utilities</h4>\r\n		<ul>\r\n			<li><span class="function_ref">sizeof</span>()</li>\r\n			<li><span class="function_ref">PROGMEM</span></li>\r\n		</ul>\r\n		-->\r\n	</td>\r\n	<td>\r\n		<h3><span class="function_ref" link="Functions"><span class="z3">Functions</span> <span class="z4">&rarr;</span></span></h3>\r\n		<h4>Digital I/O</h4>\r\n		<ul>\r\n			<li><span class="function_ref">pinMode</span>()</li>\r\n			<li><span class="function_ref">digitalWrite</span>()</li>\r\n			<li><span class="function_ref">digitalRead</span>()</li>\r\n		</ul>\r\n		<h4>Analog I/O</h4>\r\n		<ul>\r\n			<li><span class="function_ref">analogRead</span>() &mdash; <em>ADC</em></li>\r\n			<li><span class="function_ref">analogReadResolution</span>()</li>\r\n			<li><span class="function_ref">analogReference</span>()</li>\r\n		</ul><ul>\r\n			<li><span class="function_ref">analogWrite</span>() &mdash; <em>PWM</em></li>\r\n			<li><span class="function_ref">analogWriteResolution</span>()</li>\r\n		</ul><ul>\r\n			<li><span class="function_ref">zunoFastPWM</span>() &mdash; <em>PWM</em></li>\r\n		</ul>\r\n		<h4>Advanced I/O</h4>\r\n		<ul>\r\n			<li><span class="function_ref" link="tone-noTone">tone</span>() and <span class="function_ref" link="tone-noTone">noTone</span>()</li>\r\n			<!-- TODO\r\n			<li><span class="function_ref">shiftOut</span>()</li>\r\n			<li><span class="function_ref">shiftIn</span>()</li>\r\n			-->\r\n			<li><span class="function_ref">pulseIn</span>()</li>\r\n		</ul>\r\n		<h4>Time</h4>\r\n		<ul>\r\n			<li><span class="function_ref">millis</span>()</li>\r\n			<!-- TODO\r\n			<li><span class="function_ref">micros</span>()</li>\r\n			-->\r\n			<li><span class="function_ref">delay</span>()</li>\r\n			<li><span class="function_ref">delayMicroseconds</span>()</li>\r\n		</ul>\r\n		\r\n		<h4>Math</h4>\r\n		<ul>\r\n			<li><span class="function_ref">min</span>(), <span class="function_ref">max</span>(), <span class="function_ref">abs</span>(), <span class="function_ref">round</span>()</li>\r\n			<li><span class="function_ref">constrain</span>(), <span class="function_ref">map</span>()</li>\r\n			<li>Bitmask operations &mdash; <span class="function_ref" link="bitSet">bitRead</span>(), <span class="function_ref">bitSet</span>(), <span class="function_ref" link="bitSet">bitClear</span>(), <span class="function_ref" link="bitSet">bitWrite</span>()</li>\r\n			<li><span class="function_ref">lowByte</span>() and <span class="function_ref" link="lowByte">highByte</span>()</li>\r\n			<li>Power, exponent logarithm &mdash; <span class="function_ref">pow</span>(), <span class="function_ref" link="pow">exp</span>(), <span class="function_ref" link="pow">log</span>(), <span class="function_ref" link="pow">log10</span>()</li>\r\n			<li><span class="function_ref">sqrt</span>() <span class="function_ref" link="sqrt">sq</span>()</li>\r\n			<li>Trigonometry and hyperbolic &mdash; <span class="function_ref" link="sin">sin</span>(), <span class="function_ref" link="sin">cos</span>(), ... <span class="function_ref">radians</span>(), <span class="function_ref" link="radians">degrees</span>()</li>\r\n			<li></li>\r\n			\r\n			\r\n<!--\r\n/* Nearest integer, absolute value, and remainder functions */\r\nfloat fabsf(float x)\r\nfloat frexpf(float x, int *pw2)\r\nfloat ldexpf(float x, int pw2)\r\nfloat ceilf(float x)\r\nfloat floorf(float x)\r\nfloat modff(float x, float * y)\r\n-->\r\n\r\n		</ul>\r\n		<!--\r\n		<h4>Random Numbers</h4>\r\n		<ul>\r\n			<li><span class="function_ref">randomSeed</span>()</li>\r\n			<li><span class="function_ref">random</span>()</li>\r\n		</ul>\r\n		<h4>Bits and Bytes</h4>\r\n		<ul>\r\n			<li><span class="function_ref">lowByte</span>()</li>\r\n			<li><span class="function_ref">highByte</span>()</li>\r\n			<li><span class="function_ref">bitRead</span>()</li>\r\n			<li><span class="function_ref">bitWrite</span>()</li>\r\n			<li><span class="function_ref">bitSet</span>()</li>\r\n			<li><span class="function_ref">bitClear</span>()</li>\r\n			<li><span class="function_ref">bit</span>()</li>\r\n		</ul>\r\n        -->\r\n        \r\n		<h4>Communication</h4>\r\n		<ul>\r\n		    <li><span class="function_ref">Serial</span> (USB and UART)</li>\r\n		    <li><span class="function_ref" link="Software-Serial">Software Serial</span></li>\r\n		    <li><span class="function_ref">Wire</span> (I2C)</li>\r\n            <li><span class="function_ref">SPI</span></li>\r\n		    <li><span class="function_ref">1-Wire</span></li>\r\n            <li><span class="function_ref">IR</span></li>\r\n			<!-- TODO\r\n			<li><span class="function_ref">Stream</span></li>\r\n			-->\r\n		</ul>\r\n\r\n		<h4>Interrupts</h4>\r\n		<ul>\r\n			<li>\r\n			    <span class="function_ref" link="zunoExtIntMode">External interrupts</span><br/>(INT0, INT1, ZEROX)\r\n			    <ul>\r\n			        <li><span class="function_ref">zunoExtIntMode</span>()</li>\r\n			        <li><span class="function_ref" link="Interrupts">ZUNO_SETUP_ISR_INT0</span>()</li>\r\n			        <li><span class="function_ref" link="Interrupts">ZUNO_SETUP_ISR_INT1</span>()</li>\r\n			        <li><span class="function_ref" link="Interrupts">ZUNO_SETUP_ISR_ZEROX</span>()</li>\r\n			    </ul>\r\n			</li>\r\n			<li>\r\n			    <span class="function_ref" link="GPT">General Purpose Timer</span>\r\n			    <ul>\r\n			        <li><span class="function_ref" link="GPT/zunoGPTInit">zunoGPTInit</span>()</li>\r\n			        <li><span class="function_ref" link="GPT/zunoGPTEnable">zunoGPTEnable</span>()</li>\r\n			        <li><span class="function_ref" link="GPT/zunoGPTSet">zunoGPTSet</span>()</li>\r\n			        <li><span class="function_ref" link="Interrupts">ZUNO_SETUP_ISR_GPTIMER</span>()</li>\r\n			    </ul>\r\n			</li>\r\n			<li>\r\n			    <span class="function_ref" link="1msTimer">1 ms Timer</span>\r\n			    <ul>\r\n			        <li><span class="function_ref" link="Interrupts">ZUNO_SETUP_ISR_1MSTIMER</span>()</li>\r\n\r\n			    </ul>\r\n			</li>\r\n		</ul>\r\n\r\n		<h4>Non-volatile memory</h4>\r\n		<ul>\r\n		    <li><span class="function_ref">EEPROM</span></li>\r\n		    <li><span class="function_ref">NZRAM</span> (non-volatile RAM in sleeping devices)</li>\r\n		</ul>\r\n\r\n		<h4>Looking for something else?</h4>\r\n		<p>\r\n		See the <a href="https://github.com/Z-Wave-Me/Z-Uno-Core/tree/uCXX_Cores/hardware/arduino/zuno/libraries">list of community-contributed libraries</a> for interfacing with particular types of hardware.\r\n		</p>\r\n	</td>\r\n	</td>\r\n	<td>\r\n		<h3><span class="function_ref" link="Z-Wave"><span class="z4">Z-Wave</span> <span class="z4">&rarr;</span></span></h3>\r\n		<h4>Exposing device functionality</h4>\r\n		<ul>\r\n		    <li><span class="function_ref">ZUNO_SETUP_CHANNELS</span>()</li>\r\n			<li><span class="function_ref">ZUNO_SWITCH_BINARY</span>()</li>\r\n			<li><span class="function_ref">ZUNO_SWITCH_COLOR</span>()</li>\r\n			<li><span class="function_ref">ZUNO_SWITCH_MULTILEVEL</span>()</li>\r\n			<li><span class="function_ref">ZUNO_SENSOR_BINARY</span>()</li>\r\n			<li><span class="function_ref">ZUNO_SENSOR_MULTILEVEL</span>()</li>\r\n			<li><span class="function_ref">ZUNO_METER</span>()</li>\r\n			<li><span class="function_ref">ZUNO_BLINDS</span>()</li>\r\n			<li><span class="function_ref">ZUNO_FLOWSTOP</span>()</li>\r\n			<li><span class="function_ref">ZUNO_SIREN</span>()</li>\r\n			<li><span class="function_ref">ZUNO_DOORLOCK</span>()</li>\r\n			<li><span class="function_ref">ZUNO_THERMOSTAT</span>()</li>\r\n		</ul>\r\n		<h4>Reporting values</h4>\r\n		<ul>\r\n		    <li><span class="function_ref">zunoSendReport</span>()</li>\r\n		</ul>\r\n		<h4>Controlling other devices</h4>\r\n		<ul>\r\n		    <li><span class="function_ref">ZUNO_SETUP_ASSOCIATIONS</span>()</li>\r\n		    <li><span class="function_ref">zunoSendToGroupSetValueCommand</span>()</li>\r\n		    <li><span class="function_ref">zunoSendToGroupDimmingCommand</span>()</li>\r\n		    <li><span class="function_ref">zunoSendToGroupScene</span>()</li>\r\n		    <li><span class="function_ref">zunoSendToGroupDoorlockControl</span>()</li>\r\n			<li><span class="function_ref">zunoSendAssociationCommand</span>()</li>\r\n\r\n		</ul>\r\n		<h4>Handling reports from other devices</h4>\r\n		<ul>\r\n		    <li><span class="function_ref">ZUNO_REPORTS_HANDLER</span>()</li>\r\n\r\n		</ul>\r\n		<h4>Power management</h4>\r\n		<ul>\r\n			<li><span class="function_ref">ZUNO_SETUP_SLEEPING_MODE</span>()</li>\r\n			<li><span class="function_ref">zunoSendDeviceToSleep</span>()</li>\r\n			<li><span class="function_ref">zunoSetBeamCountWU</span>()</li>\r\n			<li><span class="function_ref">zunoSetWUOptions</span>()</li>\r\n			<li><span class="function_ref">zunoGetWakeReason</span>()</li>\r\n			<li><span class="function_ref">ZUNO_SETUP_BATTERY_LEVELS</span>()</li>\r\n			<li><span class="function_ref">ZUNO_SETUP_BATTERY_HANDLER</span>()</li>\r\n		</ul>\r\n		<h4>Inclusion in controller</h4>\r\n		<ul>\r\n		    <li><span class="function_ref">zunoStartLearn</span>()</li>\r\n		    <li><span class="function_ref">zunoInNetwork</span>()</li>\r\n		    <li><span class="function_ref">zunoNID</span>()</li>\r\n		</ul>\r\n		<h4>Debug Mode</h4>\r\n		<ul>\r\n			<li><span class="function_ref">ZUNO_SETUP_DEBUG_MODE</span>()</li>\r\n			<li><span class="function_ref">zunoReboot</span>()</li>\r\n		</ul>\r\n		<h4>IDE settings <font size="-1">(get <a href="/getting-started/arduino-ide-intro/">more information</a>)</font></h4>\r\n		<ul>\r\n			<li><span class="function_ref">Frequency</span></li>\r\n			<li><span class="function_ref">MultiCommand</span></li>\r\n			<li><span class="function_ref">Security</span></li>\r\n		</ul>\r\n		<h4>Dynamic configuration</h4>\r\n		<ul>\r\n			<li><span class="function_ref">ZUNO_START_CONFIG</span>()</li>\r\n			<li><span class="function_ref">ZUNO_ADD_CHANNEL</span>()</li>\r\n			<li><span class="function_ref">ZUNO_ADD_ASSOCIATION</span>()</li>\r\n			<li><span class="function_ref">ZUNO_COMMIT_CONFIG</span>()</li>\r\n			<li><span class="function_ref">ZUNO_GET_CONFIG_STATE</span>()</li>\r\n		</ul>\r\n		<h4>Configuration parameters</h4>\r\n		<ul>\r\n		    <li><span class="function_ref">ZUNO_SETUP_CFGPARAMETER_HANDLER</span>()</li>\r\n		    <li><span class="function_ref" link="ZUNO_SETUP_CFGPARAMETER_HANDLER">zunoLoadCFGParam</span>()</li>\r\n		    <li><span class="function_ref" link="ZUNO_SETUP_CFGPARAMETER_HANDLER">zunoSaveCFGParam</span>()</li>\r\n		</ul>\r\n	</td>\r\n</tr>\r\n</tbody>\r\n</table>', '2015-05-27 10:47:54', '2019-05-14 14:28:44', 1322, 5, 1, NULL),
(159, 6, '*', 'variable scope', '', 'variable-scope/', 'Reference/variable-scope/', '<h1>variable scope</h1>\r\n\r\n<span class="function_description">Variables in the C programming language, which Z-Uno uses, have a property called scope. This is in contrast to early versions of languages such as BASIC where every variable is a global variable.</span>\r\n\r\n<span class="function_description_more">A global variable is one that can be seen by every function in a program. Local variables are only visible to the function in which they are declared. In the Z-Uno environment, any variable declared outside of a function (e.g. setup(), loop(), etc. ), is a global variable.</span>\r\n\r\n<span class="function_description_more">When programs start to get larger and more complex, local variables are a useful way to insure that only one function has access to its own variables. This prevents programming errors when one function inadvertently modifies variables used by another function.</span>\r\n\r\n<span class="function_description_more">It is also sometimes handy to declare and initialize a variable inside a for loop. This creates a variable that can only be accessed from inside the for-loop brackets.</span> \r\n\r\n<span class="function_example">\r\n<pre>\r\n<code class="c">int gPWMval;  // any function will see this variable\r\n\r\nvoid setup() {\r\n  // ...\r\n}\r\n\r\nvoid loop() {\r\n    int i;    // "i" is only "visible" inside of "loop"\r\n    // ...\r\n\r\n    for (int j = 0; j < 100; j++) {\r\n        // variable j can only be accessed inside the for-loop brackets\r\n    }\r\n}\r\n</code></pre>\r\n</span>', '2015-06-10 21:38:13', '2019-05-14 14:21:42', 1322, 67, 1, 84),
(149, 6, '*', 'unsigned char', '', 'unsigned-char/', 'Reference/unsigned-char/', '<h1>unsigned char</h1>\r\n<span class="function_description">An unsigned char data type that occupies 1 byte of memory. Same as the <i><span class="function_ref">byte</span></i> datatype.</span>\r\n\r\n<span class="function_description_more">The unsigned char datatype encodes numbers from 0 to 255.</span>\r\n\r\n<span class="function_example">\r\n<pre>\r\n<code class="c">unsigned char myChar = 240;\r\n</code>\r\n</pre>\r\n</span> \r\n', '2015-06-07 14:40:32', '2019-05-14 14:21:09', 1322, 58, 1, 84),
(152, 6, '*', 'unsigned int', '', 'unsigned-int/', 'Reference/unsigned-int/', '<h1>unsigned int</h1>\r\n\r\n<span class="function_description">The difference between <i>unsigned ints</i> and (signed) <i><span class="function_ref" link="int">ints</span></i>, lies in the way the highest bit, sometimes refered to as the "sign" bit, is interpreted. With <i>unsigned int</i> sign bit have no special value, hence number from 0 to 65535 can be represented.</span>\r\n\r\n<span class="function_syntax">\r\n<pre>\r\n<code class="c">unsigned int var = val;\r\n</code></pre>\r\n</span>\r\n\r\n<span class="function_example">\r\n<pre>\r\n<code class="c">unsigned int ledPin = 13;\r\n</code></pre>\r\n</span>\r\n\r\n<span class="function_coding_tip">When variables are made to exceed their maximum capacity they "roll over" back to their minimum capacitiy, note that this happens in both directions.\r\n\r\n<pre>\r\n<code class"c">unsigned int x\r\nx = 0;\r\nx = x - 1;       // x now contains 65535 - rolls over in neg direction\r\nx = x + 1;       // x now contains 0 - rolls over\r\n</code></pre>\r\n</span>', '2015-06-07 15:30:25', '2019-05-14 14:20:32', 1322, 61, 1, 84),
(167, 6, '*', 'integer constants', '', 'integer-constants/', 'Reference/integer-constants/', '<h1>integer constants</h1>\r\n\r\n<span class="function_description">Integer constants are numbers used directly in a sketch, like 123. By default, these numbers are treated as <span class="function_ref" link="int">int</span>''s but you can change this with the U and L modifiers (see below).</span>\r\n\r\n<span class="function_description_more">Normally, integer constants are treated as base 10 (decimal) integers, but special notation (formatters) may be used to enter numbers in other bases.</span>\r\n\r\n<span class="function_example">\r\n<pre>\r\nBase               Example    Formatter        Comment\r\n\r\n10 (decimal)           123    none\r\n\r\n2 (binary)        B1111011    leading ''B''      only works with 8 bit values (0 to 255)\r\n                                               characters 0-1 valid\r\n\r\n8 (octal)             0173    leading "0"      characters 0-7 valid       \r\n\r\n16 (hexadecimal)      0x7B    leading "0x"     characters 0-9, A-F, a-f valid    \r\n</pre>\r\n</span>\r\n\r\n<span class="function_description_more"><i>Decimal</i> is base 10. This is the common-sense math with which you are acquainted. Constants without other prefixes are assumed to be in decimal format.\r\n</span>\r\n\r\n<span class="function_example">\r\n<pre>\r\n101     // same as 101 decimal   ((1 * 10^2) + (0 * 10^1) + 1)\r\n</pre>\r\n</span>\r\n\r\n<span class="function_description_more"><i>Binary</i> is base two. Only characters 0 and 1 are valid.</span>\r\n\r\n<span class="function_example">\r\n<pre>\r\nB101    // same as 5 decimal   ((1 * 2^2) + (0 * 2^1) + 1)\r\n</pre>\r\n</span>\r\n\r\n<span class="function_description_more">The binary formatter only works on bytes (8 bits) between 0 (B0) and 255 (B11111111). If it is convenient to input an int (16 bits) in binary form you can do it a two-step procedure such as:</span>\r\n\r\n<pre>\r\n\r\nmyInt = (B11001100 * 256) + B10101010;    // B11001100 is the high byte\r\n</code>\r\n</pre>\r\n<b>Octal</b> is base eight. Only characters 0 through 7 are valid. Octal values are indicated by the prefix "0"\r\n<span class="function_example">\r\n<pre>\r\n\r\n\r\n0101    // same as 65 decimal   ((1 * 8^2) + (0 * 8^1) + 1) \r\n</code>\r\n</pre>\r\n</span>\r\n<p>Warning</p>\r\n<p>It is possible to generate a hard-to-find bug by (unintentionally) including a leading zero before a constant and having the compiler unintentionally interpret your constant as octal.\r\n</p>\r\n<b>Hexadecimal</b> (or hex) is base sixteen. Valid characters are 0 through 9 and letters A through F; A has the value 10, B is 11, up to F, which is 15. Hex values are indicated by the prefix "0x". Note that A-F may be syted in upper or lower case (a-f).\r\n\r\n<span class="function_example">\r\n<pre>\r\n\r\n\r\n0x101   // same as 257 decimal   ((1 * 16^2) + (0 * 16^1) + 1)\r\n</code>\r\n</pre>\r\n</span>\r\n<pre>\r\n\r\n<p><big>U & L formatters</big></p>\r\n</code>\r\n</pre>\r\n</span>\r\n<p>By default, an integer constant is treated as an int with the attendant limitations in values. To specify an integer constant with another data type, follow it with:\r\n</p>\r\na ''u'' or ''U'' to force the constant into an unsigned data format. Example: 33u\r\na ''l'' or ''L'' to force the constant into a long data format. Example: 100000L\r\na ''ul'' or ''UL'' to force the constant into an unsigned long constant. Example: 32767ul', '2015-06-10 23:35:54', '2019-05-14 14:18:18', 1322, 70, 1, 84),
(463, 6, '*', 'ZUNO_SETUP_BATTERY_LEVELS()', '', 'ZUNO_SETUP_BATTERY_LEVELS/', 'Reference/ZUNO_SETUP_BATTERY_LEVELS/', '<h1>ZUNO_SETUP_BATTERY_LEVELS()</h1>\r\n<span class="function_description">\r\nBy default Z-Uno automatically maps battery voltage from 2.7V&ndash;3.0V to 0%&ndash;100% by measuring the voltage on the 3V3 pin. But some batteries might require different mapping. In thace case one can define the correct mapping.\r\n</span>\r\n\r\n<span class="function_syntax">\r\n    ZUNO_SETUP_BATTERY_LEVELS(min, max)\r\n</span>\r\n\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">min</span>\r\n        <span class="function_parameters_param_description">value corresponding to empty battery (0%) in mV, WORD\r\n        </span>\r\n    </span>\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">max</span>\r\n        <span class="function_parameters_param_description">value corresponding to full battery (100%) in mV, WORD\r\n        </span>\r\n    </span>\r\n</span>\r\n\r\n<span class="function_description_note">\r\nBattery is reported only if device is configured as sleeping (<span class="function_ref" link="ZUNO_SETUP_SLEEPING_MODE">ZUNO_SLEEPING_MODE_SLEEPING</span> or <span class="function_ref" link="ZUNO_SETUP_SLEEPING_MODE">ZUNO_SLEEPING_MODE_FREQUENTLY_AWAKE</span>).\r\n</span>\r\n\r\n<span class="function_description_note">\r\nIgnored if <span class="function_ref">ZUNO_SETUP_BATTERY_HANDLER</span>()</b> is specified.\r\n</span>\r\n\r\n<span class="function_example">\r\n<pre><code class="c">ZUNO_SETUP_BATTERY_LEVELS(2700, 3300);</code></pre>\r\n</span>\r\n\r\n<span class="function_see_also">\r\n<span class="function_ref">ZUNO_SETUP_BATTERY_HANDLER</span>\r\n</span>\r\n', '2017-10-20 00:47:47', '2019-02-18 21:10:12', 1, 142, 1, 84),
(258, 6, '*', 'Security', '', 'Security/', 'Reference/Security/', '<h1>Security</h1>\r\n<span class="function_description">\r\nZ-Uno can use no security, classical Z-Wave Security (also know as S0) and the newest Z-Wave Security S2 (also referred as just S2). Security mode can be selectedright in the Arduino IDE menu.\r\n</span>\r\n\r\n<span class="function_description_more">\r\nIf S0 or S2 security mode is enabled <a href="/Reference/Z-Wave/#Security">Security or Security S2 Command Class will be added to your Z-Uno</a>. This will force Z-Uno to use secure communications with the controller. Z-Uno will also try to establish secure communication with devices in Association groups and guess the security level accepted by the recepient.\r\n</span>\r\n\r\n<span class="function_description_more">\r\nSecurity protects communications from reading, modification, replay, authentity substitution attacks. Please note that Security S0 also increases the communication time between nodes by 3 times and battery consumtions. In contrast Security S2 is will keep the battery performance providing even better security level.\r\n</span>\r\n\r\n<span class="function_description_note">\r\nYou must upload your sektch and then exclude or reset Z-Uno to apply security mode changes.\r\n</span>\r\n\r\n<span class="function_description_more">\r\nZ-Uno currently can not do both S0 and S2 ath the same time. Only one of them is supported. You need to upload the bootloader again after changing from S0 to S2 and back.\r\n</span>\r\n\r\n<span class="function_description_note">\r\nA Security enabled Z-Wave Controller must be used in order to use Z-Uno with Security mode on.\r\n</span>\r\n\r\n<span class="function_example">\r\n<img src="/wa-data/public/site/img/Z-Uno-S2-menu.png" width="600">\r\n</span>\r\n\r\n<span class="function_description_more">More details on S2:\r\n<ul>\r\n    <li>You need to change the bootloader from non-secure/S0 to S2 version. This is done by selecting S2 from the menu Tools→Security.</li>\r\n    <li>Then do Tools→Burn bootloader. If bootloader mismatch your menu settings, you will get a warning.</li>\r\n    <li>To locate the Z-Uno PIN (also known as DSK or ZWS2DSK) check the log of the Arduino IDE (see the screenshot).</li>\r\n    <li>Z-Uno supports all security classes: S2 Unauthenticated, S2 Authenticated and S2 Access.</li>\r\n    <li>S2 capable bootloader do not support S0 security.</li>\r\n    <li>Z-Uno can autodetect the security scheme used by the recepient, so it can control devices with any S2 security level provided the corresponding key is granted to Z-Uno.</li>\r\n    <li>Z-Uno with S2 support can not control/support S0 security scheme. If you need to control actuator with S0 security only, either downgrade to S0 your Z-Uno or use rules on the controller to receive S2 sensors notifications and send S0 commands to the S0 capable actuator.</li>\r\n    <li>In S2 variant of Z-Uno the user code is limited to 6 Kb only. This is enough for most of your sketches.</li>\r\n</ul>', '2016-05-19 13:52:41', '2019-02-02 14:38:42', 1322, 101, 1, 84),
(204, 6, '*', 'Z-Wave implementation in Z-Uno', '', 'Z-Wave/', 'Reference/Z-Wave/', '<h1>Z-Wave in Z-Uno</h1>\r\n<p>Z-Wave is a wireless home automation protocol. Designed for DIY and IoT it is very simple to deploy in your home.</p>\r\n\r\n<p>Working on sub-gigahertz frequencies it does not have interference with other wireless systems like WiFi, Bluetooth, LTE and others. In different regions Z-Wave frequencies differs and <a href="https://www.silabs.com/products/wireless/mesh-networking/z-wave/benefits/technology/global-regions">varies from 860 to 930 MHz</a>. Z-Uno supports all Z-Wave frequencies. You can choose the required frequency in Arduino IDE.</p><p>\r\nZ-Uno delivers out of the box Z-Wave funtionality. Your sketch will interact with other Z-Wave products in your network via radio protocol according to <b>Z-Wave Plus</b> standards. You don''t need to know deep Z-Wave protocol — Z-Uno will hide all Z-Wave internals and provide you simple to use functions.</p>\r\n\r\n<h2 link="Channels">Channels</h2>\r\n<p>To allow multiple functions in one device Z-Wave introduces <b>channels</b> (sometimes called instances). Z-Uno follows this concept allowing you to create very complex  devices. Each channel in Z-Uno will have it''s own functionality. Each channel hosts only two Command Classes: Basic and one of Switch Binary/Switch Multilevel/Sensor Binary/Sensor Multilevel depending on the channel type. Use <span class="function_ref">ZUNO_SETUP_CHANNELS</span> macro to setup types of channels.</p>\r\n<p>You can also partially control Z-Uno without using channels: first channel of each type is <b>mapped</b> to the corresponding Command Class outside channels.</p>\r\n<p>Example: Z-Uno with channels #1 Switch Multilevel, #2 Switch Binary, #3 Switch Multilevel, #4 Sensor Binary, #5 Sensor Binary will allow to control without channels Switch Multilevel (from channel #1), Switch Binary (from channel #3) and Sennsor Binary (from channel #4).</p>\r\n<p>If no channels are specified, Z-Uno will present Sensor Binary (and Basic mapped to it) to report Service Button state.</p>\r\n<p>If there is only one channel, Z-Uno will not create any channels and will keep only Command Classes outside channels.</p>\r\n\r\n<h2 link="Basic interoperability">Basic interoperability</h2>\r\n<p>Z-Wave provides Basic interoperability between different devices from different manufacturers via Basic Command Class. This Command Class is <b>mapped</b> to the corresponding Switch Binary/Switch Multilevel/Sensor Binary/Sensor Multilevel depending on channel type. Basic outside of channel behaves like Basic on channel #1.</p>\r\n\r\n<h2 link="Associations">Associations</h2>\r\n<p>Z-Uno allows to report values from each channel (be it a sensors or switch channel) out of the box. This is know as Life Line.</p>\r\n\r\n<p>But it is also important to be able to control other devices in Z-Wave network. For this Z-Wave protocol introduces <b>association groups</b> or shortly associations. Association group is just a list of other devices in the network to whom Z-Uno is supposed to send some commands. This list is managed using standard UI provided by all existing Z-Wave controllers. Each association group is defined to have one of the allowed types depending on commands we want to be sent out. This can be control of switches or control of dimmers or even scenes switching. You can manage association groups using <span class="function_ref">ZUNO_SETUP_ASSOCIATIONS</span> macro.</p>\r\n\r\n<p>Z-Uno Associations supports simple and channel (managed by Association and MultiChannel Association Command Classes correspondingly). Each group (control groups and Life Line) can host up to 5 entries.</p>\r\n\r\n<h2 link="Power management">Power management</h2>\r\n<p>Z-Wave was design to allow very low power  consumption profile. Hence, many sensors are battery powered and can work more than two years without battery replacement. But as a side effect, such devices have to sleep most of the time to save battery and wake up only for short period to send reports to controller upon environment changes (i.e. temperature has changed or button is pressed). In Z-Wave these devices are called <b>sleeping</b>. Usually all battery powered sensors are sleeping. Wakeup period can be configured via <b>Wakeup</b> Command Class from Z-Wave controller.\r\n</p>\r\n<p>To solve this reachability problems of battery devices Z-Wave allows another type of power management mode called <b>frequently listening</b> or FLiRS. These devices wake up every second to check if there is something for them in the ether and goes immediately back into sleep. In this mode initial communication to such device will take a bit more than one second and during this second the ether will be jammed. But after this the device will react very fast. The battery in this mode will last for only about one year. Usual applications of frequently listening is a battery operated switch, alarm or door lock.\r\n</p><p>\r\nAll mains powered devices such as dimmers, switches and other actors are <b>always listening</b>. This means they are always reachable instantly, they always listen for ether and can act as <b>repeaters</b> for other devices forming mesh network.\r\n</p><p>\r\nZ-Uno supports all three types of power management modes. You can define it using <span class="function_ref">ZUNO_SETUP_SLEEPING_MODE</span> macro in your sketch.</p>\r\n\r\n<h2 link="Configuration parameters">Configuration parameters</h2>\r\n<p>Beside defining Z-Uno behavior in the user sketch, there are also few configuration parameters. Some parameters can be defined only during sketch upload (via Arduino IDE menu), others can be changed wirelessly via Z-Wave Configuration. Get more details on <a href="/z-wave/configuration-parameters/">supported parameters</a>.</p>\r\n\r\n<h2 link="Include/exclude, wake up and sending NIF">Include/exclude, wake up and sending NIF</h2>\r\n<p>To become part of Z-Wave network Z-Uno need to be included (added) to the network using Z-Wave controller. Read more about <a href="/getting-started/include-in-network">inclusion and exclusion processes</a>. Inclusion and exclusion are confirmed on Z-Uno by <b>three press on the Service button</b>. This sequence will also tell Z-Uno to send <b>Node Information Frame</b> (NIF).</p>\r\n<p>Once sleeping power mode is used, Z-Uno will remain in deep sleep most of the time. <b>Single press on Service button</b> will wake up Z-Uno.</p>\r\n\r\n<h2 link="Security">Security</h2>\r\n<p>Z-Wave protocol allows secure commands transmission to bring more privacy to your IoT network. To enable Security in Z-Uno use Arduino IDE menu item. Once Security is turned on Z-Uno will follow the rules below:</p>\r\n<ul>\r\n    <li>All control commands to Z-Uno must be secure.</li>\r\n    <li>All commands sent by Z-Uno (based on Association groups) follow rules:\r\n        <ul style="margin-bottom: 0; margin-top: 0;">\r\n            <li>First time Z-Uno tries to speak securelly.</li>\r\n            <li>If success, Z-Uno will memorize that this device must always be spoken securelly.</li>\r\n            <li>If fails, Z-Uno will remember this and send unsecure commands to such a device.</li>\r\n        </ul>\r\n        This allows to mix secure and unsecure devices in the same Association group.</li>\r\n    <li>Only descriptive Command Classes are accessible without of Security: Battery, Device Reset Locally, Firmware Update, Manufacturer Specific, Power Level, Version, Wakeup, Z-Wave Plus Info.</li>\r\n</ul>\r\n\r\n<p>Note that Z-Uno supports Z-Wave Security S2 or Security S0.</p>\r\n\r\n<h2 link="Command Classes">Command Classes</h2>\r\n<p>Z-Uno supports the following Command Classes:</p>\r\n<style>\r\n    table.CClist, table.CClist td {\r\n        border: none;\r\n        padding: 0px;\r\n        margin: 0px;\r\n    }\r\n    ul {\r\n        margin-top: -0.5em;\r\n    }\r\n</style>\r\n<table class="CClist">\r\n<tr>\r\n   <td>\r\n        <ul>\r\n            <li>Association</li>\r\n            <li>Association Group Information</li>\r\n            <li>Battery (for sleeping and FLiRS modes)</li>\r\n            <li>Basic</li>\r\n            <li>Configuration</li>\r\n        </ul>\r\n   </td>\r\n   <td>\r\n        <ul>\r\n            <li>Device Reset Locally</li>\r\n            <li>Firmware Update</li>\r\n            <li>Manufacturer Specific</li>\r\n            <li>MultiChannel</li>\r\n            <li>MultiChannel Association</li>\r\n        </ul>\r\n   </td>\r\n   <td>\r\n        <ul>\r\n            <li>Power Level</li>\r\n            <li>Security</li>\r\n            <li>Version</li>\r\n            <li>Wakeup (for sleeping mode)</li>\r\n            <li>Z-Wave Plus Info</li>\r\n        </ul>\r\n   </td>\r\n</tr>\r\n</table>\r\n\r\n<p>Depending on channels types Z-Uno will also support some of these Command Classes:</p>\r\n<ul>\r\n    <li>Sensor Binary</li>\r\n    <li>Sensor Multilevel</li>\r\n    <li>Meter</li>\r\n    <li>Switch Binary and Notification</li>\r\n    <li>Switch Multilevel</li>\r\n    <li>Switch Color</li>\r\n    <li>Door Lock</li>\r\n    <li>Thermostat Mode and Thermostat Setpoit</li>\r\n</ul>\r\n<p>Depending on Association Groups set up Z-Uno can control:</p>\r\n<ul>\r\n    <li>Basic</li>\r\n    <li>Door Lock</li>\r\n    <li>Switch Multilevel</li>\r\n    <li>Scene Activation</li>\r\n</ul>\r\n\r\n<h2 link="Device Classes">Device Classes</h2>\r\n<p>Z-Wave also defines so called Device Classes to allow better interoperability. Z-Uno will automatically set corresponding Device Class to each channel depending on channel type. Z-Uno Device Class will be same as Device Class of channel #1. If no channels are defined, Z-Uno will behave like Sensor Binary (see above).\r\n</p>\r\n\r\n<style>\r\n    table.centralized td {\r\n        text-align: center;\r\n    }\r\n</style>\r\n<table class="centralized">\r\n    <tr>\r\n        <th></th>\r\n        <th>Generic type</th>\r\n        <th>Specific type</th>\r\n    <tr>\r\n        <th>Sensor Binary</th>\r\n        <td>Sensor Notification</td>\r\n        <td>Notification Sensor</td>\r\n    </tr>\r\n        <th>Sensor Multilevel</th>\r\n        <td>Sensor Multilevel</td>\r\n        <td>Routing Sensor Multilevel</td>\r\n    <tr>\r\n        <th>Meter</th>\r\n        <td>Meter</td>\r\n        <td>Simple Meter</td>\r\n    </tr>\r\n    <tr>\r\n        <th>Switch Binary</th>\r\n        <td>Switch Binary</td>\r\n        <td>Power Switch Binary</td>\r\n    </tr>\r\n    <tr>\r\n        <th>Siren</th>\r\n        <td>Switch Binary</td>\r\n        <td>Siren</td>\r\n    </tr>\r\n    <tr>\r\n        <th>Flow Stop</th>\r\n        <td>Switch Binary</td>\r\n        <td>Valve Open Close</td>\r\n    </tr>\r\n    <tr>\r\n        <th>Switch Multilevel</th>\r\n        <td>Switch Multilevel</td>\r\n        <td>Power Switch Multilevel</td>\r\n    </tr>\r\n    <tr>\r\n        <th>Switch Color</th>\r\n        <td>Switch Multilevel</td>\r\n        <td>Color Tunable Multilevel</td>\r\n    </tr>\r\n    <tr>\r\n        <th>Blinds</th>\r\n        <td>Switch Multilevel</td>\r\n        <td>Motor multiposition</td>\r\n    </tr>\r\n    <tr>\r\n        <th>Thermostat</th>\r\n        <td>Thermostat</td>\r\n        <td>General Thermostat</td>\r\n    </tr>\r\n    <tr>\r\n        <th>Door Lock</th>\r\n        <td>Entry Control</td>\r\n        <td>Door Lock</td>\r\n    </tr>\r\n</table>\r\n\r\n<h2 link="Firmware upgrade">Firmware upgrade</h2>\r\n<p>Z-Uno allows Over-The-Air bootloader and user sketch upgrade. So instead of connecting your Z-Uno via USB and upgrading bootloader or user sketch from Arduino IDE, you can also use Z-Wave Controller Firmware Upgrade feature. Firmware upgrade is <b>confirmed by three times press of Service Button</b> or via configuration parameter. Note that your sketch will be deleted during bootloader upgrade process &mdash; you will need to upload it again. See <a href="/z-wave/ota/">OTA process description</a> for more info.</p>\r\n\r\n<h2 link="Device reset">Device reset</h2>\r\n<p>Z-Uno can be excluded from network by following <a href="/getting-started/include-in-network">Exclusion process</a> via Z-Wave controller or by resetting the device via Service button: <b>hold Service button for 5 seconds and then press three times</b>. Use this procedure only if your controller is missing or inoperable. Note that the sketch is not erased during exclusion or reset process.</p>\r\n\r\n<h2 link="Changing Z-Wave settings">Changing Z-Wave settings</h2>\r\n<p>Z-Uno sketch defines number of channels, their types, number of association groups and power mode. Arduino IDE also allows to turn on/off security. But Z-Wave do not allow to change these paramenters &laquo;on the fly&raquo;. To remain compatible with Z-Wave Plus, Z-Uno <b>will not adopt these changes until device is excluded or resetted</b>.</p>\r\n\r\n<h2 link="Learn more about Z-Wave">Learn more about Z-Wave</h2>\r\n<p><img src="/wa-data/public/photos/61/15/1561/1561.970.jpg" width="70" height="85" border="0" alt="Z-Wave Basics" rel="float: right; margin-left: 1em; margin-bottom: 1em;" style="float: right; margin-left: 1em; margin-bottom: 1em;">\r\n\r\nZ-Wave Basics written by Dr. Christian Paetz is the perfect book to continue your dive into Z-Wave world. The book is available at <a href="http://www.amazon.com/Z-Wave-Basics-Remote-Control-Smart/dp/1490537368/" target="_blank">amazon.com</a> or <a href="http://www.amazon.co.uk/Z-Wave-Basics-Remote-Control-Smart/dp/1490537368/" target="_blank">amazon.co.uk</a> in English, <a href="http://www.amazon.com/Z-Wave-German-Christian-P%C3%A4tz/dp/3738601945">in German</a> or <a href="http://rus.z-wave.me/shop/additional/kniga-osnovy-z-wave/">in Russian</a>.\r\n</p>\r\n', '2015-08-06 13:30:07', '2019-02-02 14:12:14', 1, 94, 1, 84),
(329, 6, '*', 'endTransmission()', '', 'endTransmission/', 'Reference/Wire/endTransmission/', '<h4>Wire.endTransmission(address)</h4></br>\r\n<span class="function_description">\r\n    Ends a transmission to a slave device that was begun by beginTransmission() and transmits the bytes that were queued by write().</br>\r\n    endTransmission() accepts a boolean argument changing its behavior for compatibility with certain I2C devices.</br>\r\n    If true, endTransmission() sends a stop message after transmission, releasing the I2C bus.</br>\r\n    If false, endTransmission() sends a restart message after transmission. The bus will not be released, which prevents another master device from transmitting between messages. This allows one master device to send multiple transmissions while in control.\r\n</span>\r\n<span class="function_syntax">\r\n    <br>Wire.endTransmission()</br>\r\n    <br>Wire.endTransmission(stop)</br>\r\n</span>\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param_name">stop:</span>\r\n    <span class="function_parameters_param_description">boolean. true will send a stop message, releasing the bus after transmission. false will send a restart, keeping the connection active.</span>\r\n</span>\r\n<span class="function_returns">\r\n\r\n    byte, which indicates the status of the transmission:\r\n    </li><li>0:success</li>\r\n    </li><li>1:data too long to fit in transmit buffer</li>\r\n    </li><li>2:received NACK on transmit of address</li>\r\n    </li><li>3:received NACK on transmit of data</li>\r\n    </li><li>4:other error</li>\r\n</span>  ', '2016-07-14 14:46:08', '2018-12-24 12:04:10', 1322, 4, 1, 324),
(331, 6, '*', 'available()', '', 'Available/', 'Reference/Wire/Available/', '<h4>Wire.available()</h4>\r\n<span class="function_description">\r\n   Returns the number of bytes available for retrieval with read(). This should be called on a master device after a call to requestFrom() or on a slave inside the <span class="function_ref">onReceive</span>() handler.\r\n</span>\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param_name">None</span>\r\n</span>\r\n<span class="function_returns">\r\n    The number of bytes available for reading.\r\n</span> ', '2016-07-14 15:12:10', '2018-12-24 12:03:48', 1322, 6, 1, 324),
(488, 6, '*', 'enableTS()', '', 'enableTS/', 'Reference/Wire/enableTS/', '<h4>Wire.enableTS()</h4></br>\r\n<span class="function_description">Enable <i>clock stretching</i> on the I2C bus: reduces the speed by ~20% and allows frequency glitch by slave device.\r\n</span>\r\n\r\n<span class="function_syntax"><pre><code lang="c">Wire.enableTS(on_off);\r\n</code></pre>\r\n</span>\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param_name">on_off</span>\r\n    <span class="function_parameters_param_description">enable clock stretching if true</span>\r\n</span>\r\n<span class="function_returns">\r\n    None\r\n</span>', '2018-12-24 12:03:23', '2018-12-24 12:03:23', 1, 10, 1, 324),
(334, 6, '*', 'OnRequest', '', 'OnRequest/', 'Reference/Wire/OnRequest/', '<h4>Wire.OnRequest(handler)</h4>\r\n<h3>This function is not supported on Z-Uno</h3>\r\n<span class="function_description">\r\n    Register a function to be called when a master requests data from this slave device.\r\n</span>\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param_name">handler</span>\r\n    <span class="function_parameters_param_description">the function to be called, takes no parameters and returns nothing: void handler()</span>\r\n</span>\r\n<span class="function_returns">\r\n    None\r\n</span>', '2016-07-14 15:23:56', '2018-12-24 11:59:46', 1322, 9, 1, 324),
(333, 6, '*', 'OnReceive', '', 'OnReceive/', 'Reference/Wire/OnReceive/', '<h4>Wire.OnReceive(handler)</h4>\r\n<h3>This function is not supported on Z-Uno!</h3>\r\n<span class="function_description">\r\n    Registers a function to be called when a slave device receives a transmission from a master.\r\n</span>\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param_name">handler</span>\r\n    <span class="function_parameters_param_description">the function to be called when the slave receives data; this should take a single int parameter (the number of bytes read from the master) and return nothing: void handler(int length)</span>\r\n</span>\r\n<span class="function_returns">\r\n    None\r\n</span>', '2016-07-14 15:21:23', '2018-12-24 11:59:10', 1322, 8, 1, 324);
INSERT INTO `site_page` (`id`, `domain_id`, `route`, `name`, `title`, `url`, `full_url`, `content`, `create_datetime`, `update_datetime`, `create_contact_id`, `sort`, `status`, `parent_id`) VALUES
(324, 6, '*', 'Wire Library', '', 'Wire/', 'Reference/Wire/', '<h1>Wire Library</h1>\r\n<span class="function_description">Implements I2C on Z-Uno pins 9&ndash;16. Default is 9 for SCL and 10 for SDA.</span>\r\n<span class="function_description_more"><ul>\r\n    <li><span class="function_ref" link="Wire/begin">begin</span>()</li>\r\n	<li><span class="function_ref" link="Wire/requestFrom">requestFrom</span>()</li>\r\n	<li><span class="function_ref" link="Wire/beginTransmission">beginTransmission</span>()</li>\r\n	<li><span class="function_ref" link="Wire/endTransmission">endTransmission</span>()</li>\r\n	<li><span class="function_ref" link="Wire/write">write</span>()</li>\r\n	<li><span class="function_ref" link="Wire/available">available</span>()</li>\r\n	<li><span class="function_ref" link="Wire/read">read</span>()</li>\r\n	<li><span class="function_ref" link="Wire/enableTS">enableTS</span>()</li>\r\n	<!--\r\n	<li><span class="function_ref" link="Wire/onReceive">onReceive</span>()</li>\r\n	<li><span class="function_ref" link="Wire/onRequest">onRequest</span>()</li>\r\n	-->\r\n</ul>\r\n</span>\r\n\r\n<span class="function_description_note">Z-Uno can only be I2C master.</span>\r\n\r\n<span class="function_description_more">Default pins can be changed during I2C initialization:</span>\r\n\r\n<span class="function_example">\r\n<pre>\r\n<code class="c">{literal}#define SCL_PIN 11\r\n#define SDA_PIN 12\r\n\r\nI2CDriver alternative_I2C(SCL_PIN, SDA_PIN); \r\n\r\nvoid setup() {\r\n    // …\r\n    Wire.bindDriver(&alternative_I2C); // This instructs to use other pins than default\r\n    // …\r\n}{/literal}</code>\r\n</pre>\r\n</span>\r\n', '2016-07-14 12:13:49', '2018-12-24 11:58:03', 1322, 118, 1, 84),
(487, 6, '*', 'digitalToggle()', '', 'digitalToggle/', 'Reference/digitalToggle/', '<h1>digitalToggle()</h1>\r\n<span class="function_description">\r\nToggle between <span class="function_ref">HIGH</span> and <span class="function_ref">LOW</span> a digital pin.\r\n</span>\r\n\r\n<span class="function_description_more">\r\nIf the pin has been configured as an OUTPUT with <span class="function_ref">pinMode</span>, its voltage will be set 3.3V for HIGH, GROUND for LOW.\r\n</span>\r\n\r\n<span class="function_description_more">\r\nCheck <a href="/technical/pinout">Z-Uno pinout</a>\r\n</span>\r\n\r\n<span class="function_syntax">digitalToggle(pin)</span>\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">pin</span>\r\n        <span class="function_parameters_param_description">the pin number</span>\r\n    </span>\r\n</span>\r\n<span class="function_returns">\r\nnone\r\n</span>\r\n\r\n<span class="function_sideeffect">\r\nAutomatically changes pin mode to OUTPUT as pinMode(pin, OUTPUT) was called.\r\n</span>\r\n\r\n<span class="function_example">\r\n<pre>\r\n<code class="c">void setup() {\r\n    pinMode(8, OUTPUT);      // sets the digital pin as output\r\n}\r\n\r\nvoid loop() {\r\n    digitalWrite(8, HIGH);         // sets the LED on\r\n    delayMicros(4000);             // waits for four seconds\r\n    digitalToggle(8);              // sets the LED off\r\n    delay(4000);                   // waits for four seconds\r\n}\r\n</code></pre></span>  \r\n\r\n<span class="function_description_note">\r\nZ-Uno pin control is pretty slow, typical digitalToggle() call will take itself about 1 ms. Hence it is not possible to do fast pin operations except on pins 9&ndash;16 that allows special "fast mode". To use this fast mode one need to specify pin number via <span class="function_ref">s_pin</span> variable type. Z-Uno compiler will detect it and use fast mode for such digitalToggle() calls. In this case the call will take about 1&ndash;2 μs for indirect call (via function) and 0.5 μs for direct (see example below).\r\n</span>\r\n\r\n<span class="function_example">\r\n<pre>\r\n<code class="c">s_pin my_pin = 9;\r\n\r\nvoid setup() {\r\n  pinMode(my_pin, OUTPUT);\r\n}	\r\n\r\nvoid blinkWithPin(s_pin pin) {\r\n  pinMode(pin, OUTPUT);\r\n  digitalWrite(pin, 0);\r\n  delayMicroseconds(100);\r\n  digitalToggle(pin);\r\n  delayMicroseconds(100);\r\n  digitalToggle(pin);\r\n}\r\n\r\nvoid loop() {\r\n  byte another_pin;\r\n  digitalToggle(my_pin, 0);    // direct call is possible\r\n    \r\n  another_pin = 10;\r\n  blinkWithPin(another_pin);  // or call via function\r\n}\r\n</code>\r\n</pre>\r\n</span>  \r\n', '2018-10-04 23:21:02', '2018-10-04 23:21:02', 1, 6, 1, 84),
(422, 6, '*', 'Interrupts', '', 'Interrupts/', 'Reference/Interrupts/', '<h1>Interrupts</h1>\r\n<span class="function_description">\r\nZ-Uno uses hardware interrupts of Z-Wave chip as well as software generated interrupts provide users simple experience. Currently Z-Uno supports the following interrupts:\r\n<ul>\r\n    <li><span class="function_ref" link="zunoExtIntMode">INT0</span> (pin 17)</li>\r\n    <li><span class="function_ref" link="zunoExtIntMode">INT1</span> (pin 18)</li>\r\n    <li><span class="function_ref" link="zunoExtIntMode">ZEROX</span> (pin 3)</li>\r\n    <li><span class="function_ref">GPT</span> (General Purpose Timer)</li>\r\n    <li><span class="function_ref" link="1msTimer">1 milliseconds</span> software timer</li>\r\n</ul>\r\n</span>\r\n\r\n<span class="function_description_more">\r\nInterrupt handler functions should be defined in user sketch and &laquo;announced&raquo; using the corresponding <code>ZUNO_SETUP_ISR_*(<i>my_handler_func</i>)</code> macro, where <i>my_handler_func</i> is the name of the handler function.\r\n</span>\r\n\r\n<span class="function_description_note">\r\nThe code in the user interrupt handler function should be as fast as possible and <b>should not contain ANY function calls</b> except few listed below. Also don''t use local variables &mdash; use global variables instead!\r\n</span>\r\n\r\n<table>\r\n    <tr><th>Function allowed in interrupt handler</th><th>Limitations</th></tr>\r\n    <tr><td><span class="function_ref">digitalRead</span>(pin)</td><td>pin: a constant or variable of type <span class="function_ref">s_pin</span></td></tr>\r\n    <tr><td><span class="function_ref">digitalWrite</span>(pin, value)</td><td>pin: a constant or variable of type <span class="function_ref">s_pin</span></td></tr>\r\n    <tr><td><span class="function_ref">digitalToggle</span>(pin)</td><td>pin: a constant or variable of type <span class="function_ref">s_pin</span></td></tr>\r\n    <tr><td><span class="function_ref">pinMode</span>(pin, mode)</td><td>pin: a constant or variable of type <span class="function_ref">s_pin</span></td></tr>\r\n    <tr><td><span class="function_ref" link="zunoExtIntMode">zunoExtIntMode(int_num, mode)</td><td>constant int_num and mode</td></tr>\r\n    <tr><td><span class="function_ref" link="GPT/zunoGPTEnable">zunoGPTEnable</span></span>(mode)</td><td>mode: a constant</td></tr>\r\n    <tr><td><span class="function_ref" link="GPT/zunoGPTSet">zunoGPTSet</span>(value)</td><td>-</td></tr>\r\n    <tr><td><span class="function_ref" link="zunoFastPWM">zunoFastPWMEnable</span></span></span>(mode)</td><td>mode: a constant</td></tr>\r\n    <tr><td><span class="function_ref" link="zunoFastPWM">zunoFastPWMSet(a, b)</td><td>-</td></tr>\r\n    <tr><td><span class="function_ref">millis</span>()</td><td>(starting from 2.1.5)</td></tr>\r\n</table>\r\n\r\n<span class="function_syntax">ZUNO_SETUP_ISR_*(my_handler_func)</span>\r\n\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">*</span>\r\n        <span class="function_parameters_param_description">the name of the interrupt (see table below)</span>\r\n    </span>\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">my_handler_func</span>\r\n        <span class="function_parameters_param_description">the name of the user defined interrupt handler</span>\r\n    </span>\r\n</span>\r\n\r\n<br/><br/>\r\n<span class="function_description_more">\r\n<table>\r\n    <tr><th>Interrupt name</th><th>Description</th><th>Macro</th></tr>\r\n    <tr><td>INT0 rise/fall/change</td><td>Rise, fall or change of voltage on INT0 pin (pin 17)</td><td>ZUNO_SETUP_ISR_INT0(my_handler_func)</td></tr>\r\n    <tr><td>INT1 rise/fall/change</td><td>Rise, fall or change of voltage on INT1 pin (pin 18)</td><td>ZUNO_SETUP_ISR_INT1(my_handler_func)</td></tr>\r\n    <tr><td>ZEROX rise/fall/change</td><td>Rise, fall or change of voltage on ZEROX pin (pin 3)</td><td>ZUNO_SETUP_ISR_ZEROX(my_handler_func)</td></tr>\r\n    <tr><td>GPT</td><td>General purpose timer reached zero</td><td>ZUNO_SETUP_ISR_GPTIMER(my_handler_func)</td></tr>\r\n    <tr><td>1 millisecond tick</td><td>Executed every 1 millisecond</td><td>ZUNO_SETUP_ISR_1MSTIMER(my_handler_func)</td></tr>\r\n</tr>\r\n</table>\r\n</span>\r\n', '2017-02-27 22:54:47', '2018-10-04 23:16:29', 1, 127, 1, 84),
(484, 6, '*', 'zunoFastPWM', '', 'zunoFastPWM/', 'Reference/zunoFastPWM/', '<h1>Fast PWM</h1>\r\n\r\n<span class="function_description">\r\nFast PWM works only on pin A0 (digital pin 3) and allows to run PWM on a higher frequency compared to that <span class="function_ref">analogWrite</span>() provides.\r\n</span>\r\n\r\n<span class="function_description_more">\r\nCheck <a href="/technical/pinout">Z-Uno pinout</a>\r\n</span>\r\n\r\n<span class="function_syntax">zunoFastPWMInit(prescale)</span>\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">prescale</span>\r\n        <span class="function_parameters_param_description">0 for 4 MHz (timer tick is 0.25 μs) and ZUNO_GPT_SCALE1024 for 31.25 kHz (timer tick is 32 μs)</span>\r\n    </span>\r\n</span>\r\n<span class="function_returns">\r\nnone\r\n</span>\r\n\r\n<span class="function_syntax">zunoFastPWMSet(low_ticks, high_ticks)</span>\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">low_ticks</span>\r\n        <span class="function_parameters_param_description">low level time in timer ticks. Ticks depend on the speed set by zunoFastPWMInit()</span>\r\n    </span>\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">high_ticks</span>\r\n        <span class="function_parameters_param_description">high level time in timer ticks. Ticks depend on the speed set by zunoFastPWMInit()</span>\r\n    </span>\r\n</span>\r\n<span class="function_returns">\r\nnone\r\n</span>\r\n\r\n<span class="function_syntax">zunoFastPWMEnable(value)</span>\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">value</span>\r\n        <span class="function_parameters_param_description">FALSE to turn Fast PWM off and TRUE to turn on</span>\r\n    </span>\r\n</span>\r\n<span class="function_returns">\r\nnone\r\n</span>\r\n\r\n\r\n<span class="function_description_note">\r\nAfter changing parameters of Fast PWM you need to disable and then enable PWM again.\r\n</span>\r\n\r\n<span class="function_example">\r\n<pre>\r\n<code class="c">pinMode(A0, OUTPUT);\r\nzunoFastPWMInit(0);       // 0 for 4 MHz (tick is 0.25 μs) and ZUNO_GPT_SCALE1024 for 31.25 kHz (tick is 32 μs)\r\nzunoFastPWMSet(100, 100); // Low and high level time in timer ticks.\r\nzunoFastPWMEnable(1);     // Start\r\n\r\n...\r\n\r\nzunoFastPWMEnable(0);     // Turn off once not needed anymore\r\n</code></pre>\r\n</span>  \r\n', '2018-08-06 22:42:57', '2018-08-06 23:03:44', 1, 151, 1, 84),
(202, 6, '*', 'analogWrite()', '', 'analogWrite/', 'Reference/analogWrite/', '<h1>analogWrite()</h1> \r\n<span class="function_description">\r\nWrites an analog value (PWM wave) to a pin. Can be used to light a LED varying brightnesses or drive a motor at various speeds.\r\nAfter a call to analogWrite(), the pin will generate a steady square wave of the specified duty cycle until the next call to analogWrite() (or a call to <span class="function_ref">digitalRead</span>() or <span class="function_ref">digitalWrite</span>() on the same pin)\r\n</span>\r\n\r\n<span class="function_description_more">\r\nPWM 1-4 works at 488 Hz. If you need faster operation, use <span class="function_ref">zunoFastPWM</span>() on A0.\r\n</span>\r\n\r\n<span class="function_description_more">\r\nCheck <a href="/technical/pinout">Z-Uno pinout</a>\r\n</span>\r\n\r\n<span class="function_syntax">analogWrite(pin, value)</span>\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">pin</span>\r\n        <span class="function_parameters_param_description">the pin to write to: PWM1, PWM2, PWM3 and PWM4</span>\r\n    </span>\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">value</span>\r\n        <span class="function_parameters_param_description">the duty cycle: between 0 (always off) and 255 (always on) (see <span class="function_ref">analogWriteResolution</span>() for more details)</span>\r\n    </span>\r\n    \r\n</span>\r\n\r\n<span class="function_returns">\r\nNone\r\n</span>\r\n\r\n<span class="function_example">\r\nSets the output to the LED proportional to the value read from the potentiometer. \r\n<pre><code class="c">int val = 0;                   // variable to store the read value\r\n\r\nvoid setup() {\r\n}\r\n\r\nvoid loop() {\r\n  val = analogRead(A3);        // read the input pin\r\n  analogWrite(PWM1, val / 4);  // analogRead values go from 0 to 1023, analogWrite values from 0 to 255\r\n}\r\n</code></pre>\r\n</span>\r\n\r\n<span class="function_see_also">\r\n<span class="function_ref">analogWriteResolution</span>()\r\n</span>', '2015-08-04 18:30:47', '2018-08-06 23:00:23', 1322, 75, 1, 84),
(481, 6, '*', 'zunoNID()', '', 'zunoNID/', 'Reference/zunoNID/', '<h1>zunoNID()</h1>\r\n<span class="function_description">\r\nReturns Node Id of Z-Uno. If not in network, the returned value is 0.\r\n<br/><br/>\r\nThis function is useful to show the current Node Id on a connected screen to allow identify this node.\r\n</span>\r\n\r\n<span class="function_syntax">\r\n    byte nodeId = zunoNID()\r\n</span>\r\n\r\n<span class="function_returns">\r\n    current Node Id of Z-Uno\r\n</span>\r\n', '2018-06-27 22:16:11', '2018-06-27 22:21:07', 1, 150, 1, 84),
(479, 6, '*', 'zunoReboot()', '', 'zunoReboot/', 'Reference/zunoReboot/', '<h1>zunoReboot()</h1>\r\n<span class="function_description">\r\nReboot Z-Uno. This function uses internally watch dog with an infinite loop. The sketch will restart from the beginning.\r\n</span>\r\n\r\n<span class="function_syntax">\r\n    zunoReboot()\r\n</span>\r\n\r\n<span class="function_description_note">\r\nIf the service button is pulled down, your sketch will not boot anymore and Z-Uno will enter in <a href="/getting-started/troubleshooting#Z-UnoHangs">Rescue mode</a>.\r\n</span>\r\n\r\n<span class="function_description_note">\r\nIf your sketch requires periodical reboot to work properly, your sketch has huge problems! We suggest to debug it instead of doing a workaround with a reboot. In most cases your code hangs due to stack overflow. Use reboot only for debugging purpose.\r\n</span>\r\n', '2018-06-27 22:07:24', '2018-06-27 22:19:48', 1, 148, 1, 84),
(480, 6, '*', 'zunoInNetwork()', '', 'zunoInNetwork/', 'Reference/zunoInNetwork/', '<h1>zunoInNetwork()</h1>\r\n<span class="function_description">\r\nReturns true if Z-Uno is currently included in the network. Otherwise false.\r\n<br/><br/>\r\nThis function is useful to info the user that the device is not in the network yet or to allow changing device type/channels types right from the sketch when the device is not in network.\r\n</span>\r\n\r\n<span class="function_syntax">\r\n    bool inNetwork = zunoInNetwork()\r\n</span>\r\n\r\n<span class="function_returns">\r\n    true if in the network, otherwise false\r\n</span>\r\n', '2018-06-27 22:12:21', '2018-06-27 22:16:26', 1, 149, 1, 84),
(468, 6, '*', 'ZUNO_SETUP_CFGPARAMETER_HANDLER()', '', 'ZUNO_SETUP_CFGPARAMETER_HANDLER/', 'Reference/ZUNO_SETUP_CFGPARAMETER_HANDLER/', '<h1>ZUNO_SETUP_CFGPARAMETER_HANDLER()</h1>\r\n<span class="function_description">\r\nZ-Uno can be configured using standard Z-Wave Configuration feature. A Z-Wave controller can push parameter values to Z-Uno to tune Z-Uno behavior without changing Z-Uno sketch.\r\n<br/><br/>\r\nThis macro defines the handler to be called on Configuration parameter change.\r\n<br/><br/>\r\nZ-Uno supports up to 32 configurable parameters.\r\n</span>\r\n\r\n<span class="function_syntax">\r\n    ZUNO_SETUP_CFGPARAMETER_HANDLER(config_parameter_changed)\r\n</span>\r\n\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">config_parameter_changed</span>\r\n        <span class="function_parameters_param_description">Function to be called on parameters changed from the Z-Wave network. Function prototype is:\r\n            <br/>\r\n            <code>void config_parameter_changed(byte param, word * value)</code>\r\n            <br/>\r\n            param is the parameter number.\r\n            <br/>\r\n            value is the new value in 2-bytes representation \r\n        </span>\r\n    </span>\r\n</span>\r\n\r\n<span class="function_description_more">\r\nConfiguration parameters are automatically saved to the EEPROM. You can get them from the EEPROM at any time (even after reboot) using zunoLoadCFGParam(param, &value) or save (to be reported back to the controller upon request) using zunoSaveCFGParam(param, &value)\r\n</span>\r\n\r\n<span class="function_syntax">\r\n    zunoLoadCFGParam(byte param, word * value);\r\n</span>\r\n\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">param</span>\r\n        <span class="function_parameters_param_description">Number of the parameter to be loaded from the EEPROM (starts from 64)</code>\r\n        </span>\r\n    </span>\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">value</span>\r\n        <span class="function_parameters_param_description">reference to the word variable to load the value to</code>\r\n        </span>\r\n    </span>\r\n</span>\r\n\r\n<span class="function_syntax">\r\n    zunoSaveCFGParam(byte param, word * value);\r\n</span>\r\n\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">param</span>\r\n        <span class="function_parameters_param_description">Number of the parameter to be saved to the EEPROM (starts from 64)</code>\r\n        </span>\r\n    </span>\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">value</span>\r\n        <span class="function_parameters_param_description">reference to the word variable to take the value from</code>\r\n        </span>\r\n    </span>\r\n</span>\r\n\r\n<span class="function_description_note">\r\nParameters on the Z-Wave controller side are numbered from 64 to 96.\r\n</span>\r\n\r\n<span class="function_description_note">\r\nNote that Configuration parameters are signed values when defined in the Z-Wave controller.\r\n</span>\r\n\r\n<span class="function_description_note">\r\nPrior to version 2.1.4 parameters were 4 bytes (dword). Starting from 2.1.4 parameters are now two bytes (word).\r\n</span>\r\n\r\n<span class="function_example">\r\n     <pre>\r\n         <code class="c">word paramValue;\r\n\r\nZUNO_SETUP_CFGPARAMETER_HANDLER(config_parameter_changed);\r\n\r\nvoid setup() {\r\n  zunoLoadCFGParam(64, &amp;paramValue);\r\n}\r\n\r\nvoid config_parameter_changed(byte param, word * value) {\r\n    if(param == 64) { // The first user-defined parameter \r\n      paramValue = *value;  \r\n    }\r\n}\r\n\r\nvoid loop() {\r\n}</code></pre>\r\n </span> \r\n\r\n<span class="function_description_note">\r\n    Configuration parameters values are stored in the <span class="function_ref">EEPROM</span>.\r\n</span>\r\n\r\n<span class="function_see_also">\r\n    Get more information about <span class="function_ref">Z-Wave</span>.\r\n</span>\r\n', '2017-10-20 02:13:13', '2018-06-27 18:06:51', 1, 147, 1, 84),
(478, 6, '*', 'Software Serial', '', 'software-serial/', 'Reference/software-serial/', '<h1>Software Serial</h1>\r\n<span class="function_description">\r\n    Z-Uno hardware serial allows UART baud rates starting from 9600 bps. Slower baudrates are available with Software Serial library. The following baudrates are supported: 1200, 2400, 4800 or 9600 bps, 1 stop bit, no parity bit.\r\n\r\n    Like hardware <span class="function_ref">Serial</span> same methods are available for Software Serial. The only difference is that the rate specified in <span class="function_ref" link="Serial/begin">begin</span>().\r\n</span>\r\n\r\n<span class="function_description_note"> Software Serial library cab be attached to any pair of <span class="function_ref" link="s_pin">Fast Pins</span>.</span>\r\n<span class="function_description_note"> Only one duplex (Rx & Tx) Software Serial can be used at time or up to 8 with Tx only.</span>\r\n\r\n<span class="function_syntax">\r\n<pre>\r\n<code class="c">SoftwareSerial swserial(pinTx, pinRx);</code></pre>\r\n</span>\r\n\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">pinTx</span>\r\n        <span class="function_parameters_param_description">pin from <span class="function_ref" link="s_pin">Fast Pins</span> that is used for transmit (Tx)</span>\r\n    </span>\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">pinRx</span>\r\n        <span class="function_parameters_param_description">pin from <span class="function_ref" link="s_pin">Fast Pins</span> that is used for receive (Rx). If not specified, only send operations will be possible.</span>\r\n    </span>\r\n</span>\r\n\r\n<span class="function_returns">\r\nC++ object is defined\r\n</span>\r\n\r\n<span class="function_example">\r\n<pre>\r\n<code class="c">#include "SoftwareSerial.h"\r\n\r\nSoftwareSerial swserial(11, 12);      // duplex mode on pins 11 and 12\r\nSoftwareSerial swserial_sendonly(14); // send only on pin 14\r\n\r\nvoid setup() {\r\n    swserial.begin(4800);\r\n    swserial_sendonly.begin(1200);\r\n}\r\n\r\nvoid loop() {\r\n    swserial.println(millis());\r\n\r\n    while(swserial.available()){\r\n        char c = swserial.read();\r\n        swserial_sendonly.write(c);\r\n    }\r\n    delay(1000);\r\n}</code></pre>\r\n</span>  \r\n', '2018-06-22 00:29:38', '2018-06-22 01:03:29', 1, 117, 1, 84),
(213, 6, '*', 'Serial.begin()', '', 'begin/', 'Reference/Serial/begin/', '<h1>Serial.begin()</h1>\r\n<span class="function_description">\r\nSets the data rate in bits per second (baud) for serial data transmission. For USB baudrate is fixed on 115200 bps, on UART it is possible to select baudrate. Valid values are: 9600, 14400, 19200, 38400, 57600, 115200, 230400 bps</span>\r\n\r\n<span class="function_description_more">For lower baudrates use <span class="function_ref" link="Software-Serial">Software Serial</span></span>\r\n\r\n<span class="function_syntax">\r\n<pre>\r\n<code class="c">Serial.begin(baudrate) // for UART\r\nSerial.begin()         // for USB\r\n</code></pre>\r\n</span>\r\n\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">baudrate</span>\r\n        <span class="function_parameters_param_description">baudrate to be used. If omitted, default 115200 bps is used (the only available on USB interface)</span>\r\n    </span>\r\n</span>\r\n\r\n<span class="function_returns">\r\nnothing\r\n</span>\r\n\r\n<span class="function_example">\r\n<pre>\r\n<code class="c">void setup() {\r\n    Serial.begin();      // opens serial port on USB, sets data rate to 115200 bps\r\n    Serial1.begin(9600); // opens serial port on UART1, sets data rate to 9600 bps\r\n}\r\n</code></pre>\r\n</span>  ', '2015-08-12 14:05:05', '2018-06-22 00:30:05', 1322, 2, 1, 285),
(474, 6, '*', 'ZUNO_THERMOSTAT()', '', 'ZUNO_THERMOSTAT/', 'Reference/ZUNO_THERMOSTAT/', '<h1>ZUNO_THERMOSTAT()</h1>\r\n\r\n<span class="function_description">\r\nThis macro is used to setup thermostat channel for Z-Uno board using <span class="function_ref">ZUNO_SETUP_CHANNELS</span>.\r\n</span>\r\n\r\n<span class="function_syntax">ZUNO_THERMOSTAT(flags, units, neg_pos, limits, getterMode, setterMode, getterTemp, setterTemp)</span>\r\n\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">flags</span>\r\n        <span class="function_parameters_param_description">Byte mask with supported modes. There are predefined constants named THERMOSTAT_FLAGS_*. Exact list can be found in <a href="https://github.com/Z-Wave-Me/Z-Uno-Core/blob/uCXX_Cores/hardware/arduino/zuno/cores/zuno/ZUNO_Definitions.h">ZUNO_Definitions.h</a>.</span>\r\n    </span>\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">units</span>\r\n        <span class="function_parameters_param_description">Use THERMOSTAT_UNITS_CELSIUS for °C and THERMOSTAT_UNITS_FAHRENHEIT for °F. Most controllers will automatically convert reported values to the regional units.</span>\r\n    </span>\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">neg_pos</span>\r\n        <span class="function_parameters_param_description">Defines if only negative, only positive or both negative and positive values should be accepted. Use THERMOSTAT_RANGE_NEG, THERMOSTAT_RANGE_POS or THERMOSTAT_RANGE_NEG | THERMOSTAT_RANGE_POS.</span>\r\n    </span>\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">limit</span>\r\n        <span class="function_parameters_param_description">Sets the limit for values: 0 … limit*10 for THERMOSTAT_RANGE_POS, -limit*10 … 0 for THERMOSTAT_RANGE_NEG and -limit*10 … limit*10 for THERMOSTAT_RANGE_NEG | THERMOSTAT_RANGE_POS.</span>\r\n    </span>\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">getterMode</span>\r\n        <span class="function_parameters_param_description">pointer to a user defined function, which is supposed to return current mode: THERMOSTAT_MODE_OFF, THERMOSTAT_MODE_HEAT, THERMOSTAT_MODE_COOL or THERMOSTAT_MODE_AUTO.</span>\r\n    </span>\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">setterMode</span>\r\n        <span class="function_parameters_param_description">pointer to a user defined function, which is called when new mode is received for this channel. Setter function will accept one parameter with values: THERMOSTAT_MODE_OFF, THERMOSTAT_MODE_HEAT, THERMOSTAT_MODE_COOL or THERMOSTAT_MODE_AUTO</span>\r\n    </span>\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">getterTemp</span>\r\n        <span class="function_parameters_param_description">pointer to a user defined function, which is supposed to return current temperature value of a specified mode for this channel.</span>\r\n    </span>\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">setterTemp</span>\r\n        <span class="function_parameters_param_description">pointer to a user defined function, which is called when new temperature value is received for the specified mode of this channel. Setter function will accept two parameters: BYTE mode and WORD temperature value interpretted depending on channel flags.</span>\r\n    </span>\r\n</span>\r\n\r\n<span class="function_description">\r\nFunctions getterMode should the current mode (see THERMOSTAT_MODE_* in <a href="https://github.com/Z-Wave-Me/Z-Uno-Core/blob/uCXX_Cores/hardware/arduino/zuno/cores/zuno/ZUNO_Definitions.h">ZUNO_Definitions.h</a>.\r\n</span>\r\n<span class="function_syntax">BYTE getterMode(void)</span>\r\n\r\n<span class="function_description">\r\nFunctions setterMode accepts the new thermostat mode (see THERMOSTAT_MODE_* in <a href="https://github.com/Z-Wave-Me/Z-Uno-Core/blob/uCXX_Cores/hardware/arduino/zuno/cores/zuno/ZUNO_Definitions.h">ZUNO_Definitions.h</a>.\r\n</span>\r\n<span class="function_syntax">void setterMode(BYTE mode)</span>\r\n\r\n<span class="function_description">\r\nFunctions getterTemp should return WORD (two bytes) representing the temperature for a specified mode. \r\n</span>\r\n<span class="function_syntax">BYTE getterTemp(BYTE mode)</span>\r\n\r\n<span class="function_description">\r\nFunctions setterTemp accepts a WORD representing the new temperature for a specified mode.\r\n</span>\r\n<span class="function_syntax">void setterTemp(BYTE mode, WORD temp)</span>\r\n\r\n<span class="function_note">\r\nThe temperature is represented by a WORD (2 bytes) with one digit precision. This means value 105 = 10.5°, 235 = 23.5°, 300 = 30° etc.\r\n</span>\r\n\r\n<span class="function_tip">\r\nChannel generated using this macro will have Z-Wave Device Class GENERIC_TYPE_THERMOSTAT / SPECIFIC_TYPE_THERMOSTAT_GENERAL with Thermostat Mode and Thermostat Setpoint Command Classes.\r\n</span>\r\n\r\n<span class="function_example">\r\n    <pre>\r\n        <code class="c">ZUNO_SETUP_CHANNELS(ZUNO_THERMOSTAT(THERMOSTAT_FLAGS_OFF|THERMOSTAT_FLAGS_HEAT|THERMOSTAT_FLAGS_COOL, THERMOSTAT_UNITS_CELSIUS, THERMOSTAT_RANGE_NEG|THERMOSTAT_RANGE_POS, 3, getterMode, setterMode, getterTemp, setterTemp));\r\n\r\n           \r\nvoid setup() {\r\n    ...\r\n}\r\n\r\nvoid loop() {\r\n    ...\r\n}\r\n\r\nBYTE getterMode() {\r\n    return currentMode;\r\n}\r\n\r\nvoid setterMode(BYTE mode) {\r\n    ...\r\n}\r\n\r\nWORD getterTemp(BYTE mode) {\r\n    return currentSetpoint;\r\n}\r\n\r\nvoid setterTemp(BYTE mode, WORD temp) {\r\n    ...\r\n}</code>\r\n    </pre>\r\n</span>', '2018-06-02 16:40:14', '2018-06-02 22:04:51', 1, 86, 1, 84),
(454, 6, '*', 'zunoStartLearn()', '', 'zunoStartLearn/', 'Reference/zunoStartLearn/', '<h1>zunoStartLearn()</h1>\r\n<span class="function_description">\r\nEnable and abort Learn mode. Learn mode is used to include Z-Uno in your Z-Wave network and exclude it from existing network. This function can be used to include or exclude Z-Uno instead of triple click on the Service Button.\r\n</span>\r\n\r\n<span class="function_syntax">zunoStartLearn(timeout, secure)</span>\r\n\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">timeout</span>\r\n        <span class="function_parameters_param_description">time in seconds to wait for inclusion/exclusion before canceling.\r\n        </span>\r\n    </span>\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">secure</span>\r\n        <span class="function_parameters_param_description">0 to start unsecure inclusion (skipping all security and encryption) and > 0 for secure inclision (with Security S0 or S2 depending on the settings in the IDE.\r\n        </span>\r\n    </span>\r\n</span>\r\n', '2017-08-28 01:39:21', '2018-06-02 18:22:09', 1, 136, 1, 84),
(475, 6, '*', 'ZUNO_DOORLOCK()', '', 'ZUNO_DOORLOCK/', 'Reference/ZUNO_DOORLOCK/', '<h1>ZUNO_DOORLOCK()</h1>\r\n\r\n<span class="function_description">\r\nThis macro is used to setup door lock channel for Z-Uno board using <span class="function_ref">ZUNO_SETUP_CHANNELS</span>.\r\n</span>\r\n\r\n<span class="function_syntax">ZUNO_DOORLOCK(getter, setter)</span>\r\n\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">getter</span>\r\n        <span class="function_parameters_param_description">pointer to a user defined function, which is supposed to return current door lock mode for this channel.</span>\r\n    </span>\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">setter</span>\r\n        <span class="function_parameters_param_description">pointer to a user defined function, which is called when new door lock mode is received for this channel.</span>\r\n    </span>\r\n</span>\r\n\r\n<span class="function_description">\r\nFunctions getter should return 0 for opened or 255 closed.\r\n</span>\r\n<span class="function_syntax">BYTE getter(void)</span>\r\n\r\n<span class="function_description">\r\nFunctions setter accepts values 0 for open and 255 for close.\r\n</span>\r\n<span class="function_syntax">void setter(BYTE value)</span>\r\n\r\n<span class="function_tip">\r\nChannel generated using this macro will have Z-Wave Device Class GENERIC_TYPE_ENTRY_CONTROL / SPECIFIC_TYPE_DOOR_LOCK with Switch Multilevel Command Class.\r\n</span>\r\n\r\n<span class="function_description_note">\r\nThis type is allowed only if security is used. Otherwise it will be disabled and hidden.\r\n</span>\r\n\r\n<span class="function_example">\r\n    <pre>\r\n        <code class="c">ZUNO_SETUP_CHANNELS(ZUNO_DOORLOCK(getterFunction, setterFunction))\r\n           \r\nvoid setup() {\r\n    ...\r\n}\r\n\r\nvoid loop() {\r\n    ...\r\n}\r\n\r\nBYTE getterFunction() {\r\n    return ...;\r\n}\r\n\r\nvoid setterFunction(BYTE newValue) {\r\n    ...\r\n}\r\n        </code>\r\n    </pre>\r\n</span>\r\n', '2018-06-02 16:45:38', '2018-06-02 17:38:12', 1, 86, 1, 84),
(476, 6, '*', 'ZUNO_REPORTS_HANDLER()', '', 'ZUNO_REPORTS_HANDLER/', 'Reference/ZUNO_REPORTS_HANDLER/', '<h1>ZUNO_REPORTS_HANDLER()</h1>\r\n\r\n<span class="function_description">\r\nThis macro is used to setup up a handler for incoming reports from other sensors.\r\n</span>\r\n\r\n<span class="function_syntax">ZUNO_REPORTS_HANDLER(reportHandler)</span>\r\n\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">reportHandler</span>\r\n        <span class="function_parameters_param_description">pointer to a user defined function that parses the incoming report.</span>\r\n    </span>\r\n</span>\r\n\r\n<span class="function_syntax">void reportHandler(void)</span>\r\n\r\n<span class="function_tip">\r\nThere are few helpful marco to parse the reported data inside the report handler:\r\n<ul>\r\n    <li>REPORT_TYPE() returns the type of the report: CC_BASIC, CC_SWITCH_BINARY, CC_SWITCH_MULTILEVEL, CC_SENSOR_BINARY, CC_SENSOR_MULTILEVEL, CC_METER, CC_THERMOSTAT_MODE, CC_THERMOSTAT_SETPOINT.</li>\r\n    <li>REPORT_GROUP_ID() returns the first group containing the sender or 255 if the sender is not present in any group</li>\r\n    <li>REPORT_NODE_ID() returns the sender Node Id</li>\r\n\r\n    <li>REPORT_VALUE_1B() returns the BYTE value contained in the Switch Binary, Switch Multilevel, Sensor Binary/Notification, Door Lock, Thermostat Mode reports as well as Sensor Multilevel, Meter or Thermostat temperature report with size = 1 bytes</li>\r\n    <li>REPORT_VALUE_2B() returns the WORD value contained in the Sensor Multilevel, Meter or Thermostat temperature report with size = 2 bytes</li>\r\n    <li>REPORT_VALUE_4B() returns the DWORD value contained in the Sensor Multilevel, Meter or Thermostat temperature report with size = 4 bytes</li>\r\n    \r\n    <li>REPORT_SENSOR_TYPE() returns sensor type</li>\r\n    <li>REPORT_SENSOR_SCALE() returns sensor scale</li>\r\n    <li>REPORT_SENSOR_VALUE_UNITS() returns sensor units</li>\r\n    <li>REPORT_SENSOR_VALUE_PRECISION() returns sensor precision (number of digits after .)</li>\r\n    <li>REPORT_SENSOR_VALUE_SIZE() returns sensor value size (1, 2 or 4 bytes)</li>\r\n    \r\n    <li>REPORT_METER_TYPE() returns meter type</li>\r\n    <li>REPORT_METER_RATE() returns meter rate</li>\r\n    <li>REPORT_METER_VALUE_UNITS() returns meter units</li>\r\n    <li>REPORT_METER_VALUE_PRECISION() returns meter precision (number of digits after .)</li>\r\n    <li>REPORT_METER_VALUE_SIZE() returns Meter value size (1, 2 or 4 bytes)</li>\r\n</ul>\r\n\r\nIf you need to parse the report outside of the report handler, use CLONE_REPORT_DATA(<i>variable</i>) to copy the report data to a <i>variable</i>. Then use EXTRACT_*(<i>variable</i>) macro to extract data from the copy of the report.\r\n</span>\r\n\r\n<span class="function_description_note">\r\nZ-Uno will save the highest security level it used to communicate with a devices. The save value will be expected for a report.\r\n</span>\r\n\r\n<span class="function_example">\r\n    <pre>\r\n        <code class="c">ZUNO_REPORTS_HANDLER(reportHandler);\r\n\r\nvoid reportHandler() {\r\n  ... REPORT_VALUE_1B() ...\r\n}</code></pre>\r\n</span>\r\n\r\n<span class="function_description_note">\r\nIt is suggested to return as fast as possible from the reports handler and do the main work in the loop().\r\n</span>\r\n\r\n<span class="function_example">\r\n    <pre>\r\n        <code class="c">ZUNO_REPORTS_HANDLER(reportHandler);\r\n\r\n// memory to store the incoming report\r\nREPORT_DATA_TYPE report_data;\r\n\r\nvoid reportHandler() {\r\n  CLONE_REPORT_DATA(report_data);\r\n  ...\r\n}\r\n\r\nvoid loop() {\r\n    ... EXTRACT_REPORT_VALUE_1B(report_data) ...\r\n}</code></pre>\r\n</span>\r\n', '2018-06-02 17:12:02', '2018-06-02 17:33:54', 1, 89, 1, 84),
(186, 6, '*', 'ZUNO_SETUP_CHANNELS()', '', 'ZUNO_SETUP_CHANNELS/', 'Reference/ZUNO_SETUP_CHANNELS/', '<h1>ZUNO_SETUP_CHANNELS()</h1>\r\n<span class="function_description">\r\nThis macro is used to add additional channels to the Z-Uno board, each of them for a separate function (i.e. 1st one is a dimmer, 2nd one is a temperature sensor, 3rd one is an open/close sensor, etc.).\r\n</span>\r\n\r\n<span class="function_syntax">\r\n    ZUNO_SETUP_CHANNELS(channelType1, channelType2,...)\r\n</span>\r\n\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">channelType</span>\r\n        <span class="function_parameters_param_description">Channel description array\r\n        </span>\r\n    </span>\r\n</span>\r\n\r\n<span class="function_description_more">This array should contain structures, each consists of the following items:</span>\r\n<ul>\r\n    <li>Channel type (Switch Binary, Switch Multilevel, Sensor Binary, Sensor Multilevel, Meter, Siren , Blind, Flow Stop, Color, Door Lock, Thermostat)</li>\r\n    <li>Channel parameter 1 (for sensors and meters it''s type, for switches not used)</li>\r\n    <li>Channel parameter 2 (for sensor Multilevel and Meter it''s scale, precision and size combined in one byte)</li>\r\n    <li>Channel setter function (a pointer to any user defined function, which is supposed to parse data, coming to the channel (i.e. for Switch Binary channel a command from another device, containing a new value (On/Off)).</li>\r\n    <li>Channel getter function (a pointer to any user defined function, which is supposed to return current value for this channel (i.e. for Switch Binary channel request from another device of the current value of the channel (On/Off).</li>\r\n</ul>\r\n\r\n<span class="function_description_more">To make life easier there are simple macro defining popular types of channels: <span class="function_ref">ZUNO_SWITCH_MULTILEVEL</span>, <span class="function_ref">ZUNO_SWITCH_BINARY</span>, <span class="function_ref">ZUNO_SENSOR_MULTILEVEL</span>, <span class="function_ref">ZUNO_SENSOR_BINARY</span>, <span class="function_ref">ZUNO_METER</span>, <span class="function_ref">ZUNO_BLINDS</span>(), <span class="function_ref">ZUNO_FLOWSTOP</span>(), <span class="function_ref">ZUNO_SIREN</span>(), <span class="function_ref">ZUNO_SWITCH_COLOR</span>(), <span class="function_ref">ZUNO_THERMOSTAT</span>(), <span class="function_ref">ZUNO_DOORLOCK</span>() and many others defined in <a href="https://github.com/Z-Wave-Me/Z-Uno-Core/blob/master/hardware/arduino/zuno/cores/zuno/ZUNO_Definitions.h">ZUNO_Definitions.h</a>.</span>\r\n\r\n<span class="function_description_more">\r\nThis macro hides behind itself an array in a code space of the Z-Uno module. On the start of the Sketch bootloader, if the device is not included in the network, the bootloader looks for this array, and if he founds it, then he configures channels of the device. \r\n</span>\r\n\r\n<span class="function_description_note">\r\nZ-Uno supports up to 10 channels\r\n</span>\r\n\r\n<span class="function_description_note">\r\nAfter changing numer of types of channels Z-Uno must be excluded and included back. Z-Uno will not adopt any channel type change without being excluded. (A <a href="/z-wave/configuration-parameters/">debug configuration parameter</a> can disable this restriction).\r\n</span>\r\n\r\n<span class="function_example">\r\n    <pre>\r\n        <code class="c">ZUNO_SETUP_CHANNELS(ZUNO_SENSOR_MULTILEVEL_TEMPERATURE(getterFunctionAddress))</code>\r\n    </pre>\r\n</span>\r\n\r\n<span class="function_see_also">\r\n    Get more information about <span class="function_ref">Z-Wave</span>.\r\n</span>\r\n\r\n', '2015-07-29 16:52:00', '2018-06-02 16:48:41', 1322, 90, 1, 84),
(473, 6, '*', 'ZUNO_SWITCH_COLOR()', '', 'ZUNO_SWITCH_COLOR/', 'Reference/ZUNO_SWITCH_COLOR/', '<h1>ZUNO_SWITCH_COLOR()</h1>\r\n\r\n<span class="function_description">\r\nThis macro is used to setup color switch channel for Z-Uno board using <span class="function_ref">ZUNO_SETUP_CHANNELS</span>.\r\n</span>\r\n\r\n<span class="function_syntax">ZUNO_SWITCH_COLOR(flags, getter, setter)</span>\r\n\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">flags</span>\r\n        <span class="function_parameters_param_description">Byte mask with supported colors. There are predefined constants named SWITCH_COLOR_FLAGS_*. Exact list can be found in <a href="https://github.com/Z-Wave-Me/Z-Uno-Core/blob/uCXX_Cores/hardware/arduino/zuno/cores/zuno/ZUNO_Definitions.h">ZUNO_Definitions.h</a>.</span>\r\n    </span>\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">getter</span>\r\n        <span class="function_parameters_param_description">pointer to a user defined function, which is supposed to return current value of a specified component for this channel.</span>\r\n    </span>\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">setter</span>\r\n        <span class="function_parameters_param_description">pointer to a user defined function, which is called when new value is received for this channel. Setter function will accept one parameter with values from 0 (off) to 99 (maximum)</span>\r\n    </span>\r\n</span>\r\n\r\n<span class="function_description">\r\nFunctions getter should return 0-255, where 0 is Off and 255 is maximal brightness. Parameter component refers to the color component (see SWITCH_COLOR_COMPONENT_* in <a href="https://github.com/Z-Wave-Me/Z-Uno-Core/blob/uCXX_Cores/hardware/arduino/zuno/cores/zuno/ZUNO_Definitions.h">ZUNO_Definitions.h</a>.\r\n</span>\r\n<span class="function_syntax">BYTE getter(BYTE component)</span>\r\n\r\n<span class="function_description">\r\nFunctions setter accepts values 0-255 (0 is Off, 255 is maximal value). Parameter component refers to the color component (see SWITCH_COLOR_COMPONENT_* in <a href="https://github.com/Z-Wave-Me/Z-Uno-Core/blob/uCXX_Cores/hardware/arduino/zuno/cores/zuno/ZUNO_Definitions.h">ZUNO_Definitions.h</a>.\r\n</span>\r\n<span class="function_syntax">void setter(BYTE component, BYTE value)</span>\r\n\r\n<span class="function_tip">\r\nChannel generated using this macro will have Z-Wave Device Class GENERIC_TYPE_SWITCH_MULTILEVEL / SPECIFIC_TYPE_COLOR_TUNABLE_MULTILEVEL with Switch Color Command Class.\r\n</span>\r\n\r\n<span class="function_description_note">\r\nThis type is allowed only in ZUNO_SLEEPING_MODE_ALWAYS_AWAKE power mode (see <span class="function_ref">ZUNO_SETUP_SLEEPING_MODE</span>).\r\n</span>\r\n\r\n<span class="function_example">\r\n    <pre>\r\n        <code class="c">ZUNO_SETUP_CHANNELS(ZUNO_SWITCH_COLOR(SWITCH_COLOR_FLAGS_RED|SWITCH_COLOR_FLAGS_GREEN|SWITCH_COLOR_FLAGS_BLUE, getterFunction, setterFunction))\r\n           \r\nvoid setup() {\r\n    ...\r\n}\r\n\r\nvoid loop() {\r\n    ...\r\n}\r\n\r\nBYTE getterFunction(BYTE component) {\r\n    return currentValue;\r\n}\r\n\r\nvoid setterFunction(BYTE component, BYTE newValue) {\r\n    ...\r\n}</code>\r\n    </pre>\r\n</span>', '2018-06-02 16:23:17', '2018-06-02 16:23:17', 1, 81, 1, 84),
(472, 6, '*', 'tone() and noTone()', '', 'tone-noTone/', 'Reference/tone-noTone/', '<h1>tone() and noTone()</h1>\r\n\r\n<span class="function_description">\r\nProduces a tone with the specified frequency on a pin. noTone() turns off the tone leaving the pin in output low state. Those functions are usefull to produce audio feedback to the user. tone() is not blocking - the tone is produced by the timer (GPT) as a background process.\r\n</span>\r\n\r\n<span class="function_description_note">\r\n    Functions tone()/noTone() requires Tone.h include file.\r\n</span>\r\n\r\n<span class="function_description_note">\r\n    tone() works only with fast pins defined via <span class="function_ref">s_pin</span> data type and hence can work only on pins 9&ndash;16.\r\n</span>\r\n\r\n<span class="function_description_note">\r\n    tone() uses <span class="function_ref">GPT</span>, so GPT can not be used simultaneously with tone().\r\n</span>\r\n\r\n<span class="function_syntax">tone(pin, frequency);</span>\r\n\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">pin</span>\r\n        <span class="function_parameters_param_description">the number of the pin on which you want to produce a tone (<span class="function_ref">s_pin</span> type)</span>\r\n    </span>\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">frequency</span>\r\n        <span class="function_parameters_param_description">frequency of the tone in Hertz</span>\r\n    </span>\r\n</span>\r\n\r\n<span class="function_returns">\r\nnone\r\n</span>\r\n\r\n<span class="function_syntax">noTone(pin);</span>\r\n\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">pin</span>\r\n        <span class="function_parameters_param_description">the number of the pin on which you want to produce a tone (<span class="function_ref">s_pin</span> type)</span>\r\n    </span>\r\n</span>\r\n\r\n<span class="function_returns">\r\nnone\r\n</span>\r\n\r\n\r\n<span class="function_example">\r\n<pre>\r\n<code class="c">{literal}#include "Tone.h"\r\n\r\nvoid setup() {\r\n}\r\n\r\nvoid loop() {\r\n  tone(11, 440);\r\n  delay(1000);\r\n  noTone(11);\r\n  delay(4000);\r\n}\r\n{/literal}</code>\r\n</pre>\r\n</span>\r\n ', '2018-06-02 15:32:18', '2018-06-02 15:49:04', 1, 126, 1, 84),
(355, 6, '*', 'EEPROM.put()', '', 'put/', 'Reference/EEPROM/put/', '<h4>EEPROM.put()</h4>\r\n\r\n<span class="function_description">\r\nWrite from memory buffer into EEPROM.\r\n</span>\r\n<span class="function_syntax">byte EEPROM.put(dword address, void * value, word val_size)</span>\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">address</span>\r\n        <span class="function_parameters_param_description">address in EEPROM (dword)</span>\r\n    </span>\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">value</span>\r\n        <span class="function_parameters_param_description">pointer to the buffer (void *)</span>\r\n    </span>\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">val_size</span>\r\n        <span class="function_parameters_param_description">number of bytes to write (word)</span>\r\n    </span>\r\n</span>\r\n<span class="function_returns">\r\n1 in case of success, 0 on fail\r\n</span>\r\n ', '2016-08-24 04:33:44', '2018-05-19 00:23:54', 1, 1, 1, 354);
INSERT INTO `site_page` (`id`, `domain_id`, `route`, `name`, `title`, `url`, `full_url`, `content`, `create_datetime`, `update_datetime`, `create_contact_id`, `sort`, `status`, `parent_id`) VALUES
(356, 6, '*', 'EEPROM.get()', '', 'get/', 'Reference/EEPROM/get/', '<h4>EEPROM.get()</h4>\r\n\r\n<span class="function_description">\r\nRead from EEPROM into user specified memory buffer.\r\n</span>\r\n<span class="function_syntax">byte EEPROM.get(dword address, void * value, word val_size)</span>\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">address</span>\r\n        <span class="function_parameters_param_description">address in EEPROM (dword)</span>\r\n    </span>\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">value</span>\r\n        <span class="function_parameters_param_description">pointer to the buffer (void *)</span>\r\n    </span>\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">val_size</span>\r\n        <span class="function_parameters_param_description">number of bytes to read (word)</span>\r\n    </span>\r\n</span>\r\n<span class="function_returns">\r\n1 in case of success, 0 on fail\r\n</span>\r\n ', '2016-08-24 04:34:50', '2018-05-19 00:23:28', 1, 2, 1, 354),
(354, 6, '*', 'EEPROM Library', '', 'EEPROM/', 'Reference/EEPROM/', '<h1>EEPROM Library</h1>\r\n\r\n<span class="function_description">\r\nThis librariry provides access to internal 360 kB non-volatile EEPROM. Data written to EEPROM is saved even if Z-Uno is not powered. Use it to store data in battery and FLiRS devices that should survive battery unplug.\r\n<ul>\r\n    <li><span class="function_ref" link="EEPROM/put">put</span></li>\r\n    <li><span class="function_ref" link="EEPROM/get">get</span></li>\r\n    <li><span class="function_ref" link="EEPROM/read">read</span></li>\r\n    <li><span class="function_ref" link="EEPROM/update">update</span></li>\r\n    <li><span class="function_ref" link="EEPROM/write">write</span></li>\r\n</ul>\r\n</span>\r\n\r\n<span class="function_example">\r\n<pre><code lang="c">{literal}#include "EEPROM.h"\r\n\r\nBYTE some_data[] = {0xaa, 0xbb, 0xcc, 0xdd, 0xee}; \r\nBYTE read_data[5];\r\n\r\nvoid setup() {\r\n  Serial.begin();\r\n}\r\n\r\nvoid loop() {\r\n    byte i;\r\n    word res;\r\n    dword addr = 0x800;\r\n\r\n\r\n    Serial.println("Reading 128 Bytes one by one from EEPROM...");\r\n    for (i = 0; i < 128; i++) {\r\n        Serial.print(EEPROM.read(addr + i),HEX);\r\n        if (((i % 0x10) == 0) && (i != 0))\r\n          Serial.println();\r\n        else\r\n          Serial.print('' '');\r\n    }\r\n\r\n    Serial.println();\r\n\r\n    Serial.println("Reading buffer from EEPROM...");\r\n    res = EEPROM.get(addr, &read_data, sizeof(read_data));\r\n    Serial.print("Read ");\r\n    Serial.print(res);\r\n    Serial.println(" Bytes");\r\n\r\n    // write data to a specific address\r\n    res = EEPROM.put(addr, &some_data, sizeof(some_data));\r\n    \r\n    delay(5000); // don''t write to much in the EEPROM not to kill it\r\n}{/literal}\r\n</code></pre>\r\n</span>\r\n\r\n<span class="function_description_note">\r\nUser parameters are also stored in the EEPROM. Design your layout not to override them!\r\n<br/><br/>\r\n</span>\r\n\r\n<span class="function_description_more">\r\nUser memory layout:\r\n<br/>\r\n<table>\r\n    <tr><th>Start address</th><th>End address</th><th>Size</th><th>Description</th></tr>\r\n    <tr><td>0x0000</td><td>0x1FFF</td><td>8 kB</td><td>User memory</td></tr>\r\n    <tr><td>0x2000</td><td>0x20FF</td><td>256 B</td><td>User configuration parameters</td></tr>\r\n    <tr><td>0x2100</td><td>0x3FFFF</td><td>248 kB</td><td>User memory</td></tr>\r\n</table>\r\n</span>\r\n', '2016-08-24 04:25:31', '2018-05-19 00:22:32', 1, 121, 1, 84),
(465, 6, '*', 'zunoSetBeamCountWU()', '', 'zunoSetBeamCountWU/', 'Reference/zunoSetBeamCountWU/', '<h1>zunoSetBeamCountWU()</h1>\r\n<span class="function_description">\r\nThis function tells when to wake up Z-Uno in FLiRS mode even if no packets were received.\r\n</span>\r\n\r\n<span class="function_description_more">\r\nFor <span class="function_ref" link="ZUNO_SETUP_SLEEPING_MODE">ZUNO_SLEEPING_MODE_FREQUENTLY_AWAKE</span> mode Z-Uno will wake up on packet recieved, after a wake up period defined using zunoSetBeamCountWU() or on INT1 going LOW or <span class="function_ref" link="zunoSetWUOptions">Key Scanner</span> detects press.\r\n</span>\r\n\r\n<span class="function_syntax">\r\n    zunoSetBeamCountWU(sleep_time_in_beams_periods)\r\n</span>\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">sleep_time_in_beams_periods (byte)</span>\r\n        <span class="function_parameters_param_description">Sleep time in beam periods. 0 (default) to disable periodical wakeup (Z-Uno will wake up only on an incoming packet and on external interrupts). Currently Z-Uno supports only 1 second beams, so this is in seconds.</span>\r\n    </span>\r\n</span>\r\n\r\nIf not set, Z-Uno will wake up\r\n\r\n<span class="function_example">\r\n<pre>\r\n<code class="c">\r\nvoid loop() { \r\n  zunoSetBeamCountWU(10); // wake up after 10 second if no packets received\r\n  zunoSendDeviceToSleep();\r\n}</code>\r\n</pre>\r\n</span>\r\n\r\n<span class="function_see_also">\r\n    <span class="function_ref" link="ZUNO_SETUP_SLEEPING_MODE">ZUNO_SLEEPING_MODE_FREQUENTLY_AWAKE</span>\r\n</span>', '2017-10-20 01:27:26', '2018-04-23 19:16:49', 1, 144, 1, 84),
(402, 6, '*', 'ZUNO_METER', '', 'ZUNO_METER/', 'Reference/ZUNO_METER/', '<h1>ZUNO_METER()</h1>\r\n\r\n<span class="function_description">\r\nThis macro is a generic macro to be used to setup meter channel for Z-Uno board using <span class="function_ref">ZUNO_SETUP_CHANNELS</span>. Instead we suggest to use one of the specific macro ZUNO_METER_* from the list below.\r\n</span>\r\n\r\n<span class="function_syntax">\r\n    ZUNO_METER(type, resettable, scale, size, precision, getter, resetter)\r\n</span>\r\n\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">type</span>\r\n        <span class="function_parameters_param_description">type of channel like ZUNO_METER_TYPE_ELECTRIC, ZUNO_METER_TYPE_GAS or ZUNO_METER_TYPE_WATER. Used to correctly display the meter in the Z-Wave controller. Full list is defined in <a href="https://github.com/Z-Wave-Me/Z-Uno-Core/blob/master/hardware/arduino/zuno/cores/zuno/ZUNO_Definitions.h">ZUNO_Definitions.h</a> and starts with ZUNO_METER_TYPE_</span>\r\n    </span>\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">resettable</span>\r\n        <span class="function_parameters_param_description">METER_RESET_ENABLE (value can be set to zero via Z-Wave) or METER_RESET_DISABLE (value can not be set to zero).</span>\r\n    </span>\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">scale</span>\r\n        <span class="function_parameters_param_description">specific scale used for meter type. See <a href="https://github.com/Z-Wave-Me/Z-Uno-Core/blob/master/hardware/arduino/zuno/cores/zuno/ZUNO_Definitions.h">ZUNO_Definitions.h</a> for the full list.</span>\r\n    </span>\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">size</span>\r\n        <span class="function_parameters_param_description">size: 1, 2 or 4 bytes.</span>\r\n    </span>\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">precision</span>\r\n        <span class="function_parameters_param_description">precision (number of decimals after dot).</span>\r\n    </span>\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">getter</span>\r\n        <span class="function_parameters_param_description">pointer to a user defined function, which is supposed to return current value for this channel. </span>\r\n    </span>\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">resetter</span>\r\n        <span class="function_parameters_param_description">pointer to a user defined function, which is called on reset command to zero value.</span>\r\n    </span>\r\n</span>\r\n\r\n<span class="function_description_note">\r\nFunctions getter should return current value using types BYTE (for size = 1), WORD (for size = 2) or DWORD (for size = 4) depending on size field defined in size parameter. In almost all most used macros the size is 4 and value type is DWORD.\r\n</span>\r\n\r\n<span class="function_syntax">BYTE getter(void)</span>\r\n\r\n<span class="function_description_note">\r\nValues returned by getter are <b>signed</b>. Values are interpreted according to the following transformation:\r\n<ul>\r\n    <li>signed value = value / 10<sup>precision</sup>, for value &lt; MAX_NUM/2</li>\r\n    <li>signed value = (value - MAX_NUM) / 10<sup>precision</sup>, for value &ge; MAX_NUM/2</li>\r\n</ul>\r\nWhere MAX_NUM = 2<sup>8*size</sup> and precision defined number of decimal digits after dot.\r\n</span>\r\n\r\n<span class="function_example">\r\nFor example if size 1 and precision 0, value 25 represents 25,<br/>\r\nfor size 1 and precision 0, value 164 represents -92 = 164 - 256,<br/>\r\nfor size 1 and precision 1, value 25 represents 2.5 = 25 / 10,<br/>\r\nfor size 1 and precision 1, value 164 represents -9.2 = (164 - 256) / 10,<br/>\r\nfor size 2 and precision 1, value 366 represents 36.6,<br/>\r\nfor size 2 and precision 1, value 65535 represents -0.1 = (65535 - 65536) / 10,<br/>\r\nfor size 2 and precision 2, value 65535 represents -0.01 = (65535 - 65536) / 100.\r\n</span>\r\n\r\n<span class="function_tip">\r\nChannel generated using this macro will have Z-Wave Device Class GENERIC_TYPE_METER / SPECIFIC_TYPE_ROUTING_METERL with Meter Command Class.\r\n</span>\r\n\r\n<span class="function_example">\r\n<pre>\r\n<code class="c">ZUNO_SETUP_CHANNELS(\r\n    ZUNO_METER(\r\n        ZUNO_METER_TYPE_WATER,\r\n        METER_RESET_ENABLE,\r\n        ZUNO_METER_WATER_SCALE_METERS3,\r\n        METER_SIZE_FOUR_BYTES,\r\n        METER_PRECISION_THREE_DECIMALS,\r\n        getterFunction,\r\n        resetterFunction\r\n    )\r\n);\r\n           \r\nvoid setup() {\r\n    ...\r\n}\r\n\r\nvoid loop() {\r\n    ...\r\n}\r\n\r\nDWORD getterFunction() {\r\n    return currentValue;\r\n}\r\n\r\nvoid resetterFunction() {\r\n    currentValue = 0;\r\n}\r\n</code>\r\n</pre>\r\n</span>\r\n\r\n<span class="function_description_more">\r\nPopular sensor types have pre-defined macro. Few are listed below. Full list is defined in <a href="https://github.com/Z-Wave-Me/Z-Uno-Core/blob/master/hardware/arduino/zuno/cores/zuno/ZUNO_Definitions.h">ZUNO_Definitions.h</a> file and starts with ZUNO_METER_\r\n</span>\r\n\r\n<span class="function_syntax">\r\n<pre><code class="c">ZUNO_METER_ELECTRIC_KWH(GETTER, RESETTER);\r\nZUNO_METER_GAS(GETTER, RESETTER);\r\nZUNO_METER_WATER(GETTER, RESETTER);\r\n</code></pre>\r\n</span>\r\n', '2016-12-16 00:23:30', '2018-02-14 23:57:12', 1, 84, 1, 84),
(170, 6, '*', 'ZUNO_SWITCH_MULTILEVEL()', '', 'ZUNO_SWITCH_MULTILEVEL/', 'Reference/ZUNO_SWITCH_MULTILEVEL/', '<h1>ZUNO_SWITCH_MULTILEVEL()</h1>\r\n\r\n<span class="function_description">\r\nThis macro is used to setup multilevel switch channel for Z-Uno board using <span class="function_ref">ZUNO_SETUP_CHANNELS</span>.\r\n</span>\r\n\r\n<span class="function_syntax">ZUNO_SWITCH_MULTILEVEL(getter, setter)</span>\r\n\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">getter</span>\r\n        <span class="function_parameters_param_description">pointer to a user defined function, which is supposed to return current value for this channel.</span>\r\n    </span>\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">setter</span>\r\n        <span class="function_parameters_param_description">pointer to a user defined function, which is called when new value is received for this channel. Setter function will accept one parameter with values from 0 (off) to 99 (maximum)</span>\r\n    </span>\r\n</span>\r\n\r\n<span class="function_description">\r\nFunctions getter should return 0-99, where 0 is Off and 99 is maximal brightness\r\n</span>\r\n<span class="function_syntax">BYTE getter(void)</span>\r\n\r\n<span class="function_description">\r\nFunctions setter accepts values 0-99 (0 is Off, 99 is maximal value) and 255 (usually means On on previous brightness level, this behavior can be different depending on user sketch)\r\n</span>\r\n<span class="function_syntax">void setter(BYTE value)</span>\r\n\r\n<span class="function_tip">\r\nChannel generated using this macro will have Z-Wave Device Class GENERIC_TYPE_SWITCH_MULTILEVEL / SPECIFIC_TYPE_POWER_SWITCH_MULTILEVEL with Switch Multilevel Command Class.\r\n</span>\r\n\r\n<span class="function_description_note">\r\nThis type is allowed only in ZUNO_SLEEPING_MODE_ALWAYS_AWAKE power mode (see <span class="function_ref">ZUNO_SETUP_SLEEPING_MODE</span>).\r\n</span>\r\n\r\n<span class="function_example">\r\n    <pre>\r\n        <code class="c">ZUNO_SETUP_CHANNELS(ZUNO_SWITCH_MULTILEVEL(getterFunction, setterFunction))\r\n           \r\nvoid setup() {\r\n    ...\r\n}\r\n\r\nvoid loop() {\r\n    ...\r\n}\r\n\r\nBYTE getterFunction() {\r\n    return currentValue;\r\n}\r\n\r\nvoid setterFunction(BYTE newValue) {\r\n    ...\r\n}\r\n        </code>\r\n    </pre>\r\n</span>', '2015-06-13 16:51:04', '2018-02-14 23:39:54', 1322, 80, 1, 84),
(467, 6, '*', 'zunoGetWakeReason()', '', 'zunoGetWakeReason/', 'Reference/zunoGetWakeReason/', '<h1>zunoGetWakeReason()</h1>\r\n\r\n<span class="function_description">\r\nReturns the reason of Z-Uno wakeup.\r\n</span>\r\n\r\n<span class="function_syntax">zunoGetWakeReason()</span>\r\n\r\n<span class="function_returns">\r\nbyte value from the list of ZUNO_WAKEUP_REASON_* enum (see <a href="https://github.com/Z-Wave-Me/Z-Uno-Core/blob/uCXX_Cores/hardware/arduino/zuno/cores/zuno/ZUNO_Definitions.h">ZUNO_Definitions.h</a>)\r\n</span>\r\n\r\n<span class="function_example">\r\n<pre>\r\n<code class="c">void setup() {\r\n  byte wakeUpReason = zunoGetWakeReason();\r\n  switch (wakeUpReason) {\r\n    case ZUNO_WAKEUP_REASON_POR:\r\n      // Power-On-Reset (low battery)\r\n      break;\r\n    case ZUNO_WAKEUP_REASON_HARDRESET:\r\n      // RST button pressed\r\n      break;\r\n    case ZUNO_WAKEUP_REASON_INT1:\r\n      // Wakeup on INT1 state change or Key Scanner\r\n      break;\r\n    case ZUNO_WAKEUP_REASON_WUT:\r\n      // Wake up by timer (for sleeping devices, defined by the controller)\r\n      break;\r\n    case ZUNO_WAKEUP_REASON_RADIO:\r\n      // FLiRS received a packet\r\n      break;\r\n    case ZUNO_WAKEUP_REASON_SOFTRESET:\r\n      // Rebooted by watchdog (for future use)\r\n      break;\r\n    case ZUNO_WAKEUP_REASON_USBSUSPEND:\r\n      // Rebooted by USB suspend event (for future use)\r\n      break;\r\n}</code></pre></span>  \r\n\r\n<span class="function_see_also">\r\n    <span class="function_ref">ZUNO_SETUP_SLEEPING_MODE</span>()\r\n    <br/>\r\n    <span class="function_ref">zunoSetBeamCountWU</span>()\r\n    <br/>\r\n	<span class="function_ref">zunoSetWUOptions</span>()\r\n</span>', '2017-10-20 01:55:57', '2017-10-20 01:55:57', 1, 146, 1, 84),
(466, 6, '*', 'zunoSetWUOptions()', '', 'zunoSetWUOptions/', 'Reference/zunoSetWUOptions/', '<h1>zunoSetWUOptions()</h1>\r\n\r\n<span class="function_description">\r\nThis call instructs Z-Uno to wake up on INT1 going LOW or HIGH or on Key Scanner button press detection.\r\n</span>\r\n\r\n<span class="function_description_more">\r\nThe built-in hardware keypad scanner is able to scan a key matrix of up to 7 rows x 16 columns. When the Keypad Scanner is activated, the 7 row inputs (pins 17-23) must either be connected to the hardware key matrix or kept open. The number of columns can be configured to the range 1-16. The actual pins being used as column outputs are 9 when the column count is set to one, 9 and 10 when the column count is set to two, 9, 10 and 11 when the column count is set to three, etc.\r\n</span>\r\n\r\n<span class="function_description_more">\r\nFull list of pins available as columns is the following (ordered): 9-16, 8-3, TX0, RX0\r\n</span>\r\n\r\n<span class="function_description_more">\r\nOnce the Keypad Scanner is enabled, it will scan each column for an amount of time (set it as output and change voltage). If voltage on rows (pins 17-23) will change correspondingly, the button is assumend as pressed.\r\nat a certain column detects a key press.\r\n</span>\r\n\r\n<span class="function_description_more">\r\nCheck <a href="/technical/pinout">Z-Uno pinout</a>\r\n</span>\r\n\r\n<span class="function_syntax">zunoSetWUOptions(reason)</span>\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">reason</span>\r\n        <span class="function_parameters_param_description">ZUNO_WUPFLAGS_INT1_HIGH or ZUNO_WUPFLAGS_INT1_LOW or ZUNO_WUPFLAGS_INT1_KEYSCAN</span>\r\n    </span>\r\n</span>\r\n<span class="function_returns">\r\nnone\r\n</span>\r\n\r\n<span class="function_example">\r\n<pre>\r\n<code class="c">#define LED_PIN 13\r\n\r\nZUNO_SETUP_SLEEPING_MODE(ZUNO_SLEEPING_MODE_SLEEPING);\r\n\r\nvoid setup() {\r\n  pinMode(LED_PIN, OUTPUT);      // set LED pin as output\r\n  zunoSetWUOptions(ZUNO_WUPFLAGS_INT1_KEYSCAN); // turn INT1 wakeup into Key Scanner mode\r\n                                 // can also be called in any other place before zunoSendDeviceToSleep()\r\n}\r\n\r\nvoid loop() {\r\n  digitalWrite(LED_PIN, HIGH);   // turn LED on\r\n  delay(1000);                   // wait for 1 second\r\n  digitalWrite(LED_PIN, LOW);    // turn LED off\r\n  delay(1000);                   // wait for 1 second\r\n\r\n  zunoSendDeviceToSleep();	     // go to sleep\r\n}</code></pre></span>  \r\n', '2017-10-20 01:38:50', '2017-10-20 01:38:50', 1, 145, 1, 84),
(367, 6, '*', 'zunoSetupKeyScannerWU()', '', 'zunoSetupKeyScannerWU/', 'Reference/zunoSetupKeyScannerWU/', '<h1>zunoSetupKeyScannerWU()</h1>\r\n\r\n<span class="function_description">\r\nThis function is deprecated and replaced by <span class="function_ref">zunoSetWUOptions</span>().\r\n</span>\r\n', '2016-08-24 09:56:49', '2017-10-20 01:33:32', 1, 100, 1, 84),
(372, 6, '*', 'zunoSendDeviceToSleep()', '', 'zunoSendDeviceToSleep/', 'Reference/zunoSendDeviceToSleep/', '<h1>zunoSendDeviceToSleep()</h1>\r\n<span class="function_description">\r\nThis function sends the device to sleep.\r\n</span>\r\n\r\n<span class="function_description_more">\r\nFor <span class="function_ref" link="ZUNO_SETUP_SLEEPING_MODE">ZUNO_SLEEPING_MODE_SLEEPING</span> mode Z-Uno will wake up after wakeup period (set up via <b>Wakeup</b> Command Class) or on INT1 going LOW or <span class="function_ref" link="zunoSetWUOptions">Key Scanner</span> detects press.\r\n</span>\r\n\r\n<span class="function_description_more">\r\nFor <span class="function_ref" link="ZUNO_SETUP_SLEEPING_MODE">ZUNO_SLEEPING_MODE_FREQUENTLY_AWAKE</span> mode Z-Uno will wake up on packet recieved, after a wake up period defined using <span class="function_ref">zunoSetBeamCountWU</span>() or on INT1 going LOW or <span class="function_ref" link="zunoSetWUOptions">Key Scanner</span> detects press.\r\n</span>\r\n\r\n<span class="function_example">\r\n<pre>\r\n<code class="c">// LED pin number\r\n// 13 pin - user LED of Z-Uno board\r\n#define LED_PIN 13\r\n\r\n// Last saved LED value\r\nbyte currentLEDValue;\r\n\r\nZUNO_SETUP_CHANNELS(ZUNO_SWITCH_BINARY(getter, setter));\r\n\r\n// next macro sets up the sleeping mode\r\n// device will wake up by user request and regulary listening for packets\r\nZUNO_SETUP_SLEEPING_MODE(ZUNO_SLEEPING_MODE_FREQUENTLY_AWAKE);\r\n\r\n// the setup routine runs once when you press reset:\r\nvoid setup() {\r\n  pinMode(LED_PIN, OUTPUT); // setup pin as output\r\n}\r\n\r\n// the loop routine runs over and over again forever:\r\nvoid loop() { \r\n  // this function sends the device into sleep\r\n  zunoSendDeviceToSleep();\r\n}\r\n\r\nvoid setter(byte value) {\r\n  // value is a variable, holding a "new value"\r\n  // which came from the controller or other Z-Wave device\r\n  if (value > 0) {                // if greater then zero\r\n    digitalWrite (LED_PIN, HIGH); //turn the LED on (HIGH is the voltage level)\r\n  } else {                        // if equals zero\r\n    digitalWrite(LED_PIN, LOW);   //turn the LED off by making the voltage LOW\r\n  } \r\n  // we''ll save our value for the situation, when the controller will ask us about it\r\n  currentLEDValue = value;\r\n}\r\n \r\nbyte getter() {\r\n   return currentLEDValue;\r\n}\r\n</code>\r\n</pre>\r\n</span>    ', '2016-09-18 21:46:18', '2017-10-20 01:28:24', 1, 90, 1, 84),
(180, 6, '*', 'analogRead()', '', 'analogRead/', 'Reference/analogRead/', '<h1>analogRead()</h1>\r\n<span class="function_description">\r\nReads the value from the specified analog pin. The Z-Uno board contains a 4 channel, 10-bit analog to digital converter.\r\nThis means that it will map input voltages between 0 and Vcc (about 3 V) into integer values between 0 and 1023.</span>\r\n</span>\r\n\r\n<span class="function_description_more">\r\nCheck <a href="/technical/pinout">Z-Uno pinout</a>\r\n</span>\r\n\r\n<span class="function_syntax">analogRead(pin)</span>\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">pin</span>\r\n        <span class="function_parameters_param_description">the number of the analog input pin to read from: A0, A1, A2, A3 or BATTERY</span>\r\n    </span>\r\n</span>\r\n\r\n<span class="function_returns">\r\nint (0 to 1023) (depends on ADC resolution check <span class="function_ref">analogReadResolution</span>() for more details)\r\n</span>\r\n\r\n<span class="function_description_note">\r\nIf the analog input pin is not connected to anything, the value returned by analogRead() will fluctuate based on a number of factors (e.g. the values of the other analog inputs, how close your hand is to the board, etc.).\r\n</span>\r\n\r\n<span class="function_example">\r\n    <pre>\r\n        <code class="c">void setup() {\r\n  Serial.begin();        //  setup serial\r\n}\r\n\r\nvoid loop() {\r\n  int val;               // variable to store the value read\r\n  val = analogRead(A3);  // read the input pin\r\n  Serial.println(val);   // debug output\r\n}\r\n</code></pre>\r\n</span>\r\n\r\n<span class="function_description_note">\r\nIf you need an absolute measured value in Volts and not relative to Vcc, use BATTERY to re-scale the result according to the absolute Vcc voltage.\r\n</span>\r\n\r\n<span class="function_description_note">\r\nIf BATTERY is used, the reported value is the position of 1.21V (internal reference voltage) between 0 and battery voltage (3V pin voltage). For 10-bits precision the battery voltage equals to <code>1.21 V * 1024 / value</code> or for 8-bits to <code>1.21 V * 256 / value = 30976 / value</code>. The accurace of the internal reference voltage is about 10%. You might need to calibrate this calculation for your Z-Uno.\r\n</span>\r\n\r\n\r\n<span class="function_see_also">\r\n    <span class="function_ref">analogReadResolution</span>()\r\n    <br/>\r\n    <span class="function_ref">analogReference</span>()\r\n</span>\r\n', '2015-07-06 16:47:47', '2017-10-20 01:15:59', 1322, 72, 1, 84),
(464, 6, '*', 'ZUNO_SETUP_BATTERY_HANDLER()', '', 'ZUNO_SETUP_BATTERY_HANDLER/', 'Reference/ZUNO_SETUP_BATTERY_HANDLER/', '<h1>ZUNO_SETUP_BATTERY_HANDLER()</h1>\r\n<span class="function_description">\r\nBy default Z-Uno automatically maps battery voltage from 2.8V&ndash;3.0V to 0%&ndash;100% measuring the voltage on the 3V pin. But sometimes Z-Uno us powered via step-up converters and measuring the voltage on 3V pin will not make any sense. In that case you can define your own handler for battery reports, measure a value on ADC pins or even read the value from another chip via UART/SPI/I2C. This getter function will be called each time Z-Uno needs to report battery value.\r\n</span>\r\n\r\n<span class="function_syntax">\r\n    ZUNO_SETUP_BATTERY_HANDLER(user_battery_level_handler)\r\n</span>\r\n\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">user_battery_level_handler</span>\r\n        <span class="function_parameters_param_description">name of the function returning % value as a BYTE\r\n        </span>\r\n    </span>\r\n</span>\r\n\r\n<span class="function_description_note">\r\nBattery is reported only if device is configured as sleeping (<span class="function_ref" link="ZUNO_SETUP_SLEEPING_MODE">ZUNO_SLEEPING_MODE_SLEEPING</span> or <span class="function_ref" link="ZUNO_SETUP_SLEEPING_MODE">ZUNO_SLEEPING_MODE_FREQUENTLY_AWAKE</span>).\r\n</span>\r\n\r\n<span class="function_example">\r\n<pre><code class="c">ZUNO_SETUP_BATTERY_HANDLER(my_battery_handler);\r\n…\r\nbyte my_battery_handler() { \r\n  byte percents = …\r\n  return percents; \r\n}</code></pre>\r\n</span>\r\n\r\n<span class="function_see_also">\r\n<span class="function_ref">ZUNO_SETUP_BATTERY_LEVELS</span>\r\n</span>', '2017-10-20 00:54:06', '2017-10-20 01:00:41', 1, 143, 1, 84),
(187, 6, '*', 'ZUNO_SETUP_SLEEPING_MODE()', '', 'ZUNO_SETUP_SLEEPING_MODE/', 'Reference/ZUNO_SETUP_SLEEPING_MODE/', '<h1>ZUNO_SETUP_SLEEPING_MODE()</h1>\r\n<span class="function_description">\r\nThis macro defines how Z-Uno will manage power mode. It is very important to define correct mode because the behavior of the device changes dramatically depending on it. At the start, we recommend you to debug and develop your program using ZUNO_SLEEPING_MODE_ALWAYS_AWAKE mode, because that’s the easiest one.\r\n<br/>\r\n<br/>\r\nIf not specified in the project, ZUNO_SETUP_SLEEPING_MODE(ZUNO_SLEEPING_MODE_ALWAYS_AWAKE) is assumed.\r\n</span>\r\n\r\n<span class="function_syntax">\r\n    ZUNO_SETUP_SLEEPING_MODE(mode)\r\n</span>\r\n\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">mode</span>\r\n        <span class="function_parameters_param_description">Mode to manage power\r\n        </span>\r\n    </span>\r\n</span>\r\n\r\n<span class="function_description_more">\r\nThere is only three possible values available:\r\n<ul>\r\n    <li>ZUNO_SLEEPING_MODE_ALWAYS_AWAKE &mdash; device is <b>always awake</b>, reachable and helps to form mesh network acting as router (default mode). Used for mains powered devices.</li>\r\n    <li>ZUNO_SLEEPING_MODE_SLEEPING &mdash; device <b>wakes up by user request (interrupt) or periodically</b>. Does not help to form mesh. Used for battery powered devices.</li>\r\n    <li>ZUNO_SLEEPING_MODE_FREQUENTLY_AWAKE &mdash; device <b>wakes up by user request (interrupt) or on packet received</b>. Always available but does not help to form mesh. Used for battery powered devices. In Z-Wave this type of devices is called <b>FLiRS</b></li>\r\n</ul>\r\n    <span class="function_description_more"><b>FLiRS</b> &mdash; Frequently Listening Routing Slaves &mdash; the device periodically quits the sleeping mode on a short period and checks, whether a message is sent to the device. If no packets are present for this device on air, the device goes back into the sleeping mode. Awakening interval is 1 second.\r\n    </span>\r\n</span>\r\n\r\n<span class="function_tip">\r\nIn <b>sleeping</b> mode periodical wakeup is configured via the Z-Wave controller using the Wake Up Command Class. The period is a factor of 4 minutes, minumum is 4 minutes. Interrupt can wake up the device at any time.\r\n</span>\r\n\r\n<span class="function_description_note">\r\nNote that in sleeping and FLiRS mode devices should be explicitely sent into sleeping state. This is done using <b><span class="function_ref">zunoSendDeviceToSleep</span>()</b> function. Once called, loop will not be called anymore and Z-Uno will finalize all jobs to go into sleep mode.\r\n</span>\r\n\r\n<span class="function_description_note">\r\nNote that in sleeping and FLiRS mode during power consumption (deep sleep) state Z-Uno memory is not maintained. Hence it is cleaned all the time. If you want to keep some variables across sleeps you have to use <b><span class="function_ref">NZRAM</span></b> memory (very fast and do not consume enery) or <b><span class="function_ref">EEPROM</span></b> (slow and takes energy to read and write, but survive even during power off - this is a so called non-volatile memory).\r\n</span>\r\n\r\n<span class="function_tip">\r\nIf device is in sleeping mode, the USB port is not available for uploading new sketch. Device should be woken up or turned into <a href="/getting-started/troubleshooting">rescue mode</a> before uploading new sketch.\r\n</span>\r\n\r\n<span class="function_description_note">\r\nAfter changing sleeping mode Z-Uno must be excluded and included back. Z-Uno will not adopt sleeping mode change without being excluded. (A <a href="/z-wave/configuration-parameters/">debug configuration parameter</a> can disable this restriction).\r\n</span>\r\n\r\n<span class="function_example">\r\n<pre><code class="c">ZUNO_SETUP_SLEEPING_MODE(ZUNO_SLEEPING_MODE_SLEEPING);\r\nZUNO_SETUP_SLEEPING_MODE(ZUNO_SLEEPING_MODE_ALWAYS_AWAKE);\r\nZUNO_SETUP_SLEEPING_MODE(ZUNO_SLEEPING_MODE_FREQUENTLY_AWAKE);\r\n</code></pre>\r\n</span>\r\n\r\n<table>\r\n    <tr>\r\n        <td rowspan="2">Mode</td>\r\n        <td rowspan="2">setup() called</td>\r\n        <td rowspan="2">loop() called</td>\r\n        <td colspan="3" align="center">Wakes up</td>\r\n        <td rowspan="2">Routing for other Z-Wave devices</td>\r\n        <td rowspan="2"></td>\r\n    </tr>\r\n    <tr>\r\n        <td>on interrupt</td>\r\n        <td>periodically</td>\r\n        <td>on command received</td>\r\n    </tr>\r\n    <tr>\r\n        <td>ZUNO_SLEEPING_MODE_ALWAYS_AWAKE</td>\r\n        <td>once after power on</td>\r\n        <td>eternally</td>\r\n        <td align="center">&mdash;</td>\r\n        <td align="center">&mdash;</td>\r\n        <td align="center">&mdash;</td>\r\n        <td align="center">Yes</td>\r\n        <td></td>\r\n    </tr>\r\n    <tr>\r\n        <td>ZUNO_SLEEPING_MODE_SLEEPING</td>\r\n        <td>on each wake up</td>\r\n        <td>until <span class="function_ref">zunoSendDeviceToSleep</span>() is called</td>\r\n        <td align="center">Yes</td>\r\n        <td align="center">Yes</td>\r\n        <td align="center">No</td>\r\n        <td align="center">No</td>\r\n        <td></td>\r\n    </tr>\r\n    <tr>\r\n        <td>ZUNO_SLEEPING_MODE_FREQUENTLY_AWAKE</td>\r\n        <td>on each wake up</td>\r\n        <td>until <span class="function_ref">zunoSendDeviceToSleep</span>() is called</td>\r\n        <td align="center">Yes</td>\r\n        <td align="center">No</td>\r\n        <td align="center">Yes</td>\r\n        <td align="center">No</td>\r\n        <td></td>\r\n    </tr>\r\n</table>\r\n\r\n<span class="function_see_also">\r\n    Get more information about <span class="function_ref">Z-Wave</span>.\r\n</span>\r\n', '2015-08-02 18:02:22', '2017-09-05 23:36:39', 1322, 87, 1, 84),
(455, 6, '*', 'zunoSendAssociationCommand()', '', 'zunoSendAssociationCommand/', 'Reference/zunoSendAssociationCommand/', '<h1>zunoSendAssociationCommand()</h1>\r\n<span class="function_description">\r\nThis function instructs Z-Uno to send a control sequence to an association group. This is a more generic function than <span class="function_ref">zunoSendToGroupSetValueCommand</span>(), <span class="function_ref">zunoSendToGroupDimmingCommand</span>(), <span class="function_ref">zunoSendToGroupScene</span>(), <span class="function_ref">zunoSendToGroupDoorlockControl</span>().\r\n</span>\r\n\r\n<span class="function_description_more">\r\nAssociation groups are defined via macro <span class="function_ref">ZUNO_SETUP_ASSOCIATIONS</span>() or via dynamic function <span class="function_ref">zunoAddAssociation</span>().\r\n</span>\r\n\r\n<span class="function_syntax">zunoSendAssociationCommand(CTRL_GROUP_n, group_type, value1, value2)</span>\r\n\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">CTRL_GROUP_n</span>\r\n        <span class="function_parameters_param_description">number of group: CTRL_GROUP_1, ... CTRL_GROUP_5\r\n        </span>\r\n    </span>\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">group_type</span>\r\n        <span class="function_parameters_param_description">Type of the command to send: ZUNO_ASSOC_BASIC_SET_NUMBER, ZUNO_ASSOC_BASIC_SET_AND_DIM_NUMBER, 	ZUNO_ASSOC_SCENE_ACTIVATION_NUMBER, ZUNO_ASSOC_DOORLOCK_CONTROL_NUMBER as defined in <a hre="https://github.com/Z-Wave-Me/Z-Uno-Core/blob/master/hardware/arduino/zuno/cores/zuno/ZUNO_Definitions.h">ZUNO_Definitions.h</a></span>\r\n    </span>\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">value1</span>\r\n        <span class="function_parameters_param_description">Dimming value, scene Id or direction</span>\r\n    </span>\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">value2</span>\r\n        <span class="function_parameters_param_description">start or stop for dimming (otherwise ignored)</span>\r\n    </span>\r\n</span>\r\n\r\n<span class="function_description_note">\r\nIt is recommended to use one of <span class="function_ref">zunoSendToGroupSetValueCommand</span>(), <span class="function_ref">zunoSendToGroupDimmingCommand</span>(), <span class="function_ref">zunoSendToGroupScene</span>(), <span class="function_ref">zunoSendToGroupDoorlockControl</span>() instead.\r\n</span>\r\n', '2017-08-28 01:45:11', '2017-08-28 21:53:52', 1, 137, 1, 84),
(451, 6, '*', 'ZUNO_START_CONFIG', '', 'ZUNO_START_CONFIG/', 'Reference/ZUNO_START_CONFIG/', '<h1>ZUNO_START_CONFIG()</h1>\r\n\r\n<span class="function_description">\r\nThis function instructs Z-Uno to start channels and association configuration. Use it to configure your Z-Uno right from the user code.\r\n</span>\r\n\r\n<span class="function_description_note">\r\nAfter changing the number or types of channels or association groups Z-Uno must be excluded and included back. Z-Uno will not adopt any channel type change without being excluded. (A <a href="/z-wave/configuration-parameters/">debug configuration parameter</a> can disable this restriction).\r\n</span>\r\n\r\n<span class="function_syntax">ZUNO_START_CONFIG()</span>\r\n\r\n<span class="function_see_also">\r\nZ-Uno dynamic configuration uses the following functions:\r\n<ul>\r\n    <li>ZUNO_START_CONFIG(),</li>\r\n    <li><span class="function_ref">ZUNO_ADD_CHANNEL</span>(),</li>\r\n    <li><span class="function_ref">ZUNO_ADD_ASSOCIATION</span>(),</li>\r\n    <li><span class="function_ref">ZUNO_COMMIT_CONFIG</span>(),</li>\r\n    <li><span class="function_ref">ZUNO_GET_CONFIG_STATE</span>(),</li>\r\n</ul>\r\n</span>\r\n\r\n<span class="function_see_also">\r\nGood examples of usage of dynamic configuration can be found in <a href="/examples/z-uno-as-a-modem/">Modem example</a> or <a href="/examples/multiple-dynamic-1-wire-ds18b20-temperature-sensors">multiple DS18B20 temperature sensors</a>.\r\n</span>\r\n\r\n<span class="example_code">\r\nBelow is the Radio Blink sketch from Z-Uno paper manual made in static style\r\n<pre>\r\n<code class="c">{literal}\r\nbyte dimmerValue=0xFF;\r\n\r\nZUNO_SETUP_CHANNELS(ZUNO_SWITCH_MULTILEVEL(getSwitchMultilevelValue, setSwitchMultilevelValue));\r\n\r\nvoid setup() {\r\n  pinMode(LED_BUILTIN, OUTPUT);\r\n  dimmerValue = 100;\r\n}\r\n\r\nvoid loop() {\r\n  digitalWrite(LED_BUILTIN, HIGH);\r\n  delay(dimmerValue*10);\r\n  digitalWrite(LED_BUILTIN, LOW);\r\n  delay(dimmerValue*10);\r\n}\r\n\r\nvoid setSwitchMultilevelValue(byte newValue) {\r\n  dimmerValue = newValue;\r\n}\r\n\r\nbyte getSwitchMultilevelValue(void) {\r\n  return dimmerValue;\r\n}{/literal}\r\n</code></pre>\r\n</span>\r\n\r\n<span class="example_code">\r\nBelow is the Radio Blink sketch from Z-Uno paper manual made in dynamic style\r\n<pre>\r\n<code class="c">{literal}\r\nbyte dimmerValue=0xFF;\r\n\r\nvoid setup() {\r\n  ZUNO_START_CONFIG();\r\n  ZUNO_ADD_CHANNEL(ZUNO_SWITCH_MULTILEVEL_CHANNEL_NUMBER, 0, 0);\r\n  ZUNO_COMMIT_CONFIG();\r\n\r\n  pinMode(LED_BUILTIN, OUTPUT);\r\n  dimmerValue = 100;\r\n}\r\n\r\nvoid loop() {\r\n  digitalWrite(LED_BUILTIN, HIGH);\r\n  delay(dimmerValue*10);\r\n  digitalWrite(LED_BUILTIN, LOW);\r\n  delay(dimmerValue*10);\r\n}\r\n\r\nvoid setSwitchMultilevelValue(byte newValue) {\r\n  dimmerValue = newValue;\r\n}\r\n\r\nbyte getSwitchMultilevelValue(void) {\r\n  return dimmerValue;\r\n}\r\n\r\nvoid zunoCallback(void) {\r\n    switch(callback_data->type) {\r\n       case  ZUNO_CHANNEL1_GETTER:\r\n          callback_data->param.bParam = getSwitchMultilevelValue();\r\n          break;\r\n       case  ZUNO_CHANNEL1_SETTER:\r\n          setSwitchMultilevelValue(callback_data->param.bParam);\r\n          break;\r\n\r\n        default:\r\n          break;\r\n    }\r\n}{/literal}\r\n</code></pre>\r\n</span>\r\n\r\n\r\n', '2017-08-28 01:10:34', '2017-08-28 21:43:03', 1, 135, 1, 84),
(459, 6, '*', 'ZUNO_ADD_CHANNEL()', '', 'ZUNO_ADD_CHANNEL/', 'Reference/ZUNO_ADD_CHANNEL/', '<h1>ZUNO_ADD_CHANNEL()</h1>\r\n<span class="function_description">\r\nThis function instructs Z-Uno to add one more channel during dynamic configuration.\r\n</span>\r\n\r\n<span class="function_description_more">\r\nThis function can be called many times to add more channels. Channels are numbered from 1 to 10. Make sure to execute <span class="function_ref">ZUNO_START_CONFIG</span> before the first call of ZUNO_ADD_CHANNEL().\r\n</span>\r\n\r\n<span class="function_description_note">\r\nZ-Uno supports up to 10 channels\r\n</span>\r\n\r\n<span class="function_syntax">ZUNO_ADD_CHANNEL(type, sensor_type, size_precision_parameters)</span>\r\n\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">type</span>\r\n        <span class="function_parameters_param_description">channel type (defined in <a href="https://github.com/Z-Wave-Me/Z-Uno-Core/blob/master/hardware/arduino/zuno/cores/zuno/ZUNO_Definitions.h">ZUNO_Definitions.h</a>):\r\n            <ol>\r\n                <li>ZUNO_SWITCH_BINARY_CHANNEL_NUMBER</li>\r\n                <li>ZUNO_SWITCH_MULTILEVEL_CHANNEL_NUMBER</li>\r\n                <li>ZUNO_SENSOR_BINARY_CHANNEL_NUMBER</li>\r\n                <li>ZUNO_SENSOR_MULTILEVEL_CHANNEL_NUMBER</li>\r\n                <li>ZUNO_METER_CHANNEL_NUMBER</li>\r\n                <li>ZUNO_DOORLOCK_CHANNEL_NUMBER (not supported yet, for future use)</li>\r\n                <li>ZUNO_FLOWSTOP_CHANNEL_NUMBER</li>\r\n                <li>ZUNO_SIREN_CHANNEL_NUMBER</li>\r\n                <li>ZUNO_BLINDS_CHANNEL_NUMBER</li>\r\n            </ol>\r\n        </span>\r\n    </span>\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">sensor_type</span>\r\n        <span class="function_parameters_param_description">Sensor type. Applicable only for ZUNO_SENSOR_BINARY_CHANNEL_NUMBER, ZUNO_SENSOR_MULTILEVEL_CHANNEL_NUMBER and ZUNO_METER_CHANNEL_NUMBER.</span>\r\n    </span>\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">size_precision_parameters</span>\r\n        <span class="function_parameters_param_description">One byte defining value size and value precision. Applicable only for ZUNO_SENSOR_BINARY_CHANNEL_NUMBER, ZUNO_SENSOR_MULTILEVEL_CHANNEL_NUMBER and ZUNO_METER_CHANNEL_NUMBER. Check <a href="https://github.com/Z-Wave-Me/Z-Uno-Core/blob/master/hardware/arduino/zuno/cores/zuno/ZUNO_Definitions.h">ZUNO_Definitions.h</a> for more details.</span>\r\n    </span>\r\n</span>\r\n\r\n<span class="function_see_also">\r\nExamples can be found in the description of <span class="function_ref">ZUNO_START_CONFIG</span>.\r\n</span>\r\n', '2017-08-28 21:34:19', '2017-08-28 21:35:52', 1, 140, 1, 84),
(460, 6, '*', 'ZUNO_ADD_ASSOCIATION()', '', 'ZUNO_ADD_ASSOCIATION/', 'Reference/ZUNO_ADD_ASSOCIATION/', '<h1>ZUNO_ADD_ASSOCIATION()</h1>\r\n<span class="function_description">\r\nThis function instructs Z-Uno to add one more association group during dynamic configuration.\r\n</span>\r\n\r\n<span class="function_description_more">\r\nThis function can be called many times to add more groups. Association groups are numbered from 2 to 6 (1 is Life Line, see <span class="function_ref">ZUNO_SETUP_ASSOCIATIONS</span>() for more info).\r\n</span>\r\n\r\n<span class="function_description_note">\r\nZ-Uno supports up to 5 association groups\r\n</span>\r\n\r\n<span class="function_syntax">ZUNO_ADD_ASSOCIATION(type)</span>\r\n\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">type</span>\r\n        <span class="function_parameters_param_description">association group type:\r\n            <ol>\r\n                <li>ZUNO_ASSOC_BASIC_SET_NUMBER</li>\r\n                <li>ZUNO_ASSOC_BASIC_SET_AND_DIM_NUMBER</li>\r\n                <li>ZUNO_ASSOC_SCENE_ACTIVATION_NUMBER</li>\r\n                <li>ZUNO_ASSOC_DOORLOCK_CONTROL_NUMBER</li>\r\n            </ol>\r\n        </span>\r\n    </span>\r\n</span>\r\n\r\n<span class="function_see_also">\r\nExamples can be found in the description of <span class="function_ref">ZUNO_START_CONFIG</span>.\r\n</span>\r\n', '2017-08-28 21:35:36', '2017-08-28 21:35:36', 1, 141, 1, 84),
(457, 6, '*', 'ZUNO_GET_CONFIG_STATE()', '', 'ZUNO_GET_CONFIG_STATE/', 'Reference/ZUNO_GET_CONFIG_STATE/', '<h1>ZUNO_GET_CONFIG_STATE()</h1>\r\n<span class="function_description">\r\nThis function returns the dynamic configuration state of Z-Uno.\r\n</span>\r\n\r\n<span class="function_syntax">ZUNO_GET_CONFIG_STATE()</span>\r\n\r\n<span class="function_return">\r\nReturns byte:\r\n<ul>\r\n    <li>ZUNO_CONFIG_DEFAULT &mdash; Default Z-Uno configuration without any sketch. No channels, only LifeLine association group</li>\r\n    <li>ZUNO_CONFIG_PREVIOUS &mdash; New configuration not applied since Z-Uno is included and <span class="function_ref" link="ZUNO_SETUP_DEBUG_MODE">Debug parameter</span> is not enabled</li>\r\n    <li>ZUNO_CONFIG_CURRENT &mdash; Was applied successfuly</li>\r\n</ul>\r\n</span>\r\n\r\n<span class="function_see_also">\r\nExamples can be found in the description of <span class="function_ref">ZUNO_START_CONFIG</span>().\r\n</span>\r\n', '2017-08-28 19:26:35', '2017-08-28 20:31:07', 1, 139, 1, 84),
(456, 6, '*', 'ZUNO_COMMIT_CONFIG()', '', 'ZUNO_COMMIT_CONFIG/', 'Reference/ZUNO_COMMIT_CONFIG/', '<h1>ZUNO_COMMIT_CONFIG()</h1>\r\n<span class="function_description">\r\nThis function instructs Z-Uno to finalize and apply channels and association groups dynamic configuration started with <span class="function_ref">ZUNO_START_CONFIG</span>.\r\n</span>\r\n\r\n<span class="function_syntax">ZUNO_COMMIT_CONFIG()</span>\r\n\r\n<span class="function_see_also">\r\nExamples can be found in the description of <span class="function_ref">ZUNO_START_CONFIG</span>().\r\n</span>\r\n', '2017-08-28 19:25:39', '2017-08-28 19:25:39', 1, 138, 1, 84),
(450, 6, '*', 'ZUNO_DOORLOCK', '', 'ZUNO_DOORLOCK/', 'Reference/ZUNO_DOORLOCK/', '<h1>ZUNO_DOORLOCK()</h1>\r\n\r\n<span class="function_description">\r\nThis macro is used to setup binary switch channel of type door lock for Z-Uno board using <span class="function_ref">ZUNO_SETUP_CHANNELS</span>.\r\n</span>\r\n\r\n<span class="function_description_note">\r\nDoor lock requires security. It will work only if included securely in your Z-Wave controller (see <span class="function_ref">Security</span> section).\r\n</span>\r\n\r\n<span class="function_syntax">ZUNO_DOORLOCK(getter, setter)</span>\r\n\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">getter</span>\r\n        <span class="function_parameters_param_description">pointer to a user defined function, which is supposed to return current value for this channel.</span>\r\n    </span>\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">setter</span>\r\n        <span class="function_parameters_param_description">pointer to a user defined function, which is called when new value is received for this channel. </span>\r\n    </span>\r\n</span>\r\n\r\n<span class="function_description">\r\nFunctions getter should return 0 for Closed and any non-zero value for Open\r\n</span>\r\n<span class="function_syntax">BYTE getter(void)</span>\r\n\r\n<span class="function_description">\r\nFunctions setter accepts next values:\r\n<ul>\r\n    <li>0 for closed</li>\r\n    <li>1-99 for open</li>\r\n    <li>>=100 - reserved value</li>\r\n</ul>\r\n</span>\r\n<span class="function_syntax">void setter(BYTE value)</span>\r\n\r\n<span class="function_tip">\r\nChannel generated using this macro will have Z-Wave Device Class GENERIC_TYPE_ENTRY_CONTROL / SPECIFIC_TYPE_DOOR_LOCK with Switch Binary Command Class.\r\n</span>\r\n\r\n<span class="function_tip">\r\nYou can make a battery power door lock using FLiRS power mode (see <span class="function_ref">ZUNO_SETUP_SLEEPING_MODE</span>).\r\n</span>\r\n\r\n<span class="function_description_note">\r\nThis type is allowed only in ZUNO_SLEEPING_MODE_FREQUENTLY_AWAKE and ZUNO_SLEEPING_MODE_ALWAYS_AWAKE power mode (see <span class="function_ref">ZUNO_SETUP_SLEEPING_MODE</span>).\r\n</span>\r\n\r\n<span class="function_example">\r\n    <pre>\r\n        <code class="c">ZUNO_SETUP_CHANNELS(ZUNO_DOORLOCK(getterFunction, setterFunction));\r\n           \r\nvoid setup() {\r\n    ...\r\n}\r\n\r\nvoid loop() {\r\n    ...\r\n}\r\n\r\nBYTE getterFunction() {\r\n    return currentValue;\r\n}\r\n\r\nvoid setterFunction(BYTE newValue) {\r\n    ...\r\n}\r\n        </code>\r\n    </pre>\r\n</span>', '2017-08-28 00:50:33', '2017-08-28 00:52:14', 1, 134, 1, 84),
(449, 6, '*', 'ZUNO_FLOWSTOP', '', 'ZUNO_FLOWSTOP/', 'Reference/ZUNO_FLOWSTOP/', '<h1>ZUNO_FLOWSTOP()</h1>\r\n\r\n<span class="function_description">\r\nThis macro is used to setup binary switch channel of type flow stop for Z-Uno board using <span class="function_ref">ZUNO_SETUP_CHANNELS</span>.\r\n</span>\r\n\r\n<span class="function_syntax">ZUNO_FLOWSTOP(getter, setter)</span>\r\n\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">getter</span>\r\n        <span class="function_parameters_param_description">pointer to a user defined function, which is supposed to return current value for this channel.</span>\r\n    </span>\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">setter</span>\r\n        <span class="function_parameters_param_description">pointer to a user defined function, which is called when new value is received for this channel. </span>\r\n    </span>\r\n</span>\r\n\r\n<span class="function_description">\r\nFunctions getter should return 0 for Closed and any non-zero value for Open\r\n</span>\r\n<span class="function_syntax">BYTE getter(void)</span>\r\n\r\n<span class="function_description">\r\nFunctions setter accepts next values:\r\n<ul>\r\n    <li>0 for closed</li>\r\n    <li>1-99 for open</li>\r\n    <li>>=100 - reserved value</li>\r\n</ul>\r\n</span>\r\n<span class="function_syntax">void setter(BYTE value)</span>\r\n\r\n<span class="function_tip">\r\nChannel generated using this macro will have Z-Wave Device Class GENERIC_TYPE_SWITCH_BINARY / SPECIFIC_TYPE_VALVE_OPEN_CLOSE with Switch Binary Command Class.\r\n</span>\r\n\r\n<span class="function_tip">\r\nYou can make a battery power flow stop using FLiRS power mode (see <span class="function_ref">ZUNO_SETUP_SLEEPING_MODE</span>).\r\n</span>\r\n\r\n<span class="function_description_note">\r\nThis type is allowed only in ZUNO_SLEEPING_MODE_FREQUENTLY_AWAKE and ZUNO_SLEEPING_MODE_ALWAYS_AWAKE power mode (see <span class="function_ref">ZUNO_SETUP_SLEEPING_MODE</span>).\r\n</span>\r\n\r\n<span class="function_example">\r\n    <pre>\r\n        <code class="c">ZUNO_SETUP_CHANNELS(ZUNO_FLOWSTOP(getterFunction, setterFunction));\r\n           \r\nvoid setup() {\r\n    ...\r\n}\r\n\r\nvoid loop() {\r\n    ...\r\n}\r\n\r\nBYTE getterFunction() {\r\n    return currentValue;\r\n}\r\n\r\nvoid setterFunction(BYTE newValue) {\r\n    ...\r\n}\r\n        </code>\r\n    </pre>\r\n</span>', '2017-08-28 00:48:43', '2017-08-28 00:48:43', 1, 133, 1, 84);
INSERT INTO `site_page` (`id`, `domain_id`, `route`, `name`, `title`, `url`, `full_url`, `content`, `create_datetime`, `update_datetime`, `create_contact_id`, `sort`, `status`, `parent_id`) VALUES
(448, 6, '*', 'ZUNO_SIREN', '', 'ZUNO_SIREN/', 'Reference/ZUNO_SIREN/', '<h1>ZUNO_SIREN()</h1>\r\n\r\n<span class="function_description">\r\nThis macro is used to setup binary switch channel of type siren for Z-Uno board using <span class="function_ref">ZUNO_SETUP_CHANNELS</span>.\r\n</span>\r\n\r\n<span class="function_syntax">ZUNO_SIREN(getter, setter)</span>\r\n\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">getter</span>\r\n        <span class="function_parameters_param_description">pointer to a user defined function, which is supposed to return current value for this channel.</span>\r\n    </span>\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">setter</span>\r\n        <span class="function_parameters_param_description">pointer to a user defined function, which is called when new value is received for this channel. </span>\r\n    </span>\r\n</span>\r\n\r\n<span class="function_description">\r\nFunctions getter should return 0 for Off and any non-zero value for On\r\n</span>\r\n<span class="function_syntax">BYTE getter(void)</span>\r\n\r\n<span class="function_description">\r\nFunctions setter accepts next values:\r\n<ul>\r\n    <li>0 for off</li>\r\n    <li>1-99 for on</li>\r\n    <li>>=100 - reserved value</li>\r\n</ul>\r\n</span>\r\n<span class="function_syntax">void setter(BYTE value)</span>\r\n\r\n\r\n<span class="function_tip">\r\nChannel generated using this macro will have Z-Wave Device Class GENERIC_TYPE_SWITCH_BINARY / SPECIFIC_TYPE_SIREN with Switch Binary Command Class.\r\n</span>\r\n\r\n<span class="function_tip">\r\nYou can make a battery power siren using FLiRS power mode (see <span class="function_ref">ZUNO_SETUP_SLEEPING_MODE</span>).\r\n</span>\r\n\r\n<span class="function_description_note">\r\nThis type is allowed only in ZUNO_SLEEPING_MODE_FREQUENTLY_AWAKE and ZUNO_SLEEPING_MODE_ALWAYS_AWAKE power mode (see <span class="function_ref">ZUNO_SETUP_SLEEPING_MODE</span>).\r\n</span>\r\n\r\n<span class="function_example">\r\n    <pre>\r\n        <code class="c">ZUNO_SETUP_CHANNELS(ZUNO_SIREN(getterFunction, setterFunction));\r\n           \r\nvoid setup() {\r\n    ...\r\n}\r\n\r\nvoid loop() {\r\n    ...\r\n}\r\n\r\nBYTE getterFunction() {\r\n    return currentValue;\r\n}\r\n\r\nvoid setterFunction(BYTE newValue) {\r\n    ...\r\n}\r\n        </code>\r\n    </pre>\r\n</span>', '2017-08-28 00:47:00', '2017-08-28 00:47:00', 1, 132, 1, 84),
(447, 6, '*', 'ZUNO_BLINDS', '', 'ZUNO_BLINDS/', 'Reference/ZUNO_BLINDS/', '<h1>ZUNO_BLINDS()</h1>\r\n\r\n<span class="function_description">\r\nThis macro is used to setup multilevel switch channel with type blinds for Z-Uno board using <span class="function_ref">ZUNO_SETUP_CHANNELS</span>.\r\n</span>\r\n\r\n<span class="function_syntax">ZUNO_BLINDS(getter, setter)</span>\r\n\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">getter</span>\r\n        <span class="function_parameters_param_description">pointer to a user defined function, which is supposed to return current value for this channel.</span>\r\n    </span>\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">setter</span>\r\n        <span class="function_parameters_param_description">pointer to a user defined function, which is called when new value is received for this channel. Setter function will accept one parameter with values from 0 (closed) to 99 (open)</span>\r\n    </span>\r\n</span>\r\n\r\n<span class="function_description">\r\nFunctions getter should return 0-99, where 0 is Closed and 99 is Open\r\n</span>\r\n<span class="function_syntax">BYTE getter(void)</span>\r\n\r\n<span class="function_description">\r\nFunctions setter accepts values 0-99 (0 is Closed, 99 is Open) and 255 (usually means Open to the previous level, this behavior can be different depending on user sketch)\r\n</span>\r\n<span class="function_syntax">void setter(BYTE value)</span>\r\n\r\n<span class="function_tip">\r\nChannel generated using this macro will have Z-Wave Device Class GENERIC_TYPE_SWITCH_MULTILEVEL / SPECIFIC_TYPE_MOTOR_MULTIPOSITION with Switch Multilevel Command Class.\r\n</span>\r\n\r\n<span class="function_description_note">\r\nThis type is allowed only in ZUNO_SLEEPING_MODE_ALWAYS_AWAKE power mode (see <span class="function_ref">ZUNO_SETUP_SLEEPING_MODE</span>).\r\n</span>\r\n\r\n<span class="function_example">\r\n    <pre>\r\n        <code class="c">ZUNO_SETUP_CHANNELS(ZUNO_BLINDS(getterFunction, setterFunction))\r\n           \r\nvoid setup() {\r\n    ...\r\n}\r\n\r\nvoid loop() {\r\n    ...\r\n}\r\n\r\nBYTE getterFunction() {\r\n    return currentValue;\r\n}\r\n\r\nvoid setterFunction(BYTE newValue) {\r\n    ...\r\n}\r\n        </code>\r\n    </pre>\r\n</span>', '2017-08-28 00:40:48', '2017-08-28 00:40:48', 1, 131, 1, 84),
(428, 6, '*', '1 millisecond Timer', '', '1msTimer/', 'Reference/1msTimer/', '<h1>1 millisecond Timer</h1>\r\n<span class="function_description">\r\n1 millisecond Timer is similiar to <span class="function_ref">GPT</span> but ticks only every 1 millisecond. It does not have any restriction or conflicts with PWM pins. It allows to measure relatively big delays to control time critical processes as well as contolling servo motors.\r\n</span>\r\n\r\n<span class="function_description_more">\r\nTo set up a user handler function use ZUNO_SETUP_ISR_1MSTIMER macro to as describted <span class="function_ref" link="Interrupts">here</span>.\r\n</span>\r\n\r\n<span class="function_example">\r\n<pre>\r\n<code class="c">ZUNO_SETUP_ISR_1MSTIMER(m1ms_handler);\r\n\r\nunsigned long count_1ms = 0;\r\n\r\nvoid m1ms_handler() {\r\n    count_1ms++;\r\n}\r\n\r\nvoid setup() {\r\n    Serial.begin(115200);\r\n}\r\n\r\nvoid loop() {\r\n    Serial.println(count_1ms);\r\n    delay(1000);\r\n}\r\n</code>\r\n</pre>\r\n</span>', '2017-02-27 23:58:33', '2017-08-20 12:47:40', 1, 130, 1, 84),
(207, 6, '*', 'Frequency', '', 'Frequency/', 'Reference/Frequency/', '<h1>Frequency</h1>\r\n<span class="function_description">\r\n    Each region has its own Z-Wave frequency. In Arduino IDE you can choose the frequency for your region in the menu. Note that radiofrequency of your Z-Uno allows to use nearby frequencies. There are free types of Z-Uno: 868 MHz, 908/916 MHz and 928 MHz. All frequencies fits in one of these three types. \r\n</span>\r\n<span class="function_description_more">\r\nCurrently only those frequencies are supported:\r\n<ul>\r\n<li>Europe</li>\r\n<li>Russia</li>\r\n<li>China</li>\r\n<li>India</li>\r\n</ul>\r\n<ul>\r\n<li>USA</li>\r\n<li>Israel</li>\r\n</ul>\r\n<ul>\r\n<li>Australia and New Zealand</li>\r\n<li>Brazil</li>\r\n<li>Hong Kong</li>\r\n</ul>\r\n</span>\r\n\r\n<span class="function_example">\r\n    <img src="http://rus.z-wave.me/drive/?file=80839ee8a26081122258ea1d3e414298ab78">\r\n</span>', '2015-08-10 14:09:14', '2017-07-13 23:29:16', 1322, 96, 1, 84),
(423, 6, '*', 'zunoExtIntMode()', '', 'zunoExtIntMode/', 'Reference/zunoExtIntMode/', '<h1>zunoExtIntMode()</h1>\r\n<span class="function_description">\r\nExternal Interrupts pins are INT0 (pin 17), INT1 (pin 18) and ZEROX (pin 3). Z-Uno can execute a user defined code on an action on those pins. zunoExtIntMode() function allows to configure interrupt trigger event.\r\n</span>\r\n\r\n<span class="function_description_more">\r\nInterrupts are may faster than polling and uses hardware features to operate.\r\n</span>\r\n\r\n<span class="function_description_more">\r\nInterrupt handler functions should be defined accordingly. See <span class="function_ref" link="Interrupts">interrupts description</span> for more information.\r\n</span>\r\n\r\n<span class="function_description_note">\r\nSee restrictions on the code in user handlers in <span class="function_ref" link="Interrupts">interrupts description</span>.\r\n</span>\r\n\r\n<span class="function_syntax">zunoExtIntMode(int_num, mode)</span>\r\n\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">int_num</span>\r\n        <span class="function_parameters_param_description">the name of the interrupt:\r\n            <ul>\r\n                <li>ZUNO_EXT_INT0 &mdash; INT0 pin</li>\r\n                <li>ZUNO_EXT_INT1 &mdash; INT1 pin</li>\r\n                <li>ZUNO_EXT_ZEROX &mdash; ZEROX pin</li>\r\n            </ul>\r\n        </span>\r\n    </span>\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">mode</span>\r\n        <span class="function_parameters_param_description">trigger event:\r\n            <ul>\r\n                <li>CHANGE &mdash; value change</li>\r\n                <li>FALLING &mdash; high to low falling</li>\r\n                <li>RISING &mdash; low to high rising</li>\r\n            </ul>\r\n        </span>\r\n    </span>\r\n</span>\r\n\r\n<span class="function_example">\r\n<pre>\r\n<code class="c">ZUNO_SETUP_ISR_INT0(int0_handler);\r\n\r\nunsigned long count_int0 = 0;\r\n\r\nvoid int0_handler() {\r\n    count_int0++;\r\n}\r\n\r\nvoid setup() {\r\n    zunoExtIntMode(ZUNO_EXT_INT0, FALLING);\r\n\r\n    Serial.begin(115200);\r\n}\r\n\r\nvoid loop() {\r\n    Serial.println(count_int0);\r\n    delay(1000);\r\n}\r\n</code>\r\n</pre>\r\n</span>\r\n\r\n<span class="function_description_note">\r\nZEROX pin takes about 20 μs to trigger, while INT0/INT1 take about 40 μs.\r\n</span>\r\n', '2017-02-27 23:20:32', '2017-02-28 00:28:05', 1, 128, 1, 84),
(427, 6, '*', 'General Purpose Timer', '', 'GPT/', 'Reference/GPT/', '<h1>General Purpose Timer</h1>\r\n<span class="function_description">\r\nGeneral Purpose Timer (GPT) allows to measure precisely time and execute actions right after timer reaches zero. This allows a very accurate control over time critical processes as well as contolling servo motors.\r\n</span>\r\n\r\n<span class="function_description_more">\r\nTo set up a user handler function to be called by GPT define it as described <span class="function_ref" link="Interrupts">here</span> using ZUNO_SETUP_ISR_GPTIMER macro.\r\n</span>\r\n\r\n<span class="function_description_note">\r\n<span class="function_ref" link="analogWrite">PWM/analogWrite()</span> can not be used when GPT is enabled!\r\n</span>\r\n\r\n<span class="function_description_more">GPT is configured using the following functions:\r\n<ul>\r\n    <li><span class="function_ref" link="GPT/zunoGPTInit">zunoGPTInit</span>()</li>\r\n    <li><span class="function_ref" link="GPT/zunoGPTEnable">zunoGPTEnable</span>()</li>\r\n    <li><span class="function_ref" link="GPT/zunoGPTSet">zunoGPTSet</span>()</li>\r\n</ul>\r\n</span>\r\n\r\n<span class="function_example">\r\n<pre>\r\n<code class="c">ZUNO_SETUP_ISR_GPTIMER(gpt_handler);\r\n\r\nunsigned long count_gpt = 0;\r\n\r\nvoid gpt_handler() {\r\n    count_gpt++;\r\n}\r\n\r\nvoid setup() {\r\n    zunoGPTInit(ZUNO_GPT_SCALE1024|ZUNO_GPT_CYCLIC);	\r\n    zunoGPTSet(65000);\r\n    zunoGPTEnable(1); \r\n    \r\n    Serial.begin(115200);\r\n}\r\n\r\nvoid loop() {\r\n    Serial.println(count_gpt);\r\n    delay(1000);\r\n}\r\n</code>\r\n</pre>\r\n</span>', '2017-02-27 23:49:39', '2017-02-28 00:27:33', 1, 129, 1, 84),
(426, 6, '*', 'zunoGPTSet()', '', 'zunoGPTSet/', 'Reference/GPT/zunoGPTSet/', '<h1>zunoGPTSet()</h1>\r\n<span class="function_description">\r\nSet <span class="function_ref">GPT</span> timeout in ticks. Tick is defined using <span class="function_ref" link="GPT/zunoGPTInit">zunoGPTInit</span>() and can be 1 / 4 MHz = 0.25 μs or 1 / 31.25 kHZ = 32 μs. GPT allows to measure time precisely during up to 32 μs * 65536 ≈ 2 seconds.\r\n</span>\r\n\r\n<span class="function_syntax">zunoGPTSet(value)</span>\r\n\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">value</span>\r\n        <span class="function_parameters_param_description">Number of ticks until GPT fires and user defined handler is executed (WORD)</span>\r\n    </span>\r\n</span>\r\n\r\n<span class="function_returns">\r\nnone\r\n</span>\r\n\r\n\r\n', '2017-02-27 23:42:43', '2017-02-28 00:00:23', 1, 2, 1, 427),
(425, 6, '*', 'zunoGPTEnable()', '', 'zunoGPTEnable/', 'Reference/GPT/zunoGPTEnable/', '<h1>zunoGPTEnable()</h1>\r\n<span class="function_description">\r\nEnable/disable <span class="function_ref">GPT</span>.\r\n</span>\r\n\r\n<span class="function_syntax">zunoGPTEnable(mode)</span>\r\n\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">mode</span>\r\n        <span class="function_parameters_param_description">TRUE to enable GPT or FALSE to disable it</span>\r\n    </span>\r\n</span>\r\n\r\n<span class="function_returns">\r\nnone\r\n</span>\r\n', '2017-02-27 23:31:33', '2017-02-27 23:52:57', 1, 1, 1, 427),
(424, 6, '*', 'zunoGPTInit()', '', 'zunoGPTInit/', 'Reference/GPT/zunoGPTInit/', '<h1>zunoGPTInit</h1>\r\n<span class="function_description">\r\nInitialize <span class="function_ref">GPT</span> according to flags below.\r\n</span>\r\n\r\n<span class="function_syntax">zunoGPTInit(flags)</span>\r\n\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">flags</span>\r\n        <span class="function_parameters_param_description">Combination of flags from the list below. Can be ORed.\r\n            <ul>\r\n                <li>ZUNO_GPT_SCALE1024 &mdash; specify tick frequency as 32 MHz/1024 = 31.25 kHz (tick is 32 μs), otherwise default 32 MHz/8 = 4 MHz (tick is 0.25 μs)is used</li>\r\n                <li>ZUNO_GPT_IMWRITE &mdash; write new value immediately instead of waiting for timer to reach zero</li>\r\n                <li>ZUNO_GPT_CYCLIC &mdash; reload the timer on reaching zero, otherwise timer triggers only once</li>\r\n            </ul>\r\n        </span>\r\n    </span>\r\n</span>\r\n\r\n<span class="function_returns">\r\nnone\r\n</span>\r\n', '2017-02-27 23:27:39', '2017-02-27 23:52:33', 1, 3, 1, 427),
(323, 6, '*', 'UsingInterrupt', '', 'usinginterrupt/', 'Reference/SPI/usinginterrupt/', '<h4>usingInterrupt</h4>\r\n<span class="function_description">\r\n    If you program will perform SPI transaction within an interrupt, call this function to register the interrupt number or name with the SPI library. This allows SPI.beginTransaction() to prevent usage conflicts. Note that the interrupt specified in the call to usingInterrupt() will be disabled on a call to beginTransaction() and re-enabled in endTransaction().\r\n</span>\r\n<span class="function_syntax">\r\n    SPI.usingInterrupt(interruptNumber)</br>\r\n</span>\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param_name">interruptNumber:</span>\r\n    <span class="function_parameters_param_description">the associated interrupt number</span>\r\n</span>\r\n<span class="function_returns">\r\n    None\r\n</span>', '2016-07-12 14:26:43', '2017-02-27 23:21:15', 1322, 9, 1, 313),
(419, 6, '*', 'analogReadResolution()', '', 'analogReadResolution/', 'Reference/analogReadResolution/', '<h1>analogReadResolution()</h1>\r\n<span class="function_description">\r\nSet resolution of ADC used in <span class="function_ref">analogRead</span>().\r\nThis means that it will map input voltages between 0 and Vcc (about 3 V) into integer values between 0 and 2<sup>resolution</sup>-1.\r\n</span>\r\n\r\n<span class="function_syntax">analogReadResolution(resolution)</span>\r\n\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">resolution</span>\r\n        <span class="function_parameters_param_description">the number bits to use: 1&ndash;16</span>\r\n    </span>\r\n</span>\r\n\r\n<span class="function_returns">\r\nNone\r\n</span>\r\n\r\n<span class="function_description_more">\r\nMost popular resolutions are:\r\n<table>\r\n    <tr><th>resolution in bits</th><th>Description</th><th>range of values returned by <span class="function_ref">analogRead</span>()</th></tr>\r\n    <tr><td>10 (default)</td><td>Arduino Uno compatibility mode</td><td>0&ndash;1023</td></tr>\r\n    <tr><td>12</td><td>maximum possible in Z-Uno</td><td>0&ndash;4095</td></tr>\r\n    <tr><td>8</td><td>can save energy in battery devices (uses special mode of Z-Wave MCU to make ADC faster)</td><td>0&ndash;255</td></tr>\r\n</table>\r\n</span>\r\n', '2017-02-27 22:14:58', '2017-02-27 22:57:22', 1, 73, 1, 84),
(421, 6, '*', 'analogWriteResolution()', '', 'analogWriteResolution/', 'Reference/analogWriteResolution/', '<h1>analogWriteResolution()</h1>\r\n<span class="function_description">\r\nSet resolution of PWM used in <span class="function_ref">analogWrite</span>(). This allows to make smoother change of PWM than the default 256 steps.\r\n</span>\r\n\r\n<span class="function_syntax">analogWriteResolution(resolution)</span>\r\n\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">resolution</span>\r\n        <span class="function_parameters_param_description">the number bits to use: 1&ndash;16</span>\r\n    </span>\r\n</span>\r\n\r\n<span class="function_returns">\r\nNone\r\n</span>\r\n\r\n<span class="function_description_more">\r\nMost popular resolutions are:\r\n<table>\r\n    <tr><td>resolution in bits</td><td>Description</td><td>range of values passed to <span class="function_ref">analogWrite</span>()</td></tr>\r\n    <tr><td>8 (default)</td><td>Arduino Uno compatibility mode</td><td>0&ndash;255</td></tr>\r\n    <tr><td>16</td><td>maximum possible in Z-Uno</td><td>0&ndash;65535</td></tr>\r\n></tr>\r\n</table>\r\n</span>\r\n', '2017-02-27 22:45:04', '2017-02-27 22:45:04', 1, 76, 1, 84),
(420, 6, '*', 'analogReference()', '', 'analogReference/', 'Reference/analogReference/', '<h1>analogReference()</h1>\r\n<span class="function_description">\r\nSet reference voltages for ADC used in <span class="function_ref">analogRead</span>().\r\n</span>\r\n\r\n<span class="function_syntax">analogReference(referenceMask)</span>\r\n\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">referenceMask</span>\r\n        <span class="function_parameters_param_description">ORed mask of values from the table below</span>\r\n    </span>\r\n</span>\r\n\r\n<span class="function_returns">\r\nNone\r\n</span>\r\n\r\n<br/><br/>\r\n\r\n<span class="function_description_more">\r\n<table>\r\n    <tr><th>Value to be ORed</th><th>Upper voltage reference</th><th>Voltage reference</th></tr>\r\n    <tr><td>ADC_HIGH_EXTERNAL</td><td>A0 pin as upper reference voltage</td><td>Voltage on A0 pin</td></tr>\r\n    <tr><td>ADC_HIGH_INTERNAL</td><td>Internal voltage reference 1.2 V as upper reference voltage (NB! there might be a ±10% drift from Z-Uno to Z-Uno, but constant for a particular Z-Uno!)</td><td>1.2 V</td></tr>\r\n    <tr><td>ADC_HIGH_VCC</td><td>Vcc as upper reference voltage</td><td>Voltage on Vcc pin</td></tr>\r\n    <tr><th>Value to be ORed</th><th>Lower voltage reference</th><th>Voltage reference</th></tr>\r\n    <tr><td>ADC_LOW_EXTERNAL</td><td>A1 pin as lower reference voltage</td><td>Voltage on A1 pin</td></tr>\r\n    <tr><td>ADC_LOW_GND</td><td>GND as lower reference voltage</td><td>Voltage on GND pin</td></tr>\r\n    <tr><th>Value</th><th>Pre-defined (Arduino-like) combinations</th><th>Voltage reference</th></tr>\r\n    <tr><td>DEFAULT <b>(default)</b></td><td>GND&ndash;Vcc</td><td><nobr>(ADC_HIGH_VCC | ADC_LOW_GND)</nobr></td></tr>\r\n    <tr><td>INTERNAL</td><td>GND&ndash;1.2V</td><td><nobr>(ADC_HIGH_INTERNAL | ADC_LOW_GND)</nobr></td></tr>\r\n    <tr><td>EXTERNAL</td><td>GND&ndash;A0</td><td><nobr>(ADC_HIGH_EXTERNAL | ADC_LOW_GND)</nobr></td></tr>\r\n</tr>\r\n</table>\r\n</span>\r\n', '2017-02-27 22:31:12', '2017-02-27 22:39:09', 1, 74, 1, 84),
(85, 6, '*', 'delay()', '', 'delay/', 'Reference/delay/', '<h1>delay()</h1>\r\n<span class="function_description">\r\n    Pauses the program for the amount of time (in miliseconds) specified as parameter (there are 1000 milliseconds in a second).\r\n    During this amount of time, all Z-Wave specific tasks continue to execute, Z-Wave.Me bootloader continue to poll the service button and the USB. Only the user sketch is frozen.\r\n</span>\r\n<span class="function_description_note">\r\n    Due to strict radio timeouts, it is forbidden to call this function in the Z-Wave callback functions (getters and setters of Z-Wave channels). The Z-Wave.Me bootloader will ignore delay() in this situation.\r\n    Please use a flag instead: set a boolean variable in getters/setters that will be checked in loop() function.\r\n</span>\r\n<span class="function_syntax">delay(ms)</span>\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">ms</span>\r\n        <span class="function_parameters_param_description">the number of milliseconds to pause</span>\r\n    </span>\r\n</span>\r\n<span class="function_returns">\r\nnone\r\n</span>\r\n<span class="function_example">\r\n<pre>\r\n<code class="c">void setup() {\r\n  pinMode(20, OUTPUT);          // sets the digital pin as output\r\n}\r\n\r\nvoid loop() {\r\n  digitalWrite(20, HIGH);       // sets the LED on\r\n  delay(1000);                  // waits for a second\r\n  digitalWrite(20, LOW);        // sets the LED off\r\n  delay(1000);                  // waits for a second\r\n}\r\n</code></pre>\r\n</span>', '2015-05-27 10:48:07', '2017-02-27 22:09:16', 1322, 79, 1, 84),
(403, 6, '*', 'IR Controller', '', 'IR/', 'Reference/IR/', '<h1>IR Controller</h1>\r\n<span class="function_description">\r\nInfrared Controller can be used to emit IR signals to control different A/V devices as well as recieve (learn) IR signals from existing remote controls.\r\n<br>Z-Uno IR Controller supports up 4 outputs (pins 4&ndash;6, IR_TX2&ndash;IR_TX0, see <a href="/technical/pinout/">pinout</a>) and one input (pin 7 or IR_RX).\r\n<br>There are two ways to specify a command:\r\n<ul>\r\n    <li>Raw mode defined by sequency of marks and spaces</li>\r\n    <li>Vendor command mode defined by encoding protocol type and command in the protocol</li>\r\n</ul>\r\nRaw mode can be used in any case, while vendor mode is for popular encodings where library was able to detect the protocol. Both can be used in tranmission as well as in learn.<br/>\r\n<a href="https://github.com/Z-Wave-Me/Z-Uno-Core/blob/master/hardware/arduino/zuno/cores/zuno/IRController.h">IRController.h</a> defines supported vendors encodings and settings for raw mode.\r\n</span>\r\n\r\n<span class="function_description_more">\r\nTo set up IR controller use <span class="function_ref" link="IR/begin">IR.begin</span>(ir_params). Depending in object passed to IR.begin() IR controller will be configure accordingly. Possible objects are <span class="function_ref" link="IR/IRReceiverParams">IRReceiverParams</span> or <span class="function_ref" link="IR/IRTransmitterParams">IRTransmitterParams</span>.\r\n</span>\r\n\r\n<span class="function_description_note">In raw mode buffer size is 300 bytes (marks/space sequences), this is about 9 bytes of IR-commands data. This is enough for all A/V and most A/C commands.</span>\r\n\r\n<span class="function_syntax">\r\nExample of usage in receiver mode:\r\n{literal}\r\n<pre><code class="c">#include "IRController.h"\r\n\r\nIRReceiverParams ir_receiver(IR_FLAGS_IO_INVERTED);\r\nIRCommand_t ir_cmd;\r\nword raw_data[200];\r\n\r\nvoid setup() {\r\n  IR.begin(&ir_receiver);\r\n  IR.scan();\r\n}\r\n\r\nvoid loop() {\r\n  // Check state of IR-controller\r\n  byte ir_state = IR.getState();\r\n\r\n  if (!(ir_state & IR_STATUS_BUSY)) {\r\n    ...\r\n    \r\n    // Extract data in RAW16 format\r\n    // see IRController.h for detailed descriptions\r\n    IR.recv_raw16(raw_data);\r\n    \r\n    // In some cases it is possible to detect command by vendor\r\n    if (IR.detectCommand(&ir_cmd)) {\r\n      // ir_cmd stores the command detected\r\n    }\r\n    \r\n    // restart scan process\r\n    IR.scan();\r\n  }\r\n  delay(500);\r\n}\r\n</pre></code>\r\n{/literal}\r\n</span>\r\n\r\n\r\n<span class="function_syntax">\r\nExample of usage in transmitter mode:\r\n{literal}\r\n<pre><code class="c">#include "IRController.h"\r\n\r\nIRTransmitterParams ir_transmitter(byte(IR_TRANSMITTER_OUTPUT_PIN6), \r\n                                   IR_FLAGS_OUTPUT_HIGHDRIVE,\r\n                                   IR_MS_PRESCALLER_4MHZ, \r\n                                   IR_CARRIER_PRESCALLER_8MHZ);\r\n\r\n// Raw\r\nword raw_command[] = { ... };\r\n// or by Vendor\r\nIRCommand_t vendor_cmd;\r\n\r\nvoid setup() {\r\n  // For Raw\r\n  ir_transmitter.setupVendor(SOME_VENDOR);\r\n  IR.begin(&ir_transmitter);\r\n  // or by Vendor\r\n  vendor_cmd.vendor = MY_IR_VENDOR;\r\n  vendor_cmd.n_bits = DECODED_COMMAND_NBITS;\r\n}\r\n\r\nvoid sendRAWCommand(WORD * raw16) {\r\n	// we have to repeat packet like another IR-controllers do\r\n	byte count = 7;\r\n	while(count--) {\r\n		IR.send_raw16(raw16);\r\n		delay(30);\r\n	}\r\n}\r\n\r\nvoid sendVendorCommand(unsigned long cmd) {\r\n	// we have to repeat packet like another IR-controllers do\r\n	byte count = 7;\r\n	while(count--) {\r\n		vendor_cmd.data[0] = cmd;\r\n  	    IR.sendCommand(&vendor_cmd);\r\n		delay(30);\r\n	}\r\n}\r\n\r\nvoid loop() {\r\n  ...\r\n}\r\n</pre></code>\r\n{/literal}\r\n</span>\r\n\r\n<span class="function_see_also">\r\n<ul>\r\n    <li><a href="http://z-uno.z-wave.me/Reference/IR/IRReceiverParams">IRReceiverParams</a></li>\r\n    <li><a href="http://z-uno.z-wave.me/Reference/IR/IRTransmitterParams">IRTransmitterParams</a></li>\r\n	<li><a href="http://z-uno.z-wave.me/Reference/IR/begin">begin</a></li>\r\n	<li><a href="http://z-uno.z-wave.me/Reference/IR/end">end</a></li>\r\n	<li><a href="http://z-uno.z-wave.me/Reference/IR/getState">getState</a></li>\r\n	<li><a href="http://z-uno.z-wave.me/Reference/IR/scan">scan</a></li>\r\n	<li><a href="http://z-uno.z-wave.me/Reference/IR/send_raw16">send_raw16</a></li>\r\n	<li><a href="http://z-uno.z-wave.me/Reference/IR/equals_raw16">equals_raw16</a></li>\r\n	<li><a href="http://z-uno.z-wave.me/Reference/IR/recv_raw16">recv_raw16</a></li>\r\n	<li><a href="http://z-uno.z-wave.me/Reference/IR/detectCommand">detectCommand</a></li>\r\n	<li><a href="http://z-uno.z-wave.me/Reference/IR/readCommand">readCommand_*</a></li>\r\n	<li><a href="http://z-uno.z-wave.me/Reference/IR/sendCommand">sendCommand</a></li>\r\n	<li><a href="http://z-uno.z-wave.me/Reference/IR/sendCommand">sendCommand_*</a></li>\r\n</ul>\r\n</span>', '2016-12-18 00:00:09', '2017-02-27 22:07:43', 1, 123, 1, 84),
(151, 6, '*', 'int', '', 'int/', 'Reference/int/', '<h1>int</h1>\r\n\r\n<span class="function_description">Integers are your primary data-type for number storage.</span>\r\n\r\n<span class="function_description_more"><i>int</i> store negative numbers with a technique called 2''s complement math. The highest bit, sometimes referred to as the "sign" bit, flags the number as a negative number. The rest of the bits are inverted and 1 is added.</span>\r\n\r\n<span class="function_syntax">\r\n<pre>\r\n<code class="c">int var = val;\r\n</code></pre>\r\n\r\n<span class="function_example">\r\n<pre>\r\n<code class="c">int ledPin = 13;\r\n</code></pre>\r\n</span>\r\n    \r\n<span class="function_coding_tip">\r\nWhen variables are made to exceed their maximum capacity they "roll over" back to their minimum capacity, note that this happens in both directions. Example for a 16-bit int:\r\n<pre>\r\n<code class"c">int x;\r\nx = -32768;\r\nx = x - 1;       // x now contains 32,767 - rolls over in neg. direction\r\n\r\nx = 32767;\r\nx = x + 1;       // x now contains -32,768 - rolls over\r\n</code></pre></span>', '2015-06-07 14:53:58', '2017-01-06 15:45:08', 1322, 60, 1, 84),
(417, 6, '*', 'dword', '', 'dword/', 'Reference/dword/', '<h1>dword</h1>\r\n\r\n<span class="function_description">A dword stores a 32-bit unsigned number, from 0 to 4294967295. Same as <span class="function_ref">unsigned long int</span> or DWORD.</span>\r\n\r\n<span class="function_example">\r\n<pre>\r\n<code class="c">dword dw = 100000; \r\n</code></pre>\r\n</span>\r\n', '2017-01-06 15:44:07', '2017-01-06 15:44:07', 1, 63, 1, 84),
(153, 6, '*', 'word', '', 'word/', 'Reference/word/', '<h1>word</h1>\r\n\r\n<span class="function_description">A word stores a 16-bit unsigned number, from 0 to 65535. Same as <span class="function_ref">unsigned int</span> or WORD.</span>\r\n\r\n<span class="function_example">\r\n<pre>\r\n<code class="c">word w = 10000; \r\n</code></pre>\r\n</span>\r\n', '2015-06-07 15:35:12', '2017-01-06 15:43:00', 1322, 62, 1, 84),
(390, 6, '*', 'SPISettings', '', 'SPISettings/', 'Reference/SPI/SPISettings/', '<h4>SPISettings</h4>\r\n<span class="function_description">\r\n    The SPISettings object is used to configure the SPI port for your SPI device. All 3 parameters are combined to a single SPISettings object, which is given to SPI.beginTransaction().\r\n</span>\r\n<span class="function_syntax">\r\n    SPISettings spi_settings = SPISettings(speed, dataOrder, spiMode);\r\n</span>\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">speed</span>\r\n        <span class="function_parameters_param_description">8000000, 4000000, 2000000 or 1000000 MHz. Speed of communication. Z-Uno supports only 8MHz, 4MHz, 2MHz and 1MHz. Z-Uno will automatically use the best speed that is equal to or less than one of the supported.</span></br>\r\n    </span>\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">dataOrder</span>\r\n        <span class="function_parameters_param_description">MSBFIRST or LSBFIRST.</span>\r\n    </span>\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">spiMode</span>\r\n        <span class="function_parameters_param_description">SPI_MODE0, SPI_MODE1, SPI_MODE2, SPI_MODE3 &mdash; SPI mode number. Please refer to <a href="https://en.wikipedia.org/wiki/Serial_Peripheral_Interface_Bus">SPI modes description</a>.</span>\r\n    </span>\r\n</span>\r\n<span class="function_example">\r\n<code class="c"><pre>\r\nSPISettings spi_settings = SPISettings(8000000, MSBFIRST, SPI_MODE0);\r\nSPI.beginTransaction(&spi_settings);\r\n</pre></code>\r\n</span>', '2016-11-13 11:24:22', '2016-12-20 00:05:57', 1, 10, 1, 313),
(409, 6, '*', 'equals_raw16', '', 'equals_raw16/', 'Reference/IR/equals_raw16/', '<h4>equals_raw16()</h4>\r\n<span clas="function_description">\r\n    Compare (non strict compare) of the received IR command with a command in raw mode and stores it as a null terminated array of marks and spaces (16 bits each). IR Controller must be initialized in receive mode prior to using this functions.\r\n</span>\r\n<span class="function_syntax">\r\n    IR.equals_raw16(word * data);\r\n</span>\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">data</span>\r\n        <span class="function_parameters_param_description">pointer to an array to compare with; should be filled with marks and spaces; see <span class="function_ref" link="IR/send_raw16">IR.send_raw16</span>() for more info on Raw 16 format</span>\r\n    </span>\r\n</span>\r\n<span class="function_returns">\r\n    TRUE if received command matches data\r\n</span> ', '2016-12-18 00:40:55', '2016-12-18 16:36:02', 1, 10, 1, 403),
(407, 6, '*', 'send_raw16', '', 'send_raw16/', 'Reference/IR/send_raw16/', '<h4>send_raw16()</h4>\r\n<span clas="function_description">\r\n    Send raw command defined by a null terminated array of marks and spaces (16 bits each). IR Controller must be initialized in transmission mode prior to using this function.\r\n</span>\r\n<span class="function_syntax">\r\n    IR.send_raw16(word * data);\r\n</span>\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">data</span>\r\n        <span class="function_parameters_param_description">null terminated array of 16 bits values representing marks and space; see below for Raw 16 format</span>\r\n    </span>\r\n</span>\r\n<span class="function_returns">\r\n    None\r\n</span>\r\n\r\n<span clas="function_description_more">\r\n<b>Raw16 format</b> is an array of words. All intervals in microseconds. The sequence always ends with mark.\r\n<table>\r\n    <tr>\r\n        <td>word 1</td>\r\n        <td>word 2</td>\r\n        <td>word 3</td>\r\n        <td>word 4</td>\r\n        <td>word 5</td>\r\n        <td>...</td>\r\n        <td>word N*2</td>\r\n        <td>word N*2+1</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Number of words (means 2*N+1)</td>\r\n        <td>Mark #1</td>\r\n        <td>Space #1</td>\r\n        <td>Mark #2</td>\r\n        <td>Space #2</td>\r\n        <td>...</td>\r\n        <td>Mark #N</td>\r\n        <td>Space #N</td>\r\n    </tr>\r\n</table>\r\n</span>', '2016-12-18 00:30:57', '2016-12-18 16:35:20', 1, 8, 1, 403),
(408, 6, '*', 'recv_raw16', '', 'recv_raw16/', 'Reference/IR/recv_raw16/', '<h4>recv_raw16()</h4>\r\n<span clas="function_description">\r\n    Copy received IR command in raw mode and stores it as a null terminated array of marks and spaces (16 bits each). IR Controller must be initialized in receive mode prior to using this functions.\r\n</span>\r\n<span class="function_syntax">\r\n    IR.recv_raw16(word * data);\r\n</span>\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">data</span>\r\n        <span class="function_parameters_param_description">pointer to an array to be filled with marks and spaces; see <span class="function_ref" link="IR/send_raw16">IR.send_raw16</span>() for more info on Raw 16 format</span>\r\n    </span>\r\n</span>\r\n<span class="function_returns">\r\n    None\r\n</span>\r\n', '2016-12-18 00:33:02', '2016-12-18 16:34:39', 1, 9, 1, 403),
(415, 6, '*', 'getState', '', 'getState/', 'Reference/IR/getState/', '<h4>getState()</h4>\r\n<span clas="function_description">\r\nReturns state of IR Controller. Used to check if controller is busy in receive mode. If busy, this function returns IR_STATUS_BUSY.\r\n</span>\r\n<span class="function_syntax">\r\n<pre><code class="c">IR.getState();\r\n</code></pre>    \r\n</span>\r\n<span class="function_parameters">\r\n    None\r\n</span>\r\n<span class="function_returns">\r\n    byte, see constants IR_STATUS_* in <a href="https://github.com/Z-Wave-Me/Z-Uno-Core/blob/master/hardware/arduino/zuno/cores/zuno/IRController.h">IRController.h</a>\r\n</span>', '2016-12-18 16:21:50', '2016-12-18 16:22:14', 1, 8, 1, 403),
(414, 6, '*', 'sendCommand', '', 'sendCommand/', 'Reference/IR/sendCommand/', '<h4>sendCommand() and sendCommand_*()</h4>\r\n<span clas="function_description">\r\nSend out IR command defined in raw mode. IR Controller must be initialized in transmission mode prior to using this functions.\r\n</span>\r\n<span clas="function_description_more">\r\nVendor specific versions allows to reduce memory footprint of your code in case you need only one vendor encoding.\r\n</span>\r\n<span class="function_syntax">\r\n<pre><code class="c">IR.sendCommand(IRCommand_t * command);	\r\nIR.sendCommand_AIWA(IRCommand_t * command);\r\nIR.sendCommand_LG(IRCommand_t * command);\r\nIR.sendCommand_NEC(IRCommand_t * command);\r\nIR.sendCommand_PANASONIC(IRCommand_t * command);\r\nIR.sendCommand_RC5(IRCommand_t * command);\r\nIR.sendCommand_RC6(IRCommand_t * command);\r\nIR.sendCommand_SAMSUNG(IRCommand_t * command);\r\nIR.sendCommand_SONY(IRCommand_t * command);\r\n</code></pre>\r\n</span>\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">command</span>\r\n        <span class="function_parameters_param_description">pointer to IR command onject to send out</span>\r\n    </span>\r\n</span>\r\n<span class="function_returns">\r\n    None\r\n</span> ', '2016-12-18 16:03:23', '2016-12-18 16:03:23', 1, 13, 1, 403),
(410, 6, '*', 'detectCommand', '', 'detectcommand/', 'Reference/IR/detectcommand/', '<h4>detectCommand()</h4>\r\n<span clas="function_description">\r\n    Copy received IR command in raw mode and stores it as a null terminated array of marks and spaces (16 bits each). IR Controller must be initialized in receive mode prior to using this functions.\r\n</span>\r\n<span class="function_syntax">\r\n<pre><code class="c">IR.detectCommand(IRCommand_t * command);</code></pre>\r\n</span>\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">command</span>\r\n        <span class="function_parameters_param_description">pointer to IR command onject</span>\r\n    </span>\r\n</span>\r\n<span class="function_returns">\r\n    TRUE if command successfully decoded, otherwise FALSE\r\n</span>', '2016-12-18 00:45:56', '2016-12-18 15:59:28', 1, 11, 1, 403),
(413, 6, '*', 'readCommand', '', 'readCommand/', 'Reference/IR/readCommand/', '<h4>readCommand_*()</h4>\r\n<span clas="function_description">\r\nLike <span class="function_ref" link="IR/detectCommand">detectCommand</span>(), but chekc fon one vendor only. This allows to reduce memory footprint of the resulting code.\r\n</span>\r\n<span class="function_syntax">\r\n<pre><code class="c">IR.readCommand_AIWA(IRCommand_t * command);\r\nIR.readCommand_LG(IRCommand_t * command);\r\nIR.readCommand_NEC(IRCommand_t * command);\r\nIR.readCommand_PANASONIC(IRCommand_t * command);\r\nIR.readCommand_RC5(IRCommand_t * command);\r\nIR.readCommand_RC6(IRCommand_t* command);\r\nIR.readCommand_SAMSUNG(IRCommand_t * command);\r\nIR.readCommand_SONY(IRCommand_t * command);\r\n</code></pre>    \r\n</span>\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">command</span>\r\n        <span class="function_parameters_param_description">pointer to IR command onject</span>\r\n    </span>\r\n</span>\r\n<span class="function_returns">\r\n    TRUE if command successfully decoded, otherwise FALSE\r\n</span>', '2016-12-18 15:56:02', '2016-12-18 15:58:42', 1, 12, 1, 403),
(411, 6, '*', 'IRTransmitterParams', '', 'IRTransmitterParams/', 'Reference/IR/IRTransmitterParams/', '<h1>IRTransmitterParams</h1>\r\n<span class="function_description">\r\nDefines IR controller transmitter parameters.\r\n</span>\r\n\r\n<span class="function_syntax">\r\n<pre><code class="c">IRTransmitterParams ir_params(outputs, flags, ms_prescaler, carrier_prescaler, carrier_low, carrier_high);\r\n</code></pre>\r\n</span>\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">outputs</span>\r\n        <span class="function_parameters_param_description">Output to use. One of IR_TRANSMITTER_OUTPUT_PIN* constant from <a href="https://github.com/Z-Wave-Me/Z-Uno-Core/blob/master/hardware/arduino/zuno/cores/zuno/IRController.h">IRController.h</a></span>\r\n    </span>\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">flags</span>\r\n        <span class="function_parameters_param_description"></span>\r\n    </span>\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">ms_prescaler</span>\r\n        <span class="function_parameters_param_description">Prescaler for mark and space intervals. One of IR_MS_PRESCALLER_* constant from <a href="https://github.com/Z-Wave-Me/Z-Uno-Core/blob/master/hardware/arduino/zuno/cores/zuno/IRController.h">IRController.h</a></span>\r\n    </span>\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">carrier_prescaler</span>\r\n        <span class="function_parameters_param_description">Prescaler for carrier frequency. One of IR_CARRIER_PRESCALLER_* constant from <a href="https://github.com/Z-Wave-Me/Z-Uno-Core/blob/master/hardware/arduino/zuno/cores/zuno/IRController.h">IRController.h</a></span>\r\n    </span>\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">low</span>\r\n        <span class="function_parameters_param_description">Optional</span>\r\n    </span>\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">high</span>\r\n        <span class="function_parameters_param_description">Optional</span>\r\n    </span>\r\n</span>\r\n\r\n<span class="function_description_more">\r\nTo set up transmitter based on vendor, use setupVendor() function.\r\n</span>\r\n\r\n<span class="function_syntax">\r\n<pre><code class="c">IRTransmitterParams ir_params(outputs, flags, ms_prescaler, carrier_prescaler);\r\nir_params.setupVendor(vendor);\r\n</code></pre>\r\n</span>\r\n\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">vendor</span>\r\n        <span class="function_parameters_param_description">Vendor/encoding IR_VENDOR_* constant from <a href="https://github.com/Z-Wave-Me/Z-Uno-Core/blob/master/hardware/arduino/zuno/cores/zuno/IRController.h">IRController.h</a></span>\r\n    </span>\r\n</span>\r\n', '2016-12-18 14:15:57', '2016-12-18 15:49:32', 1, 3, 1, 403),
(412, 6, '*', 'IRReceiverParams', '', 'IRReceiverParams/', 'Reference/IR/IRReceiverParams/', '<h1>IRReceiverParams</h1>\r\n<span class="function_description">\r\nDefines IR controller receiver parameters.\r\n</span>\r\n\r\n<span class="function_description_more">\r\nEasiest way to set up receiver is to use Vendor mode.\r\n</span>\r\n\r\n<span class="function_syntax">\r\n<pre><code class="c">IRReceiverParams ir_params(vendor, flags);\r\n</code></pre>\r\n</span>\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">flags</span>\r\n        <span class="function_parameters_param_description">Set to IR_FLAGS_IO_INVERTED of mark is HIGH and space is LOW voltage. Otherwise use 0. Most popular IR-receivers like Vishay TSOP31238/TSOP312* have inverted output</span>\r\n    </span>\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">vendor</span>\r\n        <span class="function_parameters_param_description">Vendor/encoding IR_VENDOR_* constant from <a href="https://github.com/Z-Wave-Me/Z-Uno-Core/blob/master/hardware/arduino/zuno/cores/zuno/IRController.h">IRController.h</a></span>\r\n    </span>\r\n</span>\r\n\r\n<span class="function_description_more">\r\nAnd for experienced users there is advanced mode.\r\n</span>\r\n\r\n<span class="function_syntax">\r\n<pre><code class="c">IRReceiverParams ir_params(flags, ms_prescaler, carrier_prescaler, trail_space, carrier_averager, glitch_remover);\r\n</code></pre>\r\n</span>\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">flags</span>\r\n        <span class="function_parameters_param_description">Set to IR_FLAGS_IO_INVERTED of mark is HIGH and space is LOW voltage. Otherwise use 0. Most popular IR-receivers like Vishay TSOP31238/TSOP312* have inverted output</span>\r\n    </span>\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">ms_prescaler</span>\r\n        <span class="function_parameters_param_description">Prescaler for mark and space intervals. One of IR_MS_PRESCALLER_* constant from <a href="https://github.com/Z-Wave-Me/Z-Uno-Core/blob/master/hardware/arduino/zuno/cores/zuno/IRController.h">IRController.h</a></span>\r\n    </span>\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">carrier_prescaler</span>\r\n        <span class="function_parameters_param_description">Prescaler for carrier frequency. One of IR_CARRIER_PRESCALLER_* constant from <a href="https://github.com/Z-Wave-Me/Z-Uno-Core/blob/master/hardware/arduino/zuno/cores/zuno/IRController.h">IRController.h</a></span>\r\n    </span>\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">trail_space</span>\r\n        <span class="function_parameters_param_description">Trail space. One of IR_TRAILSPACE_* constant from <a href="https://github.com/Z-Wave-Me/Z-Uno-Core/blob/master/hardware/arduino/zuno/cores/zuno/IRController.h">IRController.h</a></span>\r\n    </span>\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">carrier_averager</span>\r\n        <span class="function_parameters_param_description">Not used</span>\r\n    </span>\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">glitch_remover</span>\r\n        <span class="function_parameters_param_description">Not used</span>\r\n    </span>\r\n</span>\r\n', '2016-12-18 15:44:26', '2016-12-18 15:48:22', 1, 2, 1, 403),
(406, 6, '*', 'scan', '', 'scan/', 'Reference/IR/scan/', '<h4>scan()</h4>\r\n<span clas="function_description">\r\n    Start scanning (learning) IR commands in receive mode. Controller should be initialized in receive mode before.\r\n</span>\r\n<span class="function_syntax">\r\n    IR.scan();\r\n</span>\r\n<span class="function_parameters">\r\n    None\r\n</span>\r\n<span class="function_returns">\r\n    None\r\n</span>', '2016-12-18 00:27:00', '2016-12-18 00:27:00', 1, 6, 1, 403),
(405, 6, '*', 'end', '', 'end/', 'Reference/IR/end/', '<h4>end()</h4>\r\n<span clas="function_description">\r\n    Stop IR controller.\r\n</span>\r\n<span class="function_syntax">\r\n    IR.stop();\r\n</span>\r\n<span class="function_parameters">\r\n    None\r\n</span>\r\n<span class="function_returns">\r\n    None\r\n</span> ', '2016-12-18 00:25:00', '2016-12-18 00:25:00', 1, 5, 1, 403),
(404, 6, '*', 'begin', '', 'begin/', 'Reference/IR/begin/', '<h4>begin()</h4>\r\n<span clas="function_description">\r\n    Initializes the IR controller in transmission or recieve mode depending on parameter.\r\n</span>\r\n<span class="function_syntax">\r\n    IR.begin(IRReceiverParams * transmitter);<br/>\r\n	IR.begin(IRTransmitterParams * receiver);\r\n</span>\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">transmitter</span>\r\n        <span class="function_parameters_param_description">pointer to structure difining parameters for transmission mode</span>\r\n    </span>\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">receiver</span>\r\n        <span class="function_parameters_param_description">pointer to structure difining parameters for receive mode</span>\r\n    </span>\r\n</span>\r\n<span class="function_returns">\r\n    None\r\n</span>', '2016-12-18 00:19:23', '2016-12-18 00:23:44', 1, 4, 1, 403);
INSERT INTO `site_page` (`id`, `domain_id`, `route`, `name`, `title`, `url`, `full_url`, `content`, `create_datetime`, `update_datetime`, `create_contact_id`, `sort`, `status`, `parent_id`) VALUES
(168, 6, '*', 'ZUNO_SENSOR_BINARY()', '', 'ZUNO_SENSOR_BINARY/', 'Reference/ZUNO_SENSOR_BINARY/', '<h1>ZUNO_SENSOR_BINARY()</h1>\r\n<span class="function_description">\r\nThis macro is a generic macro to be used to setup binary sensor channel for Z-Uno board using <span class="function_ref">ZUNO_SETUP_CHANNELS</span>. Instead we suggest to use one of the specific macro ZUNO_SENSOR_BINARY_* from the list below.\r\nThis type (and 3 other) affects only the display on the controller.\r\n</span>\r\n\r\n<span class="function_syntax">\r\n    ZUNO_SENSOR_BINARY(type, getter)\r\n</span>\r\n\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">type</span>\r\n        <span class="function_parameters_param_description">type of channel like ZUNO_SENSOR_BINARY_TYPE_DOOR, ZUNO_SENSOR_BINARY_TYPE_SMOKE,.. etc. Used to correctly display the sensor in the Z-Wave controller. Full list is defined in <a href="https://github.com/Z-Wave-Me/Z-Uno-Core/blob/master/hardware/arduino/zuno/cores/zuno/ZUNO_Definitions.h">ZUNO_Definitions.h</a> and starts with ZUNO_SENSOR_BINARY_TYPE_</span>\r\n    </span>\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">getter</span>\r\n        <span class="function_parameters_param_description">pointer to a user defined function, which is supposed to return current value for this channel. </span>\r\n    </span>\r\n</span>\r\n\r\n<span class="function_description">\r\nFunctions getter should return 0 for non-triggered state and any non-zero for triggered state.\r\n</span>\r\n<span class="function_syntax">BYTE getter(void)</span>\r\n\r\n<span class="function_tip">\r\nChannel generated using this macro will have Z-Wave Device Class GENERIC_TYPE_SENSOR_NOTIFICATION / SPECIFIC_TYPE_NOTIFICATION_SENSOR\r\n with Notification and Sensor Binary (for legacy suport) Command Classes.\r\n</span>\r\n\r\n<span class="function_example">\r\n       <pre>\r\n           <code class="c">ZUNO_SETUP_CHANNELS(ZUNO_SENSOR_BINARY(ZUNO_SENSOR_BINARY_TYPE_SMOKE, getterFunction));\r\n           \r\nvoid setup() {\r\n    ...\r\n}\r\n\r\nvoid loop() {\r\n    ...\r\n}\r\n\r\nbyte getterFunction() {\r\n    return currentValue;\r\n}\r\n        </code>\r\n    </pre>\r\n</span>\r\n\r\n<span class="function_description_more">\r\nPopular sensor types have pre-defined macro. Few are listed below. Full list is defined in <a href="https://github.com/Z-Wave-Me/Z-Uno-Core/blob/master/hardware/arduino/zuno/cores/zuno/ZUNO_Definitions.h">ZUNO_Definitions.h</a> file and starts with ZUNO_SENSOR_BINARY_\r\n</span>\r\n\r\n<span class="function_syntax">\r\nZUNO_SENSOR_BINARY_GENERAL_PURPOSE(getter)<br/>\r\nZUNO_SENSOR_BINARY_SMOKE(getter)<br/>\r\nZUNO_SENSOR_BINARY_CO(getter)<br/>\r\nZUNO_SENSOR_BINARY_CO2(getter)<br/>\r\nZUNO_SENSOR_BINARY_HEAT(getter)<br/>\r\nZUNO_SENSOR_BINARY_WATER(getter)<br/>\r\nZUNO_SENSOR_BINARY_FREEZE(getter)<br/>\r\nZUNO_SENSOR_BINARY_TAMPER(getter)<br/>\r\nZUNO_SENSOR_BINARY_DOOR_WINDOW(getter)<br/>\r\nZUNO_SENSOR_BINARY_MOTION(getter)<br/>\r\nZUNO_SENSOR_BINARY_GLASSBREAK(getter)\r\n</span>\r\n', '2015-06-13 16:16:17', '2016-12-17 23:46:12', 1322, 79, 1, 84),
(171, 6, '*', 'ZUNO_SENSOR_MULTILEVEL()', '', 'ZUNO_SENSOR_MULTILEVEL/', 'Reference/ZUNO_SENSOR_MULTILEVEL/', '<h1>ZUNO_SENSOR_MULTILEVEL()</h1>\r\n\r\n<span class="function_description">\r\nThis macro is a generic macro to be used to setup multilevel sensor channel for Z-Uno board using <span class="function_ref">ZUNO_SETUP_CHANNELS</span>. Instead we suggest to use one of the specific macro ZUNO_SENSOR_MULTILEVEL_* from the list below.\r\n</span>\r\n\r\n<span class="function_syntax">\r\n    ZUNO_SENSOR_MULTILEVEL(type, scale_size_precision, getter)\r\n</span>\r\n\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">type</span>\r\n        <span class="function_parameters_param_description">type of channel like ZUNO_SENSOR_MULTILEVEL_TYPE_TEMPERATURE, ZUNO_SENSOR_MULTILEVEL_TYPE_DEW_POINT,.. etc. Used to correctly display the sensor in the Z-Wave controller. Full list is defined in <a href="https://github.com/Z-Wave-Me/Z-Uno-Core/blob/master/hardware/arduino/zuno/cores/zuno/ZUNO_Definitions.h">ZUNO_Definitions.h</a> and starts with ZUNO_SENSOR_MULTILEVEL_TYPE_</span>\r\n    </span>\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">scale_size_precision</span>\r\n        <span class="function_parameters_param_description">specific scale used for sensor type, size (1, 2 or 4 bytes) and precision (number of decimals after dot). This should be packed in one byte. Use SENSOR_MULTILEVEL_PROPERTIES_COMBINER() macro to pack.</span>\r\n    </span>\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">getter</span>\r\n        <span class="function_parameters_param_description">pointer to a user defined function, which is supposed to return current value for this channel. </span>\r\n    </span>\r\n</span>\r\n\r\n<span class="function_syntax">\r\n    SENSOR_MULTILEVEL_PROPERTIES_COMBINER(scale, size, precision)\r\n</span>\r\n\r\n<span class="function_description">\r\nFunctions getter should return current value using types BYTE (for size = 1), WORD (for size = 2) or DWORD (for size = 4) depending on size field defined in scale_size_precision parameter. In almost all most used macros the size is 1 and value type is BYTE.\r\n</span>\r\n<span class="function_syntax">BYTE getter(void)</span>\r\n\r\n<span class="function_description_note">\r\nValues returned by getter are <b>signed</b>. Values are interpreted according to the following transformation:\r\n<ul>\r\n    <li>signed value = value / 10<sup>precision</sup>, for value &lt; MAX_NUM/2</li>\r\n    <li>signed value = (value - MAX_NUM) / 10<sup>precision</sup>, for value &ge; MAX_NUM/2</li>\r\n</ul>\r\nWhere MAX_NUM = 2<sup>8*size</sup> and precision defined number of decimal digits after dot.\r\n</span>\r\n\r\n<span class="function_example">\r\nFor example if size 1 and precision 0, value 25 represents 25,<br/>\r\nfor size 1 and precision 0, value 164 represents -92 = 164 - 256,<br/>\r\nfor size 1 and precision 1, value 25 represents 2.5 = 25 / 10,<br/>\r\nfor size 1 and precision 1, value 164 represents -9.2 = (164 - 256) / 10,<br/>\r\nfor size 2 and precision 1, value 366 represents 36.6,<br/>\r\nfor size 2 and precision 1, value 65535 represents -0.1 = (65535 - 65536) / 10,<br/>\r\nfor size 2 and precision 2, value 65535 represents -0.01 = (65535 - 65536) / 100.\r\n</span>\r\n\r\n<span class="function_tip">\r\nChannel generated using this macro will have Z-Wave Device Class GENERIC_TYPE_SENSOR_MULTILEVEL / SPECIFIC_TYPE_ROUTING_SENSOR_MULTILEVEL with Sensor Multilevel Command Class.\r\n</span>\r\n\r\n<span class="function_example">\r\n       <pre>\r\n           <code class="c">ZUNO_SENSOR_MULTILEVEL(ZUNO_SENSOR_MULTILEVEL_TYPE_TEMPERATURE, SENSOR_MULTILEVEL_SCALE_CELSIUS, SENSOR_MULTILEVEL_SIZE_ONE_BYTE, SENSOR_MULTILEVEL_PRECISION_ZERO_DECIMALS, GETTER)\r\n           \r\nvoid setup() {\r\n    ...\r\n}\r\n\r\nvoid loop() {\r\n    ...\r\n}\r\n\r\nbyte getterFunction() {\r\n    return currentValue;\r\n}\r\n        </code>\r\n    </pre>\r\n</span>\r\n\r\n<span class="function_description_more">\r\nPopular sensor types have pre-defined macro. Few are listed below. Full list is defined in <a href="https://github.com/Z-Wave-Me/Z-Uno-Core/blob/master/hardware/arduino/zuno/cores/zuno/ZUNO_Definitions.h">ZUNO_Definitions.h</a> file and starts with ZUNO_SENSOR_MULTILEVEL_\r\n</span>\r\n\r\n<span class="function_syntax">\r\nZUNO_SENSOR_MULTILEVEL_TEMPERATURE(getter)<br/>\r\nZUNO_SENSOR_MULTILEVEL_GENERAL_PURPOSE_VALUE(getter)<br/>\r\nZUNO_SENSOR_MULTILEVEL_LUMINANCE(getter)<br/>\r\nZUNO_SENSOR_MULTILEVEL_POWER(getter)<br/>\r\nZUNO_SENSOR_MULTILEVEL_HUMIDITY(getter)<br/>\r\nZUNO_SENSOR_MULTILEVEL_VELOCITY(getter)<br/>\r\nZUNO_SENSOR_MULTILEVEL_DIRECTION(getter)<br/>\r\nZUNO_SENSOR_MULTILEVEL_ATMOSPHERIC_PRESSURE(getter)<br/>\r\nZUNO_SENSOR_MULTILEVEL_BAROMETRIC_PRESSURE(getter)<br/>\r\nZUNO_SENSOR_MULTILEVEL_SOLAR_RADIATION(getter)<br/>\r\nZUNO_SENSOR_MULTILEVEL_DEW_POINT(getter)<br/>\r\nZUNO_SENSOR_MULTILEVEL_RAIN_RATE(getter)<br/>\r\nZUNO_SENSOR_MULTILEVEL_TIDE_LEVEL(getter)<br/>\r\nZUNO_SENSOR_MULTILEVEL_WEIGHT(getter)<br/>\r\nZUNO_SENSOR_MULTILEVEL_VOLTAGE(getter)<br/>\r\nZUNO_SENSOR_MULTILEVEL_CURRENT(getter)<br/>\r\nZUNO_SENSOR_MULTILEVEL_CO2_LEVEL(getter)<br/>\r\nZUNO_SENSOR_MULTILEVEL_AIR_FLOW(getter)<br/>\r\nZUNO_SENSOR_MULTILEVEL_TANK_CAPACITY(getter)<br/>\r\nZUNO_SENSOR_MULTILEVEL_DISTANCE(getter)<br/>\r\nZUNO_SENSOR_MULTILEVEL_ANGLE_POSITION(getter)<br/>\r\nZUNO_SENSOR_MULTILEVEL_ROTATION(getter)<br/>\r\nZUNO_SENSOR_MULTILEVEL_WATER_TEMPERATURE(getter)<br/>\r\nZUNO_SENSOR_MULTILEVEL_SOIL_TEMPERATURE(getter)<br/>\r\nZUNO_SENSOR_MULTILEVEL_SEISMIC_INTENSITY(getter)<br/>\r\nZUNO_SENSOR_MULTILEVEL_SEISMIC_MAGNITUDE(getter)<br/>\r\nZUNO_SENSOR_MULTILEVEL_ULTRAVIOLET(getter)<br/>\r\nZUNO_SENSOR_MULTILEVEL_ELECTRICAL_RESISTIVITY(getter)<br/>\r\nZUNO_SENSOR_MULTILEVEL_ELECTRICAL_CONDUCTIVITY(getter)<br/>\r\nZUNO_SENSOR_MULTILEVEL_LOUDNESS(getter)<br/>\r\nZUNO_SENSOR_MULTILEVEL_MOISTURE(getter)<br/>\r\nZUNO_SENSOR_MULTILEVEL_FREQUENCY(getter)<br/>\r\nZUNO_SENSOR_MULTILEVEL_TIME(getter)\r\n</span>\r\n', '2015-06-13 16:56:53', '2016-12-17 23:45:38', 1322, 82, 1, 84),
(361, 6, '*', 'NZRAM Library', '', 'NZRAM/', 'Reference/NZRAM/', '<h1>NZRAM Library</h1>\r\n\r\n<span class="function_description">\r\nThis librariry provides access to special part of memory (called "non-zero" RAM or NZRAM) that can store data even if Z-Uno is in sleep mode. Z-Uno provides user up to 32 byes of NZRAM.</span>\r\n<span class="function_description_note">\r\nNote that Z-Uno should still be powered to maintain non-zero memory. On power loss non-zero memory will contain garbage, so a special magic key or CRC is suggested to be used to check memory validity before trust it.\r\n</span>\r\n<span class="function_description_more">\r\nWriting to and reading from non-zero memory is very fast and energy efficient (like access to normal variable), but in contrast to any other memory in Z-Uno it is not cleared on next wake up of Z-Uno. Use it to store some data you need to keep from previous wakeup but you don''t want to write into non-volatile EEPROM (because it is very energy consuming compared to access to non-zero memory).\r\n<ul>\r\n    <li><span class="function_ref" link="NZRAM/put">NZRAM.put</span>()</li>\r\n    <li><span class="function_ref" link="NZRAM/get">NZRAM.get</span>()</li>\r\n    <li><span class="function_ref" link="NZRAM/read">NZRAM.read</span>()</li>\r\n    <li><span class="function_ref" link="NZRAM/write">NZRAM.write</span>()</li>\r\n</ul>\r\n</span>\r\n\r\n<span class="function_example">\r\n<pre><code lang="c">{literal}#include "EEPROM.h"\r\n\r\n// device will sleep until next service button press (or INT1 pulled to LOW)\r\nZUNO_SETUP_SLEEPING_MODE(ZUNO_SLEEPING_MODE_SLEEPING);\r\n\r\n// LED pin number\r\n#define LED_PIN 13\r\n\r\n#define MAGIC_VALUE 42\r\n\r\nvoid setup() {\r\n  byte n;\r\n  \r\n  pinMode(LED_PIN, OUTPUT);      // set LED pin as output\r\n  \r\n  // Check that NZRAM contain our magic value\r\n  NZRAM.get(0x0, &n, 1);\r\n  if (n == MAGIC_VALUE) {\r\n    // correct magic value after wake up from sleep mode\r\n    // trust NZRAM data\r\n    NZRAM.get(0x1, &n, 1);\r\n    n++;\r\n    NZRAM.put(0x1, &n, 1);\r\n  } else {\r\n    // incorrect magic, first boot after battery insert ot rebooted due to low battery\r\n    // initialize NZRAM magic\r\n    n = MAGIC_VALUE;\r\n    NZRAM.put(0x0, &n, 1);\r\n    n = 1;\r\n    NZRAM.put(0x1, &n, 1);\r\n  }\r\n}\r\n\r\nvoid loop() {\r\n  for (int i = 0; i < n; i++) {\r\n    digitalWrite(LED_PIN, HIGH);   // turn LED on\r\n    delay(100);                    // wait for 1 second\r\n    digitalWrite(LED_PIN, LOW);    // turn LED off\r\n    delay(1000);                   // wait for 1 second\r\n  }\r\n  zunoSendDeviceToSleep();\r\n}\r\n{/literal}\r\n</code></pre>\r\n</span>', '2016-08-24 04:45:42', '2016-12-17 23:32:36', 1, 122, 1, 84),
(313, 6, '*', 'SPI', '', 'SPI/', 'Reference/SPI/', '<h1>SPI</h1>\r\n<span class="function_description">\r\n    <br>Serial Peripheral Interface (SPI) is a synchronous serial data protocol used by microcontrollers for communicating with one or more peripheral devices quickly over short distances. It can also be used for communication between two microcontrollers. </br>\r\n    <br>With an SPI connection there is always one master device (usually a microcontroller) which controls the peripheral devices. Typically there are three lines common to all the devices:</br>\r\n<ul>\r\n<li>MISO (Master In Slave Out) &mdash; The Slave line for sending data to the master</li>\r\n<li>MOSI (Master Out Slave In) &mdash; The Master line for sending data to the peripherals</li>\r\n<li>SCK (Serial Clock) &mdash; The clock pulses which synchronize data transmission generated by the master</li>\r\n<li>CS/SS (Slave Select or Chips Select) &mdash; the pin on each device that the master can use to enable and disable specific devices.</li>\r\n</ul>\r\n<br>For more infomation about pins of Z-Uno <a href="http://z-uno.z-wave.me/technical/pinout/">here</a></br>\r\n<br>When a device''s Slave Select pin is low, it communicates with the master. When it''s high, it ignores the master. This allows you to have multiple SPI devices sharing the same MISO, MOSI, and CLK lines.</br>\r\n<br>To write code for a new SPI device you need to note a few things:\r\n<ul>\r\n<li>What is the maximum SPI speed your device can use? This is controlled by the first parameter in SPISettings. Z-Uno supports up to 8MHz (8000000). Z-Uno will automatically use the best speed that is equal to or less than the number you use with SPISettings.</li>\r\n<li>Is data shifted in Most Significant Bit (MSB) or Least Significant Bit (LSB) first? This is controlled by second SPISettings parameter, either MSBFIRST or LSBFIRST. Most SPI chips use MSB first data order.</li>\r\n<li>Is the data clock idle when high or low? Are samples on the rising or falling edge of clock pulses? These modes are controlled by the third parameter in SPISettings.</li>\r\n</ul>\r\nThe SPI standard is loose and each device implements it a little differently. This means you have to pay special attention to the device''s datasheet when writing your code\r\n<br>Once you have your SPI parameters, use SPI.beginTransaction() to begin using the SPI port.\r\n</span>\r\n<span class="function_example"><code class="c"><pre>\r\nSPISettings spi_settings = SPISettings(8000000, MSBFIRST, SPI_MODE0);\r\nSPI.beginTransaction(&spi_settings);\r\n// ...\r\nSPI.endTransaction();\r\n</pre></code></span>\r\n<span class="function_description_more">\r\n<!--\r\nIf other libraries use SPI from interrupts, they will be prevented from accessing SPI until you call SPI.endTransaction();</pre></code></span>\r\n-->\r\nThe SPI settings are applied at the beginning of the transaction and SPI.endTransaction() doesn''t change SPI settings. Unless you, or some library, calls beginTransaction a second time, the setting are maintained. You should attempt to minimize the time between before you call SPI.endTransaction(), for best compatibility if your program is used together with other libraries which use SPI.\r\nWith most SPI devices, after SPI.beginTransaction(), you will write the slave select pin LOW, call SPI.transfer() any number of times to transfer data, then write the SS pin HIGH, and finally call SPI.endTransaction().\r\n</span>            \r\n<ul>\r\n    <li><a href="http://z-uno.z-wave.me/Reference/SPI/SPISettings/">SPISettings</a></li>\r\n	<li><a href="http://z-uno.z-wave.me/Reference/SPI/Begin">begin</a></li>\r\n	<li><a href="http://z-uno.z-wave.me/Reference/SPI/End">end</a></li>\r\n	<li><a href="http://z-uno.z-wave.me/Reference/SPI/BeginTransaction">beginTransaction</a></li>\r\n	<li><a href="http://z-uno.z-wave.me/Reference/SPI/EndTransaction">endTransaction</a></li>\r\n	<li><a href="http://z-uno.z-wave.me/Reference/SPI/SetBitOrder">setBitOrder</a></li>\r\n	<li><a href="http://z-uno.z-wave.me/Reference/SPI/SetClockDivider">setClockDivider</a></li>\r\n	<li><a href="http://z-uno.z-wave.me/Reference/SPI/SetDataMode">setDataMode</a></li>\r\n	<li><a href="http://z-uno.z-wave.me/Reference/SPI/Transfer">Transfer</a></li>\r\n	<li><a href="http://z-uno.z-wave.me/Reference/SPI/UsingInterrupt">usingInterrupt</a></li>\r\n</ul>', '2016-07-11 16:11:26', '2016-11-14 21:45:46', 1322, 117, 1, 84),
(321, 6, '*', 'SetDataMode', '', 'SetDataMode/', 'Reference/SPI/SetDataMode/', '<h4>setDataMode()</h4>\r\n<span class="function_description">\r\n    Sets the SPI data mode: that is, clock polarity and phase.\r\n</span>\r\n<span class="function_syntax">\r\n    SPI.setDataMode(mode)\r\n</span>\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param_name">mode:</span>\r\n    <span class="function_parameters_param_description">See <a href="https://en.wikipedia.org/wiki/Serial_Peripheral_Interface_Bus#Clock_polarity_and_phase">SPI description</a> for more info.\r\n        <ul>\r\n            </li><li>SPI_MODE0</li>\r\n            </li><li>SPI_MODE1</li>\r\n            </li><li>SPI_MODE2</li>\r\n            </li><li>SPI_MODE3</li>\r\n        </ul>\r\n    </span>\r\n</span>\r\n<span class="function_returns">\r\n    None\r\n</span>', '2016-07-12 13:14:15', '2016-11-13 11:20:48', 1322, 7, 1, 313),
(208, 6, '*', 'zunoSendToGroupDimmingCommand', '', 'zunoSendToGroupDimmingCommand/', 'Reference/zunoSendToGroupDimmingCommand/', '<h1>zunoSendToGroupDimmingCommand()</h1>\r\n<span class="function_description">\r\n    This function sends dimming commands (using Switch Multilevel Command Class) to devices in association group defined as ZUNO_ASSOCIATION_GROUP_SET_VALUE_AND_DIM (see <span class="function_ref">ZUNO_SETUP_ASSOCIATIONS</span>).\r\n</span>\r\n<span class="function_syntax">\r\n    zunoSendToGroupDimmingCommand(CTRL_GROUP_n, direction, start_stop)\r\n</span>\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">CTRL_GROUP_n</span>\r\n        <span class="function_parameters_param_description">number of group: CTRL_GROUP_1, ... CTRL_GROUP_5</span>\r\n    </span>\r\n        <span class="function_parameters_param">\r\n            <span class="function_parameters_param_name">direction</span>\r\n            <span class="function_parameters_param_description">FALSE for dimmig up, TRUE for dimming down</span>\r\n        </span>    \r\n        <span class="function_parameters_param">\r\n            <span class="function_parameters_param_name">start_stop</span>\r\n            <span class="function_parameters_param_description">TRUE to start diming, FALSE to stop dmming</span>\r\n        </span>\r\n        </span>\r\n    </span>\r\n</span>\r\n<span class="function_example">\r\n    <pre>\r\n        <code class="c">zunoSendToGroupDimmingCommand(CTRL_GROUP_2, FALSE, TRUE); // start dimming up</code>\r\n    </pre>\r\n</span> ', '2015-08-10 14:56:09', '2016-10-23 19:42:33', 1322, 97, 1, 84),
(206, 6, '*', 'ZUNO_SETUP_DEBUG_MODE', '', 'ZUNO_SETUP_DEBUG_MODE/', 'Reference/ZUNO_SETUP_DEBUG_MODE/', ' <h1>ZUNO_SETUP_DEBUG_MODE()</h1>\r\n <span class="function_description">\r\n     Macro allows you to enable debug mode in the sketch. In this mode, you can change the channels, associations, their types and power mode changes without excluding and including back Z-Uno. Use for debugging only!</span>\r\n <span class="function_syntax">\r\n    ZUNO_SETUP_DEBUG_MODE(mode)\r\n</span>\r\n\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">mode</span>\r\n        <span class="function_parameters_param_description">Possible values:\r\n        <ul>\r\n            <li>DEBUG_ON</li>\r\n            <li>DEBUG_OFF</li>\r\n        </ul>\r\n    </span>\r\n</span>\r\n', '2015-08-10 13:45:51', '2016-10-02 13:27:28', 1322, 95, 1, 84),
(325, 6, '*', 'Begin', '', 'Begin/', 'Reference/Wire/Begin/', '<h4>Wire.begin()</h4></br>\r\n<span class="function_description">\r\n    Initiate the Wire library and join the I2C bus as a master. This should normally be called only once. Slave mode is not supported yet.\r\n</span>\r\n<span class="function_syntax"><pre><code lang="c">Wire.begin();\r\nWire.begin();\r\n</code></pre>\r\n</span>\r\n<!-- for slave\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param_name">address</span>\r\n    <span class="function_parameters_param_description">the 7-bit slave address (optional); if not specified, join the bus as a master</span>\r\n</span>\r\n-->\r\n<span class="function_returns">\r\n    None\r\n</span>', '2016-07-14 12:28:26', '2016-09-30 23:01:03', 1322, 1, 1, 324),
(383, 6, '*', 'zunoSendToGroupDoorlockControl()', '', 'zunosendtogroupdoorlockcontrol/', 'Reference/zunosendtogroupdoorlockcontrol/', '<h1>zunoSendToGroupDoorlockControl()</h1>\r\n<span class="function_description">\r\n    This function sends open/close commands (using Door Lock Command Class) to devices in association group defined as ZUNO_ASSOCIATION_GROUP_DOORLOCK (see <span class="function_ref">ZUNO_SETUP_ASSOCIATIONS</span>).\r\n</span>\r\n<span class="function_syntax">\r\n    zunoSendToGroupDoorlockControl(CTRL_GROUP_n, value)\r\n</span>\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">CTRL_GROUP_n</span>\r\n        <span class="function_parameters_param_description">number of group: CTRL_GROUP_1, ... CTRL_GROUP_5</span>\r\n    </span>\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">value</span>\r\n        <span class="function_parameters_param_description">0 (close) or 255 (open)</span>\r\n    </span>\r\n    </span>\r\n</span>\r\n<span class="function_example">\r\n<pre><code class="c">zunoSendToGroupDoorlockControl(CTRL_GROUP_1, 255); // Open\r\n</code></pre></span> ', '2016-09-28 21:28:44', '2016-09-28 21:33:57', 1, 99, 1, 84),
(194, 6, '*', 'ZUNO_SETUP_ASSOCIATIONS()', '', 'ZUNO_SETUP_ASSOCIATIONS/', 'Reference/ZUNO_SETUP_ASSOCIATIONS/', '<h1>ZUNO_SETUP_ASSOCIATIONS()</h1>\r\n<span class="function_description">\r\nThis macro defines association groups in Z-Uno. Association groups are used to control other devices in Z-Wave network.\r\n<br/>\r\n<br/>\r\nIn terms of Z-Wave protocol this macro instructs Sketch bootloader to create additional Association groups in the Z-Uno board exposed using Association Command Class.\r\n<br/>\r\n<br/>\r\nEach group should have it''s own dedicated function.\r\n\r\n\r\n<span class="function_syntax">\r\n    ZUNO_SETUP_ASSOCIATIONS(ControlGroupType_1, ControlGroupType_2,...)\r\n</span>\r\n\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">ControlGroupType_n</span>\r\n        <span class="function_parameters_param_description">Type of group defines which commands will be sent to distant devices in the network.\r\n        </span>\r\n    </span>\r\n</span>\r\n\r\n<span class="function_description_more">\r\nThere is only three possible types available:\r\n<ul>\r\n    <li>ZUNO_ASSOCIATION_GROUP_SET_VALUE &mdash; send switch on/off commands (using Basic Command Class) to devices in Z-Wave network by calling <span class="function_ref">zunoSendToGroupSetValueCommand</span>()</li>\r\n    <li>ZUNO_ASSOCIATION_GROUP_SET_VALUE_AND_DIM &mdash; send dimming commands (using Switch Multilevel Command Class) to devices in Z-Wave network by calling <span class="function_ref">zunoSendToGroupDimmingCommand</span>(). You can also use <span class="function_ref">zunoSendToGroupSetValueCommand</span>() for devices in this group to send switch on/off commands (using Basic Command Class).</li>\r\n    <li>ZUNO_ASSOCIATION_GROUP_SCENE_CONTROL &mdash; send scene activation commands (using Scene Activation Command Class) to devices in Z-Wave network by calling <span class="function_ref">zunoSendToGroupScene</span>()</li>\r\n    \r\n    <li>ZUNO_ASSOCIATION_GROUP_DOORLOCK &mdash; send door lock open/close commands (using Door Lock Command Class) to devices in Z-Wave network by calling <span class="function_ref">zunoSendToGroupDoorlockControl</span>()</li>\r\n</ul>\r\n\r\nGroups are numbered in the same order as they are mentioned in parameters to ZUNO_SETUP_ASSOCIATIONS() macro.\r\n</span>\r\n\r\n<span class="function_description_note">Association groups should be referred by these macros:\r\n    <ul>\r\n        <li>CTRL_GROUP_1</li>\r\n        <li>CTRL_GROUP_2</li>\r\n        <li>CTRL_GROUP_3</li>\r\n        <li>CTRL_GROUP_4</li>\r\n        <li>CTRL_GROUP_5</li>\r\n    </ul>\r\n</span>\r\n\r\n<span class="function_description_note">\r\nReal association groups number are shifted by one. Means CTRL_GROUP_1 is in reality number 2. This is because number 1 is Life Line group. Read more in description of <span class="function_ref">Z-Wave</span> implementation.\r\n</span>\r\n\r\n<span class="function_description_note">\r\nAfter changing number and types of association groups Z-Uno must be excluded and included back. Z-Uno will not adopt any changes of association groups without being excluded. (A <a href="/z-wave/configuration-parameters/">debug configuration parameter</a> can disable this restriction).\r\n</span>\r\n\r\n <span class="function_example">\r\n     <pre>\r\n         <code class="c">ZUNO_SETUP_ASSOCIATIONS(ZUNO_ASSOCIATION_GROUP_SET_VALUE, ZUNO_ASSOCIATION_GROUP_SET_VALUE_AND_DIM)</code>\r\n     </pre>\r\n </span> \r\n\r\n<span class="function_see_also">\r\n    Get more information about <span class="function_ref">Z-Wave</span>.\r\n</span>\r\n\r\n', '2015-08-02 22:56:38', '2016-09-28 21:33:24', 1322, 92, 1, 84),
(382, 6, '*', 'pulseIn()', '', 'pulseIn/', 'Reference/pulseIn/', '<h1>pulseIn()</h1>\r\n\r\n<span class="function_description">\r\nReads a pulse (either HIGH or LOW) on a pin. For example, if value is HIGH, pulseIn() waits for the pin to go HIGH, starts timing, then waits for the pin to go LOW and stops timing. Returns the length of the pulse in microseconds or 0 if no complete pulse was received within the timeout.\r\n</span>\r\n\r\n<span class="function_description_more">\r\nThe timing of this function has been determined empirically and will probably show errors on shorter pulses. Works on pulses from 10 microseconds to 3 minutes in length. Please also note that if the pin is already high when the function is called, it will wait for the pin to go LOW and then HIGH before it starts counting.\r\n</span>\r\n\r\n<span class="function_description_note">\r\npulseIn() works only with fast pins defined via <span class="function_ref">s_pin</span> data type and hence can work only on pins 9&ndash;16.\r\n</span>\r\n\r\n<span class="function_syntax">width = pulseIn(pin, level, timeout);</span>\r\n\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">pin</span>\r\n        <span class="function_parameters_param_description">the number of the pin on which you want to read the pulse (<span class="function_ref">s_pin</span> type)</span>\r\n    </span>\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">level</span>\r\n        <span class="function_parameters_param_description">type of pulse to read: <span class="function_ref">HIGH</span> or <span class="function_ref">LOW</span></span>\r\n    </span>\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">timeout</span>\r\n        <span class="function_parameters_param_description">the number of microseconds to wait for the pulse to be completed: the function returns 0 if no complete pulse was received within the timeout (DWORD, must be &gt; 500 μs)</span>\r\n    </span>\r\n</span>\r\n\r\n<span class="function_returns">\r\nthe length of the pulse (in microseconds) or 0 if no pulse is completed before the timeout (DWORD)\r\n</span>\r\n\r\n<span class="function_example">\r\n<pre>\r\n<code class="c">s_pin pinPulse = 9;\r\n\r\nvoid setup() {\r\n  Serial.begin(115200);\r\n  pinMode(pinPulse, INPUT); \r\n}\r\n\r\nvoid loop() {\r\n  DWORD duration;\r\n\r\n  duration = pulseIn(pinPulse, HIGH, 1000000);\r\n  Serial.println(duration);\r\n  delay(1000);\r\n}\r\n</code>\r\n</pre>\r\n</span>\r\n', '2016-09-28 21:05:14', '2016-09-28 21:22:21', 1, 125, 1, 84),
(300, 6, '*', 'sqrt() and sq()', '', 'sqrt/', 'Reference/sqrt/', '<h1>sqrt() and sq()</h1>\r\n<span class="function_description">Calculate the square root and square of a number.</span>\r\n<span class="function_syntax">\r\n<pre>\r\n<code class="c">y = sqrt(x);\r\ny = sq(x);\r\n</code></pre>\r\n</span>\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">x</span>\r\n        <span class="function_parameters_param_description">the number, any data type</span>\r\n    </span>\r\n</span>\r\n\r\n<span class="function_returns">\r\nthe number''s square root (float),<br/>\r\nthe number''s square (float)\r\n</span> ', '2016-07-04 17:08:23', '2016-09-28 21:03:12', 1322, 109, 1, 84),
(381, 6, '*', 'lowByte() and highByte()', '', 'lowbyte/', 'Reference/lowbyte/', '<h1>lowByte() and highByte()</h1>\r\n<span class="function_description">\r\nReturns low and high bytes of word.</span>\r\n</span>\r\n\r\n<span class="function_syntax">\r\n<pre>\r\n<code class="c">b = lowByte(val);  // returns lower byte\r\nb = highByte(val); // returns higher byte\r\n</code></pre>\r\n</span>', '2016-09-28 20:57:30', '2016-09-28 20:57:34', 1, 114, 1, 84),
(380, 6, '*', 'radians()', '', 'radians/', 'Reference/radians/', '<h1>radians() and degrees()</h1>\r\n<span class="function_description">\r\nConverts radians to degrees and vice versa.</span>\r\n\r\n<span class="function_description_more">\r\nradians(x) is same as x * &pi; / 180, degrees(x) is same as x * 180 / &pi;</span>\r\n\r\n<span class="function_syntax">\r\n<pre>\r\n<code class="c">y = radians(x);\r\ny = degrees(x);\r\n</code></pre>\r\n</span>  \r\n\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">x</span>\r\n        <span class="function_parameters_param_description">a float number</span>\r\n    </span>\r\n</span>\r\n\r\n', '2016-09-28 20:54:02', '2016-09-28 20:54:02', 1, 112, 1, 84),
(379, 6, '*', 'round()', '', 'round/', 'Reference/round/', '<h1>round()</h1>\r\n<span class="function_description">\r\nRounts float to intefer.</span>\r\n\r\n<span class="function_syntax">\r\n<pre>\r\n<code class="c">y = round(x);\r\n</code></pre>\r\n</span>  \r\n\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">x</span>\r\n        <span class="function_parameters_param_description">a float number to be rounded</span>\r\n    </span>\r\n</span>\r\n\r\n<span class="function_returns">\r\nnearest integer (long integer)\r\n</span>\r\n\r\n<span class="function_example">\r\n<pre>\r\n<code class="c">temperatureInt = round(temperatureFloat);\r\n</code></pre>\r\n</span>\r\n', '2016-09-28 20:48:05', '2016-09-28 20:48:05', 1, 111, 1, 84),
(378, 6, '*', 'Bitmask operations', '', 'bitSet/', 'Reference/bitSet/', '<h1>Bitmask operation functions</h1>\r\n<span class="function_description">\r\nOperations on bit masks.</span>\r\n</span>\r\n\r\n<span class="function_syntax">\r\n<pre>\r\n<code class="c">value = bitRead(mask, bit);    // returns 1 if bit is set in the mask, otherwise 0\r\nbitSet(mask, bit);             // sets bit to 1 in the mask\r\nbitClear(mask, bit);           // sets bit to 0 in the mask\r\nbitWrite(mask, bit, bitvalue); // set bit to bitvalue in the mask\r\n</code></pre>\r\n</span>\r\n\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">mask</span>\r\n        <span class="function_parameters_param_description">number representing bit mask (BYTE for 8 bits, WORD for 16 bits or DWORDfor 32 bits)</span>\r\n    </span>\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">bit</span>\r\n        <span class="function_parameters_param_description">bit to deal with (non-negative integer number)</span>\r\n    </span>\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">bitvalue</span>\r\n        <span class="function_parameters_param_description">any expresstion evaluated to TRUE or FALSE</span>\r\n    </span>\r\n</span>\r\n', '2016-09-28 20:41:17', '2016-09-28 20:44:49', 1, 115, 1, 84),
(297, 6, '*', 'constrain()', '', 'constrain/', 'Reference/constrain/', '<h1>constrain()</h1>\r\n<span class="function_description">\r\nConstrains a number to be within a range.</span>\r\n\r\n<span class="function_syntax">\r\n<pre>\r\n<code class="c">y = constrain(x, a, b);\r\n</code></pre>\r\n</span>  \r\n\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">x</span>\r\n        <span class="function_parameters_param_description">the number to constrain, all data types</span>\r\n    </span>\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">a</span>\r\n        <span class="function_parameters_param_description">the lower end of the range, all data types</span>\r\n    </span>\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">b</span>\r\n        <span class="function_parameters_param_description">the lower end of the range, all data types</span>\r\n    </span>\r\n</span>\r\n\r\n<span class="function_returns">\r\nx &mdash; if x is between a and b</br>\r\n\r\na &mdash; if x is less than a</br>\r\n\r\nb &mdash; if x is greater than b</br>\r\n</span>\r\n\r\n<span class="function_example">\r\n<pre>\r\n<code class="c">sensVal = constrain(sensVal, 10, 150); // limits range of sensor values to between 10 and 150 \r\n</code></pre>\r\n</span>\r\n\r\n<span class="function_see_also">\r\n<span class="function_ref">map</span>()\r\n</span>', '2016-07-04 16:50:37', '2016-09-28 20:18:05', 1322, 106, 1, 84),
(377, 6, '*', 'map()', '', 'map/', 'Reference/map/', '<h1>map()</h1>\r\n<span class="function_description">\r\nRe-maps a number from one range to another. That is, a value of fromLow would get mapped to toLow, a value of fromHigh to toHigh, values in-between to values in-between, etc.\r\n</span>\r\n\r\n<span class="function_description_more">\r\nDoes not constrain values to within the range, because out-of-range values are sometimes intended and useful. The <span class="function_ref">constrain</span>() function may be used either before or after this function, if limits to the ranges are desired.\r\n</span>\r\n\r\n<span class="function_syntax">\r\n<pre>\r\n<code class="c">mapped_value = map(value, fromLow, fromHigh, toLow, toHigh);\r\n</code></pre>\r\n</span>  \r\n\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">value</span>\r\n        <span class="function_parameters_param_description">the number to map</span>\r\n    </span>\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">fromLow</span>\r\n        <span class="function_parameters_param_description">the lower bound of the value''s current range</span>\r\n    </span>\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">fromHigh</span>\r\n        <span class="function_parameters_param_description">the upper bound of the value''s current range</span>\r\n    </span>\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">toLow</span>\r\n        <span class="function_parameters_param_description">the lower bound of the value''s target range</span>\r\n    </span>\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">toHigh</span>\r\n        <span class="function_parameters_param_description">the upper bound of the value''s target range</span>\r\n    </span>\r\n</span>\r\n\r\n<span class="function_returns">\r\nThe mapped value.\r\n</span>\r\n\r\n<span class="function_description_more">\r\nNote that the "lower bounds" of either range may be larger or smaller than the "upper bounds" so the map() function may be used to reverse a range of numbers, for example\r\n</span>\r\n\r\n<span class="function_example">\r\n<pre>\r\n<code class="c">y = map(x, 1, 50, 50, 1);</code></pre>\r\n</span>\r\n\r\n<span class="function_description_more">\r\nThe function also handles negative numbers well, so that this example\r\n</span>\r\n\r\n<span class="function_example">\r\n<pre>\r\n<code class="c">y = map(x, 1, 50, 50, -100);\r\n</code></pre>\r\n</span>\r\n\r\n<span class="function_description_more">\r\nis also valid and works well.\r\n</span>\r\n\r\n<span class="function_description_more">\r\nThe map() function uses integer math so will not generate fractions, when the math might indicate that it should do so. Fractional remainders are truncated, and are not rounded or averaged.\r\n</span>\r\n\r\n\r\n<span class="function_example">\r\n<pre>\r\n<code class="c">// Map an analog value to 8 bits (0 to 255)\r\nint val = analogRead(A1);\r\nval = map(val, 0, 1023, 0, 255);\r\nanalogWrite(PWM1, val);\r\n</code></pre>\r\n</span>\r\n\r\n<span class="function_see_also">\r\n<span class="function_ref">constrain</span>()\r\n</san>\r\n', '2016-09-28 20:15:52', '2016-09-28 20:16:18', 1, 107, 1, 84),
(294, 6, '*', 'min()', '', 'min/', 'Reference/min/', '<h1>min()</h1>\r\n<span class="function_description">\r\nCalculates the minimum of two numbers.</span>\r\n</span>\r\n\r\n<span class="function_syntax">\r\n<pre>\r\n<code class="c">z = min(x, y);\r\n</code></pre>\r\n</span>  \r\n\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">x</span>\r\n        <span class="function_parameters_param_description">the first number, any data type</span>\r\n    </span>\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">y</span>\r\n        <span class="function_parameters_param_description">the second number, any data type</span>\r\n    </span>\r\n</span>\r\n\r\n<span class="function_returns">\r\nThe smaller of the two numbers.\r\n</span>\r\n<span class="function_example">\r\n<pre>\r\n<code class="c">sensVal = min(sensVal, 100); // assigns sensVal to the smaller of sensVal or 100\r\n                             // ensuring that it never gets above 100.\r\n</code></pre>\r\n</span>  ', '2016-07-04 16:32:13', '2016-09-28 20:06:22', 1322, 103, 1, 84),
(191, 6, '*', 'zunoSendReport()', '', 'zunoSendReport/', 'Reference/zunoSendReport/', '<h1>zunoSendReport()</h1>\r\n<span class="function_description">\r\nInstruct Z-Uno to send an unsolicited report to the controller.\r\n</span>\r\n<span class="function_description_more">\r\nUsually called in case of an event, i.e. when temperature/luminosity/wind speed/... changes too much or sensor state changes or button pressed.\r\n</span>\r\n<span class="function_description_more">\r\nReports are sent to all devices members of Life Line Association group (group #1). These are unsolicited reports means they are not answers to a corresponding Get command.\r\n</span>\r\n\r\n<span class="function_syntax">\r\n    zunoSendReport(channelNumber)\r\n</span>\r\n\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">channelNumber</span>\r\n        <span class="function_parameters_param_description">Number of channel as defined in <span class="function_ref">ZUNO_SETUP_CHANNELS</span>() staring from 1.</span>\r\n    </span>\r\n</span>\r\n\r\n<span class="function_description_note">\r\nAccording to Z-Wave Plus restrictions, values from Sensor Multilevel channels (defined via <span class="function_ref">ZUNO_SENSOR_MULTILEVEL</span> macro) will not be sent unsolicitedly to Life Line more often than every 30 seconds. At the same time Z-Uno will answer instantly on Sensor Multilevel Get command (solicited report). You can also change this time using <a href="/z-wave/configuration-parameters/">configuration parameter #11</a>. This restriction is not applicable to other channel types.\r\n</span>\r\n\r\n<span class="function_description_note">\r\nIf the sketch have more than one channel of the same type and simple association is used (means set up using Association Command Class) to association Life Line group with the controller, unsolicited reports will be sent only from the first channel of that type. To get all unsolicited reports from Z-Uno a channel association is required (means set up using MultiChannel Association Command Class).\r\n</span>\r\n<span class="function_description_more">\r\nFor example instead of association of Life Line group with node 1 (controller) use association with 1:0 (node 1, channel 0). This will instruct Z-Uno to send MultiChannel encapsulated reports.\r\n</span>\r\n<span class="function_description_more">\r\nThis is 100% Z-Wave Plus compliant. But some (mostly old) controllers might not yet support this behavior.\r\n</span>\r\n\r\n<span class="function_example">\r\n     <pre>\r\n         <code class="c">ZUNO_SETUP_CHANNELS(ZUNO_SENSOR_BINARY(ZUNO_SENSOR_BINARY_TYPE_GENERAL_PURPOSE, getter));\r\n         \r\nvoid setup() {\r\n  ...\r\n}\r\n\r\nvoid loop() {\r\n  if (currentValue != lastValue) {\r\n    lastValue = currentValue;\r\n    zunoSendReport(1);\r\n  }\r\n}\r\n\r\nbyte getter(void) {\r\n    return currentValue;\r\n}\r\n         </code>\r\n     </pre>\r\n </span>\r\n', '2015-08-02 21:03:45', '2016-09-28 19:24:55', 1322, 91, 1, 84),
(86, 6, '*', 'pinMode()', '', 'pinMode/', 'Reference/pinMode/', '<h1>pinMode()</h1>\r\n <span class="function_description">\r\n    Configures the specified pin to behave either as an input or an output.\r\n</span>\r\n<span class="function_syntax">pinMode(pin, mode)</span>\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">pin</span>\r\n        <span class="function_parameters_param_description">the number of the pin whose mode you wish to set</span>\r\n    </span>\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">mode</span>\r\n        <span class="function_parameters_param_description"><span class="function_ref">INPUT</span>, <span class="function_ref">INPUT_PULLUP</span>, <span class="function_ref">OUTPUT</span></span>\r\n    </span>\r\n</span>\r\n<span class="function_returns">\r\nnone\r\n</span>\r\n<span class="function_example">\r\n<pre>\r\n<code class="c">void setup() {\r\n  pinMode(20, OUTPUT);      // sets the digital pin as output\r\n}\r\n\r\nvoid loop() {\r\n  digitalWrite(20, HIGH);       // sets the LED on\r\n  delay(1000);                  // waits for a second\r\n  digitalWrite(20, LOW);        // sets the LED off\r\n  delay(1000);                  // waits for a second\r\n}\r\n</code>\r\n</pre>\r\n</span>', '2015-05-27 10:48:21', '2016-09-28 10:16:20', 1322, 3, 1, 84),
(95, 6, '*', 'digitalRead()', '', 'digitalRead/', 'Reference/digitalRead/', '<h1>digitalRead()</h1> \r\n\r\n<span class="function_description">Reads the value from a specified digital pin, either <span class="function_ref">HIGH</span> or <span class="function_ref">LOW</span></a>.</span>\r\n\r\n<span class="function_description_more">\r\nCheck <a href="/technical/pinout">Z-Uno pinout</a>\r\n</span>\r\n\r\n<span class="function_syntax">digitalRead(pin)</span>\r\n\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">pin</span>\r\n        <span class="function_parameters_param_description">the number of the digital pin you want to read </span>\r\n    </span>\r\n</span>\r\n\r\n<span class="function_returns">\r\n<span class="function_ref">HIGH</span> or <span class="function_ref">LOW</span>\r\n</span>\r\n\r\n<span class="function_sideeffect">\r\nIf pin is not in <span class="function_ref">INPUT</span> or <span class="function_ref">INPUT_PULLUP</span> mode, automatically changes pin mode to INPUT as <span class="function_ref">pinMode</span>(pin, INPUT) was called.\r\n</span>\r\n\r\n<span class="function_example">\r\n<pre>\r\n<code class="c">void setup() {\r\n  pinMode(13, OUTPUT);      // sets the digital pin 13 as output\r\n  pinMode(7, INPUT);        // sets the digital pin 7 as input\r\n}\r\n\r\nvoid loop() {\r\n  BYTE val;\r\n  \r\n  val = digitalRead(7);     // read the input pin\r\n  digitalWrite(13, val);    // sets the LED to the button''s value\r\n}\r\n</code></pre></span>\r\n\r\n<span class="function_description_note">\r\nZ-Uno pin control is pretty slow, typical digitalRead() call will take itself about 1 ms. Hence it is not possible to do fast pin operations except on pins 9&ndash;16 that allows special "fast mode". To use this fast mode one need to specify pin number via <span class="function_ref">s_pin</span> variable type. Z-Uno compiler will detect it and use fast mode for such digitalRead() calls. In this case the call will take about 1&ndash;2 μs for indirect call (via function) and 0.5 μs for direct (see example below).\r\n</span>\r\n\r\n<span class="function_example">\r\n<pre>\r\n<code class="c">{literal}s_pin my_pin = 9;\r\n\r\nvoid setup() {\r\n  pinMode(my_pin, INPUT);\r\n}\r\n\r\n// timeout and return are in loop periods = 10 us + execution time of digitalRead + time of loop and compatison operands execution\r\n// it should be measured on a particular version of Z-Uno s/w (might change from version to version)\r\nint readPulseLength(s_pin pin, int timeoutCount) {\r\n  int __timeoutCount;\r\n  pinMode(pin, INPUT);\r\n\r\n  __timeoutCount = timeoutCount;\r\n  while(digitalRead(pin) != HIGH && timeoutCount-- > 0) {\r\n    // wait for HIGH state (pulse start) or timeout\r\n    delayMicroseconds(10);\r\n  }\r\n  if (timeoutCount == 0) return -1;\r\n\r\n  __timeoutCount = timeoutCount;\r\n  while(digitalRead(pin) != LOW && timeoutCount-- > 0) {\r\n    // wait for LOW state (pulse end) or timeout\r\n    delayMicroseconds(10);\r\n  }\r\n  if (timeoutCount == 0) return -1;\r\n  else return timeoutCount * 10;\r\n}\r\n\r\nvoid loop() {\r\n  byte another_pin;\r\n  int length;\r\n\r\n  byte result = digitalRead(my_pin);       // direct call is possible\r\n    \r\n  another_pin = 10;\r\n  length = readPulseLength(another_pin);   // or call via function\r\n}\r\n{/literal}</code>\r\n</pre>\r\n</span>  \r\n', '2015-06-01 13:14:47', '2016-09-28 10:06:28', 1322, 7, 1, 84);
INSERT INTO `site_page` (`id`, `domain_id`, `route`, `name`, `title`, `url`, `full_url`, `content`, `create_datetime`, `update_datetime`, `create_contact_id`, `sort`, `status`, `parent_id`) VALUES
(92, 6, '*', 'digitalWrite()', '', 'digitalWrite/', 'Reference/digitalWrite/', '<h1>digitalWrite()</h1>\r\n<span class="function_description">\r\nWrite a  <span class="function_ref">HIGH</span>,  or a  <span class="function_ref">LOW</span>,  value to a digital pin.\r\n</span>\r\n\r\n<span class="function_description_more">\r\nIf the pin has been configured as an OUTPUT with <span class="function_ref">pinMode</span>, its voltage will be set 3.3V for HIGH, GROUND for LOW.\r\n</span>\r\n\r\n<span class="function_description_more">\r\nIf the pin is configured as an INPUT, digitalWrite() will enable (HIGH) or disable (LOW) the internal pullup on the input pin. It is recommended to set the pinMode() to INPUT_PULLUP to enable the internal pull-up resistor.\r\n</span>\r\n\r\n<span class="function_description_more">\r\nCheck <a href="/technical/pinout">Z-Uno pinout</a>\r\n</span>\r\n\r\n<span class="function_syntax">digitalWrite(pin, value)</span>\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">pin</span>\r\n        <span class="function_parameters_param_description">the pin number</span>\r\n    </span>\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">value</span>\r\n        <span class="function_parameters_param_description">HIGH or LOW</span>\r\n    </span>\r\n</span>\r\n<span class="function_returns">\r\nnone\r\n</span>\r\n\r\n<span class="function_sideeffect">\r\nAutomatically changes pin mode to OUTPUT as pinMode(pin, OUTPUT) was called.\r\n</span>\r\n\r\n<span class="function_example">\r\n<pre>\r\n<code class="c">void setup() {\r\n    pinMode(8, OUTPUT);      // sets the digital pin as output\r\n}\r\n\r\nvoid loop() {\r\n    digitalWrite(8, HIGH);        // sets the LED on\r\n    delayMicros(4000);                  // waits for four seconds\r\n    digitalWrite(8, LOW);         // sets the LED off\r\n    delay(4000);                  // waits for four seconds\r\n}\r\n</code></pre></span>  \r\n\r\n<span class="function_description_note">\r\nZ-Uno pin control is pretty slow, typical digitalWrite() call will take itself about 1 ms. Hence it is not possible to do fast pin operations except on pins 9&ndash;16 that allows special "fast mode". To use this fast mode one need to specify pin number via <span class="function_ref">s_pin</span> variable type. Z-Uno compiler will detect it and use fast mode for such digitalWrite() calls. In this case the call will take about 1&ndash;2 μs for indirect call (via function) and 0.5 μs for direct (see example below).\r\n</span>\r\n\r\n<span class="function_example">\r\n<pre>\r\n<code class="c">s_pin my_pin = 9;\r\n\r\nvoid setup() {\r\n  pinMode(my_pin, OUTPUT);\r\n}	\r\n\r\nvoid blinkWithPin(s_pin pin) {\r\n  pinMode(pin, OUTPUT);\r\n  digitalWrite(pin, 0);\r\n  delayMicroseconds(100);\r\n  digitalWrite(pin, 1);\r\n  delayMicroseconds(100);\r\n  digitalWrite(pin, 0);\r\n}\r\n\r\nvoid loop() {\r\n  byte another_pin;\r\n  digitalWrite(my_pin, 0);    // direct call is possible\r\n    \r\n  another_pin = 10;\r\n  blinkWithPin(another_pin);  // or call via function\r\n}\r\n</code>\r\n</pre>\r\n</span>  \r\n', '2015-05-30 14:26:19', '2016-09-28 10:06:03', 1322, 4, 1, 84),
(374, 6, '*', 's_pin', '', 's_pin/', 'Reference/s_pin/', '<h1>s_pin</h1>\r\n\r\n<span class="function_description">Defines pin number for fast pin mode operations.</span>\r\n\r\n<span class="function_description_more"><i>s_pin</i> data type is like an integer constant, but compiler will handle it to optimize <span class="function_ref">digitalWrite</span>() and <span class="function_ref">digitalRead</span>() to make faster operations on pins 9&ndash;16.</span>\r\n\r\n<span class="function_description_more">Direct reference will take about 0.5 μs, while indirect will take about 1-2 μs. See examples for <span class="function_ref">digitalWrite</span>() and <span class="function_ref">digitalRead</span>().</span>\r\n\r\n<span class="function_syntax">\r\n<pre>\r\n<code class="c">s_pin var = number;\r\n</code></pre>\r\n</span>', '2016-09-28 10:02:43', '2016-09-28 10:03:57', 1, 124, 1, 84),
(366, 6, '*', 'NZRAM.read()', '', 'read/', 'Reference/NZRAM/read/', '<h4>NZRAM.read()</h4>\r\n\r\n<span class="function_description">\r\nRead value from specified address in non-zero memory.\r\n</span>\r\n<span class="function_syntax">byte NZRAM.read(byte address)</span>\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">address</span>\r\n        <span class="function_parameters_param_description">address in non-zero memory (byte)</span>\r\n    </span>\r\n</span>\r\n<span class="function_returns">\r\nvalue at address (byte)\r\n</span>\r\n     ', '2016-08-24 08:40:17', '2016-09-23 23:26:12', 1, 4, 1, 361),
(365, 6, '*', 'NZRAM.write()', '', 'write/', 'Reference/NZRAM/write/', '<h4>NZRAM.write()</h4>\r\n\r\n<span class="function_description">\r\nWrite new value in non-zero memory.\r\n</span>\r\n<span class="function_syntax">void NZRAM.write(byte address, byte value)</span>\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">address</span>\r\n        <span class="function_parameters_param_description">address in non-zero memory (byte)</span>\r\n    </span>\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">value</span>\r\n        <span class="function_parameters_param_description">to write (byte)</span>\r\n    </span>\r\n</span>\r\n<span class="function_returns">\r\nnone\r\n</span>\r\n   ', '2016-08-24 08:38:29', '2016-09-23 23:26:01', 1, 3, 1, 361),
(364, 6, '*', 'NZRAM.get()', '', 'get/', 'Reference/NZRAM/get/', '<h4>NZRAM.get()</h4>\r\n\r\n<span class="function_description">\r\nRead from non-zero memory into user specified memory buffer.\r\n</span>\r\n<span class="function_syntax">word NZRAM.get(byte address, void * value, word val_size)</span>\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">address</span>\r\n        <span class="function_parameters_param_description">address in non-zero memory (byte)</span>\r\n    </span>\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">value</span>\r\n        <span class="function_parameters_param_description">pointer to the buffer (void *)</span>\r\n    </span>\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">val_size</span>\r\n        <span class="function_parameters_param_description">number of bytes to read (word)</span>\r\n    </span>\r\n</span>\r\n<span class="function_returns">\r\nnumber of bytes read (word)\r\n</span>\r\n  ', '2016-08-24 08:34:14', '2016-09-23 23:25:46', 1, 2, 1, 361),
(362, 6, '*', 'NZRAM.put()', '', 'put/', 'Reference/NZRAM/put/', '<h4>NZRAM.put()</h4>\r\n\r\n<span class="function_description">\r\nCopy from memory buffer into non-zero memory.\r\n</span>\r\n<span class="function_syntax">word NZRAM.put(byte address, void * value, word val_size)</span>\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">address</span>\r\n        <span class="function_parameters_param_description">address in non-zero memory (byte)</span>\r\n    </span>\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">value</span>\r\n        <span class="function_parameters_param_description">pointer to the buffer (void *)</span>\r\n    </span>\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">val_size</span>\r\n        <span class="function_parameters_param_description">number of bytes to write (word)</span>\r\n    </span>\r\n</span>\r\n<span class="function_returns">\r\nnumber of bytes written (word)\r\n</span>\r\n  ', '2016-08-24 08:33:08', '2016-09-23 23:25:32', 1, 1, 1, 361),
(360, 6, '*', 'EEPROM.read()', '', 'read/', 'Reference/EEPROM/read/', '<h4>EEPROM.read()</h4>\r\n\r\n<span class="function_description">\r\nRead value from specified address in EEPROM.\r\n</span>\r\n<span class="function_syntax">byte EEPROM.read(dword address)</span>\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">address</span>\r\n        <span class="function_parameters_param_description">address in EEPROM (dword)</span>\r\n    </span>\r\n</span>\r\n<span class="function_returns">\r\nvalue at address (byte)\r\n</span>\r\n    ', '2016-08-24 04:40:37', '2016-09-23 23:24:56', 1, 5, 1, 354),
(358, 6, '*', 'EEPROM.write()', '', 'write/', 'Reference/EEPROM/write/', '<h4>EEPROM.write()</h4>\r\n\r\n<span class="function_description">\r\nWrite new value.\r\n</span>\r\n<span class="function_syntax">void EEPROM.write(dword address, byte value)</span>\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">address</span>\r\n        <span class="function_parameters_param_description">address in EEPROM (dword)</span>\r\n    </span>\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">value</span>\r\n        <span class="function_parameters_param_description">to write (byte)</span>\r\n    </span>\r\n</span>\r\n<span class="function_returns">\r\nnone\r\n</span>\r\n  ', '2016-08-24 04:39:27', '2016-09-23 23:24:40', 1, 4, 1, 354),
(357, 6, '*', 'EEPROM.update()', '', 'update/', 'Reference/EEPROM/update/', '<h4>EEPROM.update()</h4>\r\n\r\n<span class="function_description">\r\nUpdate value at a defined address: write new value only if value in EEPROM differs.\r\n</span>\r\n<span class="function_description_note">\r\nIt is preferable to <span class="function_ref" link="EEPROM/write">write</span>() because it lowernumber of writes in the EEPROM making it''s life longer\r\n</span>\r\n<span class="function_syntax">void EEPROM.update(dword address, byte value)</span>\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">address</span>\r\n        <span class="function_parameters_param_description">address in EEPROM (dword)</span>\r\n    </span>\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">value</span>\r\n        <span class="function_parameters_param_description">to update (byte)</span>\r\n    </span>\r\n</span>\r\n<span class="function_returns">\r\nnone\r\n</span>\r\n  ', '2016-08-24 04:38:30', '2016-09-23 23:24:29', 1, 3, 1, 354),
(368, 6, '*', 'Trigonometric and Hyperbolic functions', '', 'sin/', 'Reference/sin/', '<h1>Trigonometric and Hyperbolic functions</h1>\r\n<span class="function_description">\r\nBasic trigonometric functions and their inverse functions.</span>\r\n</span>\r\n\r\n<span class="function_syntax">\r\n<pre>\r\n<code class="c">value = sin(x);     // sine\r\nvalue = cos(x);     // cosine\r\nvalue = tan(x);     // tangent\r\nvalue = cot(x);     // cotangent, 1/tan(x)\r\nvalue = asin(x);    // arcsine\r\nvalue = acos(x);    // arccosine\r\nvalue = atan(x);    // arctangent\r\nvalue = atan(x, y); // arctangent, atan(y/x)\r\nvalue = sinh(x);    // hyperbolic sine\r\nvalue = cosh(x);    // hyperbolic cosine\r\nvalue = tanh(x);    // hyperbolic tangent\r\n</code></pre>\r\n</span>\r\n\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">x, y</span>\r\n        <span class="function_parameters_param_description">arguments (float)</span>\r\n    </span>\r\n</span>\r\n\r\n<span class="function_returns">\r\nThe result is a float value\r\n</span> ', '2016-08-24 11:14:50', '2016-08-24 11:14:50', 1, 113, 1, 84),
(343, 6, '*', '1-Wire Library', '', '1-Wire/', 'Reference/1-Wire/', '<h4>1-Wire Library</h4>\r\n\r\n<span class="function_description">\r\n    Support of 1-Wire communication protocol.\r\n    \r\n    <ul>\r\n        <li><span class="function_ref" link="1-Wire/read">OneWire.read</span>()</li>\r\n        <li><span class="function_ref" link="1-Wire/write">OneWire.write</span>()</li>\r\n        <li><span class="function_ref" link="1-Wire/select">OneWire.select</span>()</li>\r\n        <li><span class="function_ref" link="1-Wire/reset">OneWire.reset</span>()</li>\r\n        <li><span class="function_ref" link="1-Wire/skip">OneWire.skip</span>()</li>\r\n        <li><span class="function_ref" link="1-Wire/depower">OneWire.depower</span>()</li>\r\n        <li><span class="function_ref" link="1-Wire/readROM">OneWire.readROM</span>()</li>\r\n        <li><span class="function_ref" link="1-Wire/crc8">OneWire.crc8</span>()</li>\r\n    </ul>\r\n    \r\n    See examples <a href="/examples/1-wire-ds18b20-temperature-sensor/">DS18B20.</a>\r\n</span>\r\n\r\n<span class="function_description_more">Check <a href="https://github.com/Z-Wave-Me/Z-Uno-Core/blob/uCXX_Cores/hardware/arduino/zuno/libraries/OneWire/OneWire.h">OneWire.h</a> for more info.</span>\r\n\r\n<span class="function_description_note">1-Wire can work only on Z-Uno pins 9-16</span>\r\n\r\n', '2016-08-24 03:37:39', '2016-08-24 05:03:07', 1, 120, 1, 84),
(345, 6, '*', 'OneWire.write()', '', 'write/', 'Reference/1-Wire/write/', '<h4>OneWire.write()</h4>\r\n\r\n<span class="function_description">\r\n    \r\n</span>\r\n<span class="function_syntax">write(v, power)</span>\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">v</span>\r\n        <span class="function_parameters_param_description">value to send (byte)</span>\r\n    </span>\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">power</span>\r\n        <span class="function_parameters_param_description">(byte, default = 1)</span>\r\n    </span>\r\n</span>\r\n<span class="function_returns">\r\nnone\r\n</span>\r\n', '2016-08-24 03:47:47', '2016-08-24 04:12:39', 1, 2, 1, 343),
(353, 6, '*', 'OneWire.depower()', '', 'depower/', 'Reference/1-Wire/depower/', '<h4>OneWire.depower()</h4>\r\n\r\n<span class="function_description">\r\n</span>\r\n<span class="function_syntax">OneWire.depower()</span>\r\n<span class="function_parameters">No parameters</span>\r\n<span class="function_returns">\r\nNone\r\n</span> ', '2016-08-24 04:02:23', '2016-08-24 04:02:23', 1, 8, 1, 343),
(351, 6, '*', 'OneWire.skip()', '', 'skip/', 'Reference/1-Wire/skip/', ' <h4>OneWire.skip()</h4>\r\n\r\n<span class="function_description">\r\n</span>\r\n<span class="function_syntax">OneWire.skip()</span>\r\n<span class="function_parameters">No parameters</span>\r\n<span class="function_returns">\r\nNone\r\n</span>\r\n	byte reset(void);\r\n	void write(byte v, byte power = 1); \r\n	byte read(); \r\n	void select(byte * rom);\r\n	void skip();\r\n	void depower();\r\n	void readROM(byte * rom);\r\n	byte crc8(byte *addr, byte len); ', '2016-08-24 04:01:33', '2016-08-24 04:01:33', 1, 7, 1, 343),
(350, 6, '*', 'OneWire.read()', '', 'read/', 'Reference/1-Wire/read/', ' <h4>OneWire.read()</h4>\r\n\r\n<span class="function_description">\r\n    Read byte from bus\r\n</span>\r\n<span class="function_syntax">OneWire.read()</span>\r\n<span class="function_parameters">No parameters</span>\r\n<span class="function_returns">\r\nRead value (byte)\r\n</span>\r\n', '2016-08-24 03:59:54', '2016-08-24 03:59:54', 1, 6, 1, 343),
(349, 6, '*', 'OneWire.crc8()', '', 'crc8/', 'Reference/1-Wire/crc8/', '<h4>OneWire.crc8()</h4>\r\n\r\n<span class="function_description">\r\n    \r\n</span>\r\n<span class="function_syntax">OneWire.crc8(byte * addr)</span>\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">addr</span>\r\n        <span class="function_parameters_param_description">(byte *)</span>\r\n    </span>\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">len</span>\r\n        <span class="function_parameters_param_description">data length (byte)</span>\r\n    </span>\r\n</span>\r\n<span class="function_returns">\r\nCRC8 calculated for sequence of bytes\r\n</span>  ', '2016-08-24 03:56:13', '2016-08-24 03:56:13', 1, 5, 1, 343),
(347, 6, '*', 'OneWire.readROM()', '', 'readROM/', 'Reference/1-Wire/readROM/', '<h4>OneWire.readROM()</h4>\r\n\r\n<span class="function_description">\r\n    \r\n</span>\r\n<span class="function_syntax">OneWire.readROM(byte * rom)</span>\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">room</span>\r\n        <span class="function_parameters_param_description">(byte *)</span>\r\n    </span>\r\n</span>\r\n<span class="function_returns">\r\nnone\r\n</span>', '2016-08-24 03:50:38', '2016-08-24 03:50:38', 1, 4, 1, 343),
(346, 6, '*', 'OneWire.select()', '', 'select/', 'Reference/1-Wire/select/', '<h4>OneWire.select()</h4>\r\n\r\n<span class="function_description">\r\n    \r\n</span>\r\n<span class="function_syntax">OneWire.select(byte * rom)</span>\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">room</span>\r\n        <span class="function_parameters_param_description">(byte *)</span>\r\n    </span>\r\n</span>\r\n<span class="function_returns">\r\nnone\r\n</span>\r\n', '2016-08-24 03:49:17', '2016-08-24 03:49:17', 1, 3, 1, 343),
(344, 6, '*', 'OnWire.reset()', '', 'reset/', 'Reference/1-Wire/reset/', '<h4>OnWire.reset()</h4>\r\n\r\n<span class="function_description">\r\n    \r\n</span>\r\n<span class="function_syntax">OnWire.reset()</span>\r\n<span class="function_parameters">\r\nNo parameters\r\n</span>\r\n<span class="function_returns">\r\nbyte\r\n</span>\r\n', '2016-08-24 03:45:28', '2016-08-24 03:45:39', 1, 1, 1, 343),
(332, 6, '*', 'Read', '', 'Read/', 'Reference/Wire/Read/', '<h4>Wire.read()</h4> \r\n<span class="function_description">\r\n  Reads a byte that was transmitted from a slave device to a master after a call to requestFrom() or was transmitted from a master to a slave. read() inherits from the Stream utility class.\r\n</span>\r\n<span class="function_syntax">\r\n    Wire.read()\r\n</span>\r\n<span class="function_parameters">\r\n    None\r\n</span>\r\n<span class="function_returns">\r\n    The next byte receive\r\n</span>\r\n<span class="function_example">\r\n    <pre>\r\n        <code class="c">#include &lt;Wire.h&gt;\r\n\r\nvoid setup() {\r\n  Wire.begin();              // join i2c bus (address optional for master)\r\n  Serial.begin();            // start serial for output\r\n}\r\n\r\nvoid loop()\r\n{\r\n  Wire.requestFrom(2, 6);    // request 6 bytes from slave device #2\r\n\r\n  while(Wire.available()) {  // slave may send less than requested\r\n    char c = Wire.read();    // receive a byte as character\r\n    Serial.print(c);         // print the character\r\n  }\r\n\r\n  delay(500);\r\n}\r\n</code>\r\n</pre>\r\n</span>', '2016-07-14 15:17:06', '2016-08-24 03:13:06', 1322, 7, 1, 324),
(330, 6, '*', 'Write', '', 'Write/', 'Reference/Wire/Write/', '<h2>write()</h2>\r\n    <span class="function_description">\r\nWrites binary data to the serial port. This data is sent as a byte or series of bytes; to send the characters representing the digits of a number use the <a href="http://z-uno.z-wave.me/Reference/Serial/Print/">Print()</a> function instead.     </span>\r\n</span>\r\n<span class="function_syntax"><pre><code lang="c">Wire.write(value)\r\nWire.write(string)\r\nWire.write(data, length)\r\n</code></pre></span>\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">value</span>\r\n        <span class="function_parameters_param_description">a value to send as a single byte</br></span>\r\n    </span>    \r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">string</span>\r\n        <span class="function_parameters_param_description">a value to send as a series of bytes</br></span>\r\n    </span>\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">data</span>\r\n        <span class="function_parameters_param_description">an array to send as bytes</span>\r\n    </span>\r\n    <span class="function_parameters_param">    \r\n        <span class="function_parameters_param_name">length</span>\r\n        <span class="function_parameters_param_description">the number of bytes to transmit</span>\r\n    </span>\r\n    </span>\r\n</span>\r\n<span class="function_returns">\r\nbyte: write() will return the number of bytes written, though reading that number is optional\r\n</span>\r\n<span class="function_example">\r\n<pre>\r\n<code class="c">#include "Wire.h"\r\n\r\nbyte val = 0;\r\n\r\nvoid setup() {\r\n  Wire.begin(); // join i2c bus\r\n}\r\n\r\nvoid loop() {\r\n  Wire.beginTransmission(44); // transmit to device #44 (0x2c)\r\n                              // device address is specified in datasheet\r\n  Wire.write(val);            // sends value byte  \r\n  Wire.endTransmission();     // stop transmitting\r\n\r\n  val++;           // increment value\r\n  if (val == 64) { // if reached 64th position (max)\r\n    val = 0;       // start over from lowest value\r\n  }\r\n  delay(500);\r\n}\r\n</code></pre>\r\n</span>  ', '2016-07-14 15:09:55', '2016-08-24 03:05:30', 1322, 5, 1, 324),
(285, 6, '*', 'Serial', '', 'Serial/', 'Reference/Serial/', '<h1>Serial</h1>\r\n<span class="function_description">Used for communication between the Z-Uno board and another microcontroller or a computer via UART or USB.</span>\r\n<span class="function_description_more">Z-Uno boards have the following serial interfaces:\r\n<ul>\r\n    <li>Serial &mdash; USB port</li>\r\n    <li>Serial0 &mdash; UART on TX0 and RX0 pins</li>\r\n    <li>Serial1 &mdash; UART on TX1 and RX1 pins</li>\r\n</ul>\r\n</span>\r\n\r\n<span class="function_description_more">All Serial ports have the following methods supported:\r\n<ul>\r\n    <li><span class="function_ref" link="Serial/begin">begin</a>()</li>\r\n    <li><span class="function_ref" link="Serial/end">end</a>()</li>\r\n    <li><span class="function_ref" link="Serial/available">available</a>()</li>\r\n    <li><span class="function_ref" link="Serial/peek">peek</a>()</li>\r\n    <li><span class="function_ref" link="Serial/read">read</a>()</li>\r\n    <li><span class="function_ref" link="Serial/write">write</a>()</li>\r\n    <li><span class="function_ref" link="Serial/flush">flush</a>()</li>\r\n    <li><span class="function_ref" link="Serial/print">print</a>()</li>\r\n    <li><span class="function_ref" link="Serial/println">println</a>()</li>\r\n    <li><span class="function_ref" link="Serial/setTimeout">setTimeout</a>()</li>\r\n    <li><span class="function_ref" link="Serial/find">find</a>()</li>\r\n    <li><span class="function_ref" link="Serial/findUntil">findUntil</a>()</li>\r\n    <li><span class="function_ref" link="Serial/parseInt">parseInt</a>()</li>\r\n    <li><span class="function_ref" link="Serial/parseFloat">parseFloat</a>()</li>\r\n    <li><span class="function_ref" link="Serial/readBytes">readBytes</a>()</li>\r\n    <li><span class="function_ref" link="Serial/readBytesUntil">readBytesUntil</a>()</li>\r\n</ul>\r\n</span>', '2016-07-04 12:19:13', '2016-08-24 02:56:36', 1322, 117, 1, 84),
(299, 6, '*', 'pow(), exp(), log(), log10()', '', 'pow/', 'Reference/pow/', '<h1>pow(), exp(), log(), log10()</h1>\r\n<span class="function_description">\r\nCalculates the value of a number raised to a power or logarithm of a value. pow() can be used to raise a number to a fractional power. This is useful for generating exponential mapping of values or curves.</span>\r\n</span>\r\n\r\n<span class="function_syntax">\r\n<pre>\r\n<code class="c">value = pow(base, exponent);\r\nvalue = exp(exponent);\r\nexponent = log(value);\r\nexponent = log10(value);\r\n</code></pre>\r\n</span>\r\n\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">base</span>\r\n        <span class="function_parameters_param_description">the number (float)</span>\r\n    </span>\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">exponent</span>\r\n        <span class="function_parameters_param_description">the power to which the base is raised (float)</span>\r\n    </span>\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">value</span>\r\n        <span class="function_parameters_param_description">the base rised in power of exponent (float)</span>\r\n    </span>\r\n</span>\r\n\r\n<span class="function_returns">\r\nThe result of the exponentiation or logarithm (float)\r\n</span>', '2016-07-04 17:05:13', '2016-08-24 01:44:13', 1322, 108, 1, 84),
(295, 6, '*', 'max()', '', 'max/', 'Reference/max/', '<h1>max()</h1>\r\n<span class="function_description">\r\nCalculates the maximum of two numbers.</span>\r\n\r\n<span class="function_syntax">\r\n<pre>\r\n<code class="c">z = max(x, y);\r\n</code></pre>\r\n</span>  \r\n\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">x</span>\r\n        <span class="function_parameters_param_description">the first number, any data type</span>\r\n    </span>\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">y</span>\r\n        <span class="function_parameters_param_description">the second number, any data type</span>\r\n    </span>\r\n</span>\r\n\r\n<span class="function_returns">\r\nThe larger of the two numbers.\r\n</span>\r\n\r\n<span class="function_example">\r\n<pre>\r\n<code class="c">sensVal = max(sensVal, 20); // assigns sensVal to the bigger of sensVal or 20\r\n                            // ensuring that it never gets below 20.\r\n</code></pre>\r\n</span>   ', '2016-07-04 16:36:56', '2016-08-24 01:15:49', 1322, 104, 1, 84),
(338, 6, '*', 'delayMicroseconds()', '', 'delaymicroseconds/', 'Reference/delaymicroseconds/', '<h1>delayMicroseconds()</h1>\r\n<span class="function_description">\r\n    Pauses the program for the amount of time (in microseconds) specified as parameter (there are 1 000 000 microseconds in a second).\r\n    In contrast to <span class="function_ref">delay</span>() function, delayMicroseconds() will completelly block Z-Uno and prevent all functions except for RF packets capturing to operate.\r\n</span>\r\n    \r\n<span class="function_description_note">\r\nThis function have no limitation to use in getters and setters.\r\n</span>\r\n\r\n<span class="function_syntax">delayMicroseconds(us)</span>\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">us</span>\r\n        <span class="function_parameters_param_description">the number of microseconds to pause</span>\r\n    </span>\r\n</span>\r\n<span class="function_returns">\r\nnone\r\n</span>\r\n<span class="function_example">\r\n<pre>\r\n<code class="c">void setup() {\r\n  pinMode(20, OUTPUT);          // sets the digital pin as output\r\n}\r\n\r\nvoid loop() {\r\n  digitalWrite(20, HIGH);       // sets the LED on\r\n  delayMicroseconds(500);       // waits for a second\r\n  digitalWrite(20, LOW);        // sets the LED off\r\n  delayMicroseconds(100);       // waits for a second\r\n}\r\n</code></pre>\r\n</span>', '2016-08-16 03:18:48', '2016-08-24 01:14:00', 1, 77, 1, 84),
(264, 6, '*', 'millis()', '', 'millis/', 'Reference/millis/', '<h1>millis()</h1>\r\n<span class="function_description">\r\n    Returns the number of milliseconds since the Z-Uno board began running the current program.\r\n</span>\r\n<span class="function_syntax">millis()</span>\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">none</span>\r\n        <span class="function_parameters_param_description"></span>\r\n    </span>\r\n</span>\r\n<span class="function_returns">\r\nNumber of milliseconds since the program started (unsigned long)\r\n</span>\r\n<span class="function_example">\r\n<pre>\r\n<code class="c">void setup() {\r\n  Serial.begin();\r\n}\r\n\r\nvoid loop() {\r\n  Serial.println(millis());\r\n  delay(1000);\r\n}\r\n</code></pre>\r\n</span>', '2016-06-15 14:30:53', '2016-08-24 01:10:05', 1322, 78, 1, 84),
(163, 6, '*', 'INPUT', '', 'INPUT/', 'Reference/INPUT/', '<h1>Pins configured as INPUT</h1>\r\n<span class="function_description">\r\n<p>Pins configured as INPUT with <span class="function_ref">pinMode</span>() are said to be in a high-impedance state. Pins configured as INPUT make extremely small demands on the circuit that they are sampling, equivalent to a series resistor of 100 MΩ in front of the pin. This makes them useful for reading a sensor.\r\n</span>\r\n\r\n<span class="function_description_more">\r\nIf you have your pin configured as an INPUT, and are reading a switch, when the switch is in the open state the input pin will be "floating", resulting in unpredictable results. In order to assure a proper reading when the switch is open, a pull-up or pull-down resistor must be used. The purpose of this resistor is to pull the pin to a known state when the switch is open. A 10 KΩ resistor is usually chosen, as it is a low enough value to reliably prevent a floating input, and at the same time a high enough value to not draw too much current when the switch is closed.\r\n</span>\r\n\r\n<span class="function_description_more">\r\nIf a pull-down resistor is used, the input pin will be <span class="function_ref">LOW</span> when the switch is open and <span class="function_ref">HIGH</span> when the switch is closed.\r\n</span>\r\n\r\n<span class="function_description_more">\r\nIf a pull-up resistor is used, the input pin will be HIGH when the switch is open and LOW when the switch is closed\r\n</span>\r\n\r\n<span class="function_description_more">\r\nInstead of using pull-up resistors one can use <span class="function_ref">INPUT_PULLUP</span> mode.\r\n</span>\r\n\r\n<span class="function_description_note">Pins configured as inputs with either INPUT or INPUT_PULLUP can be damaged or destroyed if they are connected to voltages below ground (negative voltages) or above the positive power rail (3.3V).</span>\r\n', '2015-06-10 22:36:44', '2016-08-23 23:36:11', 1322, 51, 1, 84),
(341, 6, '*', 'INPUT_PULLUP', '', 'input_pullup/', 'Reference/input_pullup/', '<h1>Pins configured as INPUT_PULLUP</h1>\r\n<span class="function_description">\r\n<p>Pins configured as INPUT_PULLUP with <span class="function_ref">pinMode</span>() are turned in the same state as for <span class="function_ref">INPUT</span> mode, but internal 20 kΩ pull-up resistor is enabled. This prevents floating when nothing is connected to the pin: in such state pin will be in <span class="function_ref">HIGH</span> state. This is same as using external pull-up resistor and INPUT mode.\r\n</span>\r\n\r\n<span class="function_description_note">Pins configured as inputs with either INPUT or INPUT_PULLUP can be damaged or destroyed if they are connected to voltages below ground (negative voltages) or above the positive power rail (3.3V).</span>\r\n', '2016-08-23 23:33:44', '2016-08-23 23:33:44', 1, 52, 1, 84),
(164, 6, '*', 'OUTPUT', '', 'OUTPUT/', 'Reference/OUTPUT/', '<h1>Pins configured as OUTPUT</h1>\r\n<span class="function_description">\r\nPins configured as OUTPUT with <span class="function_ref">pinMode</span>() are said to be in a low-impedance state. This means that they can provide a substantial amount of current to other circuits. This makes them useful for powering LEDs because LEDs typically use less than 16 mA (see <a href="/technical/">electrical characteristics</a> for more info on pins max current). Loads greater than 16 mA (e.g. motors) will require a transistor or other interface circuitry.\r\n</span>\r\n\r\n<span class="function_description_note">\r\nPins configured as outputs can be damaged or destroyed if they are connected to either the ground or positive power rails.\r\n</span>', '2015-06-10 22:41:30', '2016-08-23 23:13:54', 1322, 53, 1, 84),
(162, 6, '*', 'LOW', '', 'LOW/', 'Reference/LOW/', '<h1>LOW</h1>\r\n<span class="function_description"> \r\nThe meaning of LOW also has a different meaning depending on whether a pin is set to <span class="function_ref">INPUT</span> or <span class="function_ref">OUTPUT</span>. When a pin is configured as an INPUT with <span class="function_ref">pinMode</span>(), and read with <span class="function_ref">digitalRead</span>(), the Z-Uno will report LOW if a voltage less than 2 volts is present at the pin (3.3V boards).\r\n</span>\r\n\r\n<span class="function_description_more">When a pin is configured to OUTPUT with pinMode(), and set to LOW with <span class="function_ref">digitalWrite</span>(), the pin is at 0 volts. In this state it can sink current, e.g. light an LED that is connected through a series resistor to +3.3 volts.\r\n</span>\r\n\r\n', '2015-06-10 22:24:13', '2016-08-23 23:08:22', 1322, 50, 1, 84),
(145, 6, '*', 'HIGH', '', 'HIGH/', 'Reference/HIGH/', '<h1>HIGH</h1>\r\n<span class="function_description">The meaning of HIGH (in reference to a pin) is somewhat different depending on whether a pin is set to an <span class="function_ref">INPUT</span> or <span class="function_ref">OUTPUT</span>. When a pin is configured as an INPUT with <span class="function_ref">pinMode</span>(), and read with <span class="function_ref">digitalRead</span>(), the Z-Uno will report HIGH if a voltage greater than 2 volts is present at the pin.</span>\r\n\r\n<span class="function_description_more">A pin may also be configured as an INPUT with pinMode(), and subsequently made HIGH with <span class="function_ref">digitalWrite</span>(). This will enable the internal 20K pullup resistors, which will pull up the input pin to a HIGH reading unless it is pulled <span class="function_ref">LOW</span> by external circuitry. This is how <span class="function_ref">INPUT_PULLUP</span> works and is described below in more detail.</span>\r\n</span>\r\n\r\n<span class="function_description_more">When a pin is configured to OUTPUT with pinMode(), and set to HIGH with digitalWrite(), the pin is at 3.3 volts. In this state it can source current, e.g. light an LED that is connected through a series resistor to ground.</span>', '2015-06-05 11:27:41', '2016-08-23 23:06:40', 1322, 49, 1, 84),
(161, 6, '*', 'const', '', 'const/', 'Reference/const/', '<h1>const</h1>\r\n\r\n<span class="function_description">The const keyword stands for constant. It is a variable qualifier that modifies the behavior of the variable, making a variable "read-only". This means that the variable can be used just as any other variable of its type, but its value cannot be changed. You will get a compiler error if you try to assign a value to a const variable.\r\n\r\n<span class="function_description_more">Constants defined with the const keyword obey the rules of variable scoping that govern other variables. This, and the pitfalls of using #define, makes the const keyword a superior method for defining constants and is preferred over using <span class="function_ref" link="define">#define</span></span>\r\n\r\n<span class="function_example">\r\n<pre>\r\n<code class="c">const float pi = 3.14;\r\nfloat x;\r\n\r\nx = pi * 2;    // it''s fine to use const''s in math\r\n\r\npi = 7;        // illegal - you can''t write to (modify) a constant</code></pre>\r\n</span>\r\n', '2015-06-10 22:12:15', '2016-08-23 22:57:06', 1322, 69, 1, 84),
(289, 6, '*', 'Serial.print()', '', 'print/', 'Reference/Serial/print/', '<h1>Serial.print()</h1>\r\n<span class="function_description">\r\nPrints data to the serial port as human-readable ASCII text. This command can take many forms. Numbers are printed using an ASCII character for each digit. Floats are similarly printed as ASCII digits, defaulting to two decimal places. Bytes are sent as a single character. Characters and strings are sent as is. For example:\r\n</span>\r\n\r\n<span class="function_example">\r\n<pre>\r\n<code class="c">Serial.print(78);             // gives "78"\r\nSerial.print(1.23456);        // gives "1.23"\r\nSerial.print(''N'');            // gives "N"\r\nSerial.print("Hello world."); // gives "Hello world."\r\n</code></pre>\r\n</span>\r\n\r\n<span class="function_description_more">\r\nAn optional second parameter specifies the base (format) to use; permitted values are BIN (binary, or base 2), OCT (octal, or base 8), DEC (decimal, or base 10), HEX (hexadecimal, or base 16). For floating point numbers, this parameter specifies the number of decimal places to use. For example:\r\n</span>\r\n\r\n<span class="function_example">\r\n<pre>\r\n<code class="c">Serial.print(78, BIN);      // gives "1001110"\r\nSerial.print(78, OCT);      // gives "116"\r\nSerial.print(78, DEC);      // gives "78"\r\nSerial.print(78, HEX);      // gives "4E"\r\nSerial.println(1.23456, 0); // gives gives "1"\r\nSerial.println(1.23456, 2); // gives gives "1.23"\r\nSerial.println(1.23456, 4); // gives gives "1.2346"\r\n</code></pre>\r\n</span>\r\n\r\n<!--\r\nYou can pass flash-memory based strings to Serial.print() by wrapping them with F().\r\nFor example :</br>\r\n<ul>\r\n<li>Serial.print(F(“Hello World”))</li>\r\n</ul>\r\n-->\r\n\r\nTo send a single byte, use <span class="function_ref">Serial.write()</span>.\r\n</span>\r\n\r\n<span class="function_syntax">\r\n<pre>\r\n<code class="c">Serial.print(val);\r\nSerial.print(val, format);</code>\r\n</pre>\r\n</span>\r\n\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">val</span>\r\n        <span class="function_parameters_param_description">the value to print - any data type</span>\r\n    </span>\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">format</span>\r\n        <span class="function_parameters_param_description">specifies the number base (for integral data types) or number of decimal places (for floating point types)</span>\r\n    </span>\r\n</span>    \r\n    \r\n<span class="function_returns">\r\nsize_t (long): print() returns the number of bytes written, though reading that number is optional\r\n</span>\r\n<span class="function_example">\r\n    <pre>\r\n        <code class="c">/*\r\nUses a FOR loop for data and prints a number in various formats.\r\n*/\r\nint x = 0;    // variable\r\n\r\nvoid setup() {\r\n  Serial.begin(9600);      // open the serial port at 9600 bps:    \r\n}\r\n\r\nvoid loop() {  \r\n  // print labels \r\n  Serial.print("NO FORMAT");       // prints a label\r\n  Serial.print("\\t");              // prints a tab\r\n\r\n  Serial.print("DEC");  \r\n  Serial.print("\\t");      \r\n\r\n  Serial.print("HEX"); \r\n  Serial.print("\\t");   \r\n\r\n  Serial.print("OCT");\r\n  Serial.print("\\t");\r\n\r\n  Serial.print("BIN");\r\n  Serial.print("\\t"); \r\n\r\n  for(x=0; x< 64; x++){    // only part of the ASCII chart, change to suit\r\n\r\n    // print it out in many formats:\r\n    Serial.print(x);       // print as an ASCII-encoded decimal - same as "DEC"\r\n    Serial.print("\\t");    // prints a tab\r\n\r\n    Serial.print(x, DEC);  // print as an ASCII-encoded decimal\r\n    Serial.print("\\t");    // prints a tab\r\n\r\n    Serial.print(x, HEX);  // print as an ASCII-encoded hexadecimal\r\n    Serial.print("\\t");    // prints a tab\r\n\r\n    Serial.print(x, OCT);  // print as an ASCII-encoded octal\r\n    Serial.print("\\t");    // prints a tab\r\n\r\n    Serial.println(x, BIN);  // print as an ASCII-encoded binary\r\n    //                             then adds the carriage return with "println"\r\n    delay(200);            // delay 200 milliseconds\r\n  }\r\n  Serial.println("");      // prints another carriage return\r\n}\r\n</code></pre>\r\n</span>', '2016-07-04 13:16:53', '2016-08-18 00:05:55', 1322, 8, 1, 285),
(215, 6, '*', 'Serial.write()', '', 'write/', 'Reference/Serial/write/', '<h1>Serial.write()</h1>\r\n<span class="function_description">Writes binary data to the serial port. This data is sent as a byte or series of bytes; to send the characters representing the digits of a number use the <span class="function_ref" link="Serial/print">Serial.print</span>() function instead.</span>\r\n\r\n<span class="function_syntax">\r\n<pre>\r\n<code class="c">Serial.write(val)\r\n</code></pre>\r\n</span>\r\n\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">val</span>\r\n        <span class="function_parameters_param_description">a value to send as a single byte</span>\r\n    </span>\r\n</span>\r\n\r\n<span class="function_returns">returns the number of bytes written, though reading that number is optional</span>\r\n\r\n<span class="function_example">\r\n<pre>\r\n<code class="c">void setup() {\r\n    Serial.begin();\r\n}\r\n\r\nvoid loop() {\r\n    Serial.write(45); // send a byte with the value 45\r\n}\r\n</code></pre>\r\n</span>  ', '2015-08-12 15:15:05', '2016-08-17 23:38:45', 1322, 7, 1, 285),
(303, 6, '*', 'Serial.flush()', '', 'flush/', 'Reference/Serial/flush/', '<h1>Serial.flush()</h1>\r\n<span class="function_description">Waits for the transmission of outgoing serial data to complete.</span>\r\n\r\n<span class="function_syntax">\r\n<pre>\r\n<code class="c">Serial.flush();\r\n</code></pre>\r\n</span>\r\n', '2016-07-05 17:34:53', '2016-08-16 04:31:40', 1322, 4, 1, 285),
(212, 6, '*', 'Serial.available()', '', 'available/', 'Reference/Serial/available/', '<h1>Serial.available()</h1>\r\n<span class="function_description">\r\nGet the number of bytes (characters) available for reading from the serial port. This is data that''s already arrived and stored in the serial receive buffer (which holds 64 bytes).</span>\r\n\r\n\r\n<span class="function_syntax">\r\n<pre>\r\n<code class="c">Serial.available();\r\n</code></pre>\r\n</span>\r\n\r\n<span class="function_returns">\r\nthe number of bytes available to read \r\n</span>\r\n\r\n<span class="function_example">\r\n<pre>\r\n<code class="c">int incomingByte = 0;   // for incoming serial data\r\n\r\nvoid setup() {\r\n    Serial.begin();     // opens serial port, sets data rate to 115200 bps\r\n}\r\n\r\nvoid loop() {\r\n    // send data only when you receive data:\r\n    if (Serial.available() > 0) {\r\n        // read the incoming byte:\r\n        incomingByte = Serial.read();\r\n\r\n        // say what you got:\r\n        Serial.print("I received: ");\r\n        Serial.println(incomingByte, DEC);\r\n    }\r\n}\r\n</code></pre>\r\n</span>', '2015-08-12 13:42:49', '2016-08-16 04:30:10', 1322, 1, 1, 285),
(223, 6, '*', 'Serial.read()', '', 'read/', 'Reference/Serial/read/', '<h1>Serial.read()</h1>\r\n\r\n<span class="function_description">Reads incoming serial data.</span>\r\n\r\n<span class="function_syntax">\r\n<pre>\r\n<code class="c">Serial.read();\r\n</code></pre>\r\n</span>\r\n\r\n<span class="function_returns">\r\nthe first byte of incoming serial data available (or -1 if no data is available) - int</span>\r\n\r\n<span class="function_example">\r\n<pre>\r\n<code class="c">int incomingByte = 0;   // for incoming serial data\r\n\r\nvoid setup() {\r\n    Serial.begin();     // opens serial port, sets data rate to 115200 bps\r\n}\r\n\r\nvoid loop() {\r\n    // send data only when you receive data:\r\n    if (Serial.available() > 0) {\r\n        // read the incoming byte:\r\n        incomingByte = Serial.read();\r\n\r\n        // say what you got:\r\n        Serial.print("I received: ");\r\n        Serial.println(incomingByte, DEC);\r\n    }\r\n}\r\n</code></pre>\r\n</span> \r\n', '2015-08-17 19:46:52', '2016-08-16 04:29:41', 1322, 6, 1, 285),
(306, 6, '*', 'Serial.peek()', '', 'peek/', 'Reference/Serial/peek/', '<h1>Serial.peek()</h1>\r\n<span class="function_description">Returns the next byte (character) of incoming serial data without removing it from the internal serial buffer. That is, successive calls to peek() will return the same character, as will the next call to read(). peek() inherits from the Stream utility class.</span>\r\n\r\n<span class="function_syntax">\r\n<pre>\r\n<code class="c">Serial.peek()\r\n</code></pre>\r\n</span>\r\n\r\n<span class="function_returns">the first byte of incoming serial data available (or -1 if no data is available) - int</span>', '2016-07-07 11:54:23', '2016-08-16 04:27:26', 1322, 5, 1, 285),
(214, 6, '*', 'Serial.end()', '', 'end/', 'Reference/Serial/end/', '<h1>Serial.end()</h1>\r\n<span class="function_description">Disables serial communication.</span>\r\n<span class="function_syntax">\r\n<pre>\r\n<code class="c">Serial.end()\r\n</code></pre>\r\n</span>\r\n<span class="function_parameters">\r\n    none\r\n</span>\r\n<span class="function_returns">\r\n    nothing\r\n</span>\r\n', '2015-08-12 14:44:01', '2016-08-16 04:20:14', 1322, 3, 1, 285),
(296, 6, '*', 'abs()', '', 'abs/', 'Reference/abs/', '<h1>abs()</h1>\r\n<span class="function_description">\r\nComputes the absolute value of a number.</span>\r\n\r\n<span class="function_syntax">\r\n<pre>\r\n<code class="c">y = abs(x);\r\n</code></pre>\r\n</span>  \r\n\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">x</span>\r\n        <span class="function_parameters_param_description">the number</span>\r\n    </span>\r\n</span>\r\n\r\n<span class="function_returns">\r\n x &mdash; if x is greater than or equal to 0.</br>\r\n-x &mdash; if x is less than 0.\r\n</span>\r\n\r\n<span class="function_example">\r\n<pre>\r\n<code class="c">length = abs(a-b); // will return distance between a and b\r\n</code></pre>\r\n</span>\r\n', '2016-07-04 16:43:22', '2016-08-16 03:43:46', 1322, 105, 1, 84),
(337, 6, '*', 'float', '', 'float/', 'Reference/float/', '<h1>float</h1>\r\n\r\n<span class="function_description">Floating point variable storage.</span>\r\n\r\n<span class="function_description_more"><i>float</i> are used to do math calculations with floating point as well as advanced trigonometric functions.</span>\r\n\r\n<span class="function_syntax">\r\n<pre>\r\n<code class="c">float var = val;\r\n</code></pre>\r\n\r\n<span class="function_example">\r\n<pre>\r\n<code class="c">float voltage = 3.3 * analogRead(A3) / 1023;\r\n</code></pre>\r\n</span>\r\n', '2016-08-16 02:45:22', '2016-08-16 03:34:56', 1, 66, 1, 84),
(160, 6, '*', 'volatile', '', 'volatile/', 'Reference/volatile/', '<h1>volatile</h1>\r\n\r\n<span class="function_description">volatile is a keyword known as a variable qualifier, it is usually used before the datatype of a variable, to modify the way in which the compiler and subsequent program treats the variable.</span>\r\n\r\n<span class="function_description_more">Declaring a variable volatile is a directive to the compiler. The compiler is software which translates your C/C++ code into the machine code.</span>\r\n\r\n<span class="function_description_more">Specifically, it directs the compiler to load the variable from RAM and not from a storage register, which is a temporary memory location where program variables are stored and manipulated. Under certain conditions, the value for a variable stored in registers can be inaccurate.</span>\r\n\r\n<span class="function_description_more">A variable should be declared volatile whenever its value can be changed by something beyond the control of the code section in which it appears, such as a concurrently executing thread. In the Z-Uno, the only place that this is likely to occur is in sections of code associated with interrupts, called an interrupt service routine.</span>\r\n\r\n<span class="function_example">\r\n<pre>\r\n<code class="c">// toggles LED when interrupt pin changes state\r\n\r\nint pin = 13;\r\nvolatile int state = LOW;\r\n\r\nvoid setup() {\r\n  pinMode(pin, OUTPUT);\r\n  attachInterrupt(0, blink, CHANGE);\r\n}\r\n\r\nvoid loop() {\r\n  digitalWrite(pin, state);\r\n}\r\n\r\nvoid blink()\r\n{\r\n  state = !state;\r\n}\r\n</code></pre>\r\n</span>', '2015-06-10 21:50:20', '2016-08-16 02:56:19', 1322, 68, 1, 84),
(150, 6, '*', 'byte', '', 'byte/', 'Reference/byte/', '<h1>byte</h1>\r\n<span class="function_description">A byte stores an 8-bit unsigned number, from 0 to 255. Same as the <i><span class="function_ref">unsigned char</span></i> datatype.</span>\r\n\r\n<span class="function_example">\r\n<pre>\r\n<code class="c">byte b = B10010;  // "B" is the binary formatter (B10010 = 18 decimal)\r\n</code>\r\n</pre>\r\n</span> \r\n', '2015-06-07 14:41:37', '2016-08-16 02:24:01', 1322, 59, 1, 84);
INSERT INTO `site_page` (`id`, `domain_id`, `route`, `name`, `title`, `url`, `full_url`, `content`, `create_datetime`, `update_datetime`, `create_contact_id`, `sort`, `status`, `parent_id`) VALUES
(165, 6, '*', 'true', '', 'true/', 'Reference/true/', '<h1>true and false</h1>\r\n<span class="function_description">There are two constants used to represent truth and falsity: true and false.</span>\r\n\r\n<span class="function_syntax">\r\n<i>false</i> is defined as 0 (zero).\r\n<br/>\r\n<i>true</i> is often said to be defined as 1, which is correct, but true has a wider definition: any integer which is non-zero is true, in a Boolean sense. So -1, 2 and -200 are all defined as true, too, in a Boolean sense.</span>\r\n\r\n<span class="function_description_note">Note that the true and false constants are typed in lowercase unlike HIGH, LOW, INPUT, and OUTPUT.</span>', '2015-06-10 23:15:19', '2016-08-16 02:19:37', 1322, 54, 1, 84),
(146, 6, '*', 'void', '', 'void/', 'Reference/void/', '<h1>void</h1>\r\n<span class="function_description">The void keyword is used only in function declarations. It indicates that the function is expected to return no information to the function from which it was called.</span>\r\n\r\n<span class="function_example">\r\n<pre>\r\n<code class"c">// actions are performed in the functions "setup" and "loop"\r\n// but  no information is reported to the larger program\r\n\r\nvoid setup() {\r\n  // ...\r\n}\r\n\r\nvoid loop() {\r\n  // ...\r\n}\r\n</code>\r\n</pre>\r\n</span>', '2015-06-07 14:22:57', '2016-08-16 02:14:45', 1322, 55, 1, 84),
(147, 6, '*', 'boolean', '', 'boolean/', 'Reference/boolean/', '<h1>boolean</h1>\r\n<span class="function_description">A <i>boolean</i> holds one of two values, <span class="function_ref">true</span> or <span class="function_ref">false</span>. Each boolean variable occupies one byte of memory.</span>\r\n\r\n<span class="function_example">\r\n<pre>\r\n<code class"c">boolean first_run = true;\r\n\r\nvoid loop() {\r\n  if (!first_run) {\r\n    first_run = false;\r\n    // do something only once on power on\r\n  }\r\n}\r\n</code>\r\n</pre>\r\n</span>', '2015-06-07 14:32:26', '2016-08-16 02:14:34', 1322, 56, 1, 84),
(148, 6, '*', 'char', '', 'char/', 'Reference/char/', '<h1>char</h1>\r\n<span class="function_description">\r\nA data type that takes up 1 byte of memory that stores a character value. Character literals are written in single quotes, like this: ''A'' (for multiple characters - strings - use double quotes: "ABC").</span>\r\n\r\n<span class="function_description_more">Characters are stored as numbers however. You can see the specific encoding in the ASCII chart. This means that it is possible to do arithmetic on characters, in which the ASCII value of the character is used (e.g. ''A'' + 1 has the value 66, since the ASCII value of the capital letter A is 65). See <span class="function_ref" link="Serial/println">Serial.println</span> reference for more on how characters are translated to numbers.</span>\r\n\r\n<span class="function_description_more">The char datatype is a signed type, meaning that it encodes numbers from -128 to 127. For an unsigned, one-byte (8 bit) data type, use the <span class="function_ref">byte</span> data type.</span>\r\n\r\n<span class="function_example">\r\n<pre>\r\n<code class="c">char myChar = ''A'';\r\nchar myChar = 65;      // both are equivalent\r\n</code>\r\n</pre>\r\n</span> ', '2015-06-07 14:36:03', '2016-08-16 02:14:22', 1322, 57, 1, 84),
(125, 6, '*', '&& (and)', '', 'and/', 'Reference/and/', '<h1>and</h1>\r\n<span class="function_description">True only if both operands are true.</span>\r\n\r\n<span class="function_example">\r\n<pre>\r\n<code class="c">if (digitalRead(2) == HIGH && digitalRead(3) == HIGH) { // read two switches \r\n  // ...\r\n}\r\n</code>\r\n</pre>\r\nExecute statements inside <i>if</i> only if both inputs are high.\r\n</span>\r\n\r\n<span class="function_description_note">\r\nMake sure you don''t mistake the boolean AND operator && (double ampersand) for the bitwise AND operator & (single ampersand). They are entirely different beasts.\r\n\r\nSimilarly, do not confuse the boolean || (double pipe) operator with the bitwise OR operator | (single pipe).\r\n\r\nThe bitwise not ~ (tilde) looks much different than the boolean not ! (exclamation point or "bang" as the programmers say) but you still have to be sure which one you want where.\r\n</span>\r\n\r\n<span class="function_tip">These can be used inside the condition of an <span class="function_ref">if</span> statement.</span>', '2015-06-02 21:32:57', '2016-08-15 23:31:39', 1322, 34, 1, 84),
(104, 6, '*', '>= (greater than or equal to)', '', 'greater-than-or-equal-to/', 'Reference/greater-than-or-equal-to/', '<h1>greater than or equal to</h1>\r\n<span class="function_description">Оne of the comparison operators which means that one of variables is greater than or equal to another.</span>\r\n<span class="function_example">\r\n<pre>\r\n<code class="c">if (x < y) { ... } // (x is greater than or equal to y)\r\n</code>\r\n</pre>\r\n</span>', '2015-06-02 18:38:32', '2016-08-15 23:30:28', 1322, 34, 1, 84),
(103, 6, '*', '<= (less than or equal to)', '', 'less-than-or-equal-to/', 'Reference/less-than-or-equal-to/', '<h1>less than or equal to</h1>\r\n<span class="function_description">Оne of the comparison operators which means that one of variables is less than or equal to another.</span>\r\n<span class="function_example">\r\n<pre>\r\n<code class="c">if (x < y) { ... } // (x is less than or equal to y) \r\n</code>\r\n</pre>\r\n</span>', '2015-06-02 18:37:51', '2016-08-15 23:30:07', 1322, 34, 1, 84),
(99, 6, '*', ' == (equal to)', '', 'equal-to/', 'Reference/equal-to/', '<h1>equal to</h1>\r\n<span class="function_description">Оne of the comparison operators which means that one of variables is equal to another.</span>\r\n<span class="function_example">\r\n<pre>\r\n<code class="c">if (x == y) { ... } // (x is equal to y) \r\n</code>\r\n</pre>\r\n</span>', '2015-06-02 18:36:18', '2016-08-15 23:29:44', 1322, 34, 1, 84),
(100, 6, '*', '!= (not equal to)', '', 'not-equal-to/', 'Reference/not-equal-to/', '<h1>not equal to</h1>\r\n<span class="function_description">Оne of the comparison operators which means that one of variables is not equal to another.</span>\r\n<span class="function_example">\r\n<pre>\r\n<code class="c">if (x != y) { ... } // (x is not equal to y)  \r\n</code>\r\n</pre>\r\n</span>', '2015-06-02 18:36:39', '2016-08-15 23:29:34', 1322, 34, 1, 84),
(101, 6, '*', '< (less than)', '', 'less-than/', 'Reference/less-than/', '<h1>less than</h1>\r\n<span class="function_description">Оne of the comparison operators which means that one of variables is less than another.</span>\r\n<span class="function_example">\r\n<pre>\r\n<code class="c">if (x < y) { ... } // (x is less than y)\r\n</code>\r\n</pre>\r\n</span>', '2015-06-02 18:36:56', '2016-08-15 23:29:25', 1322, 34, 1, 84),
(102, 6, '*', '> (greater than)', '', 'greater-than/', 'Reference/greater-than/', '<h1>greater than</h1>\r\n<span class="function_description">Оne of the comparison operators which means that one of variables is greater than another.</span>\r\n<span class="function_example">\r\n<pre>\r\n<code class="c">if (x > y) { ... } // (x is greater than y)  \r\n</code>\r\n</pre>\r\n</span>', '2015-06-02 18:37:18', '2016-08-15 23:29:15', 1322, 34, 1, 84),
(144, 6, '*', '|= (compound bitwise or)', '', 'compound-bitwise-or/', 'Reference/compound-bitwise-or/', '<span class="function_description">The compound bitwise OR operator (|=) is often used with a variable and a constant to "set" (set to 1) particular bits in a variable.</span>\r\n\r\n<span class="function_syntax">\r\n<pre>\r\n<code class="c">x |= y;   // equivalent to x = x | y;\r\n</code>\r\n</pre>\r\n</span>  \r\n\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">x</span>\r\n        <span class="function_parameters_param_description">a char, int or long variable</span>\r\n    </span>\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">y</span>\r\n        <span class="function_parameters_param_description">an integer constant or char, int, or long\r\n    </span>\r\n</span>\r\n\r\n<span class="function_example">\r\nFirst, a review of the Bitwise OR (|) operator\r\n<pre>\r\n<code class="c">0  0  1  1    operand1\r\n0  1  0  1    operand2\r\n----------\r\n0  1  1  1    (operand1 | operand2) - returned result\r\n</code>\r\n</pre>\r\n</span>  \r\n\r\n<span class="function_example">\r\nBits that are "bitwise ORed" with 0 are unchanged, so if myByte is a byte variable,<pre>\r\n<code class="c">myByte =| B00000000 = myByte;\r\n</code>\r\n</pre>\r\n</span>\r\n\r\n<span class="function_example">\r\nBits that are "bitwise ORed" with 1 are set to 1 so:\r\n<pre>\r\n<code class="c">myByte | B11111111 = B11111111;\r\n</code>\r\n</pre>\r\n</span>\r\n', '2015-06-02 22:18:01', '2016-08-15 22:04:36', 1322, 48, 1, 84),
(143, 6, '*', '&= (compound bitwise and)', '', 'compound-bitwise-and/', 'Reference/compound-bitwise-and/', '<span class="function_description">The compound bitwise AND operator (&=) is often used with a variable and a constant to force particular bits in a variable to the LOW state (to 0). This is often referred to in programming guides as "clearing" or "resetting" bits.</span>\r\n\r\n<span class="function_syntax">\r\n<pre>\r\n<code class="c">x &= y;   // equivalent to x = x & y;\r\n</code>\r\n</pre>\r\n</span>  \r\n\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">x</span>\r\n        <span class="function_parameters_param_description">a char, int or long variable</span>\r\n    </span>\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">y</span>\r\n        <span class="function_parameters_param_description">an integer constant or char, int, or long\r\n    </span>\r\n</span>\r\n\r\n<span class="function_example">\r\nFirst, a review of the Bitwise AND (&) operator\r\n<pre>\r\n<code class="c">0  0  1  1    operand1\r\n0  1  0  1    operand2\r\n----------\r\n0  0  0  1    (operand1 & operand2) - returned result\r\n</code>\r\n</pre>\r\n</span>  \r\n\r\n<span class="function_example">\r\nBits that are "bitwise ANDed" with 0 are cleared to 0 so, if myByte is a byte variable\r\n<pre>\r\n<code class="c">myByte & B00000000 = 0;\r\n</code>\r\n</pre>\r\n</span>\r\n\r\n<span class="function_example">\r\nBits that are "bitwise ANDed" with 1 are unchanged so, \r\n<pre>\r\n<code class="c">myByte & B11111111 = myByte;\r\n</code>\r\n</pre>\r\n</span>\r\n', '2015-06-02 22:17:03', '2016-08-15 22:02:08', 1322, 48, 1, 84),
(139, 6, '*', '+= (compound addition)', '', 'compound-addition/', 'Reference/compound-addition/', '<h2>+= , -= , *= , /=</h2>\r\n<span class="function_description">Perform a mathematical operation on a variable with another constant or variable. The += (et al) operators are just a convenient shorthand for the expanded syntax, listed below.</span>\r\n\r\n<span class="function_syntax">\r\n<pre>\r\n<code class="c">x += y;   // equivalent to the expression x = x + y;\r\nx -= y;   // equivalent to the expression x = x - y; \r\nx *= y;   // equivalent to the expression x = x * y; \r\nx /= y;   // equivalent to the expression x = x / y;\r\n</code>\r\n</pre>\r\n</span>\r\n\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">x:</span>\r\n        <span class="function_parameters_param_description">any variable type</span>\r\n    </span>\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">y:</span>\r\n        <span class="function_parameters_param_description">any variable type or constant</span>\r\n    </span>\r\n</span>\r\n\r\n<span class="function_example">\r\n<pre>\r\n<code class="c">x = 2;\r\nx += 4;      // x now contains 6\r\nx -= 3;      // x now contains 3\r\nx *= 10;     // x now contains 30\r\nx /= 2;      // x now contains 15\r\n</code>\r\n</pre>\r\n</span>   ', '2015-06-02 22:14:18', '2016-08-15 21:58:14', 1322, 46, 1, 84),
(137, 6, '*', '++ (increment)', '', 'increment/', 'Reference/increment/', '<span class="function_description">Increment or a variable</span>\r\n<span class="function_syntax">\r\n<pre>\r\n<code class="c">x++;  // increment x by one and returns the old value of x\r\n++x;  // increment x by one and returns the new value of x\r\n</code>\r\n</pre>\r\n</span>\r\n\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">x</span>\r\n        <span class="function_parameters_param_description">an integer or long (possibly unsigned)\r\n    </span>\r\n</span>\r\n\r\n<span class="function_returns">The original or newly incremented value of the variable.</span>\r\n<span class="function_example">\r\n<pre>\r\n<code class="c">x = 2;\r\ny = ++x;      // x now contains 3, y contains 3\r\n\r\nx = 2;\r\ny = x++;      // x now contains 3, while y still contains 2\r\n</code>\r\n</pre>\r\n</span>  \r\n        \r\n\r\n', '2015-06-02 22:13:26', '2016-08-15 21:56:46', 1322, 44, 1, 84),
(138, 6, '*', '-- (decrement)', '', 'decrement/', 'Reference/decrement/', '<span class="function_description">Decrement or a variable.</span>\r\n\r\n<span class="function_syntax">\r\n<pre>\r\n<code class="c">x--;  // decrement x by one and returns the old value of x\r\n--x;  // decrement x by one and returns the new value of x\r\n</code>\r\n</pre>\r\n</span>  \r\n\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">x: </span>\r\n        <span class="function_parameters_param_description">an integer or long (possibly unsigned)\r\n    </span>\r\n</span>    \r\n\r\n<span class="function_returns">The original or newly decremented value of the variable.</span>\r\n\r\n<span class="function_example">\r\n<pre>\r\n<code class="c">x = 3;\r\ny = --x;     // x and y both contain 2\r\n\r\nx = 3;\r\ny = x--;     // y still contains 3, while x contains 2\r\n</code>\r\n</pre>\r\n</span>   ', '2015-06-02 22:13:53', '2016-08-15 21:56:15', 1322, 45, 1, 84),
(134, 6, '*', ' ~ (bitwise not)', '', 'bitwise-not/', 'Reference/bitwise-not/', '<h1>bitwise not</h1>\r\n<span class="function_description">The bitwise NOT operator in C++ is the tilde character ~. Unlike & and |, the bitwise NOT operator is applied to a single operand to its right. Bitwise NOT changes each bit to its opposite: 0 becomes 1, and 1 becomes 0. For example:</span>\r\n<span class="function_example">\r\n<pre>\r\n<code class="c">int a = 103;    // binary:  0000000001100111\r\nint b = ~a;     // binary:  1111111110011000 = -104\r\n</code>\r\n</pre>\r\n</span>\r\n\r\n<span class="function_description_more">You might be surprised to see a negative number like -104 as the result of this operation. This is because the highest bit in an int variable is the so-called sign bit. If the highest bit is 1, the number is interpreted as negative. This encoding of positive and negative numbers is referred to as two''s complement.</span>\r\n\r\n<span class="function_description_more">As an aside, it is interesting to note that for any integer x, ~x is the same as -x-1.</span>\r\n\r\n<span class="function_description_more">At times, the sign bit in a signed integer expression can cause some unwanted surprises, as we shall see later.</span>\r\n', '2015-06-02 22:11:59', '2016-08-15 21:52:23', 1322, 41, 1, 84),
(133, 6, '*', '^ (bitwise xor)', '', 'bitwise-xor/', 'Reference/bitwise-xor/', '<h1>bitwise xor</h1>\r\n<span class="function_description">There is a somewhat unusual operator in C++ called bitwise exclusive OR, also known as bitwise XOR. (In English this is usually pronounced "eks-or".) The bitwise XOR operator is written using the caret symbol ^. This operator is similar to the bitwise OR operator |, except that it evaluates to 1 for a given position when exactly one of the input bits for that position is 1. If both are 0 or both are 1, the XOR operator evaluates to 0:</span>\r\n<span class="function_example">\r\n<pre>\r\n<code class="c">0 ^ 0 == 0\r\n0 ^ 1 == 1\r\n1 ^ 0 == 1\r\n1 ^ 1 == 0\r\n</code>\r\n</pre>\r\n</span>\r\n\r\n<span class="function_description_more">Another way to look at bitwise XOR is that each bit in the result is a 1 if the input bits are different, or 0 if they are the same.</span>\r\n\r\n<span class="function_description_more">Here is a simple code example:</span>\r\n\r\n<span class="function_example">\r\n<pre>\r\n<code class="c">int x = 12;     // binary: 1100\r\nint y = 10;     // binary: 1010\r\nint z = x ^ y;  // binary: 0110, or decimal 6\r\n</code>\r\n</pre>\r\n</span> \r\n\r\n<span class="function_description_more">The ^ operator is often used to toggle (i.e. change from 0 to 1, or 1 to 0) some of the bits in an integer expression while leaving others alone. For example:</span>\r\n<span class="function_example">\r\n\r\n<pre>\r\n<code class="c">y = x ^ 1;   // toggle the lowest bit in x, and store the result in y.\r\n</code>\r\n</pre>\r\n</span>', '2015-06-02 22:10:47', '2016-08-15 21:50:08', 1322, 40, 1, 84),
(132, 6, '*', '|  (bitwise or)', '', 'bitwise-or/', 'Reference/bitwise-or/', '<h1>bitwise or</h1>\r\n<span class="function_description">The bitwise OR operator in C++ is the vertical bar symbol, |. Like the & operator, | operates independently each bit in its two surrounding integer expressions, but what it does is different (of course). The bitwise OR of two bits is 1 if either or both of the input bits is 1, otherwise it is 0. In other words:</span>\r\n<span class="function_example">\r\n<pre>\r\n<code class="c">0 | 0 == 0\r\n0 | 1 == 1\r\n1 | 0 == 1\r\n1 | 1 == 1\r\n</code>\r\n</pre>\r\n</span>\r\n<span  class="function_description_more">Here is an example of the bitwise OR used in a snippet of C++ code:</span>\r\n<span class="function_example">\r\n<pre>\r\n<code class="c">int a =  92;    // in binary: 0000000001011100\r\nint b = 101;    // in binary: 0000000001100101\r\nint c = a | b;  // result:    0000000001111101, or 125 in decimal.\r\n</code>\r\n</pre>\r\n</span> \r\n\r\n<span  class="function_description_more">Bitwise OR is often used to make sure that a given bit is turned on (set to 1) in a given expression. For example, to copy the bits from a into b, while making sure the lowest bit is set to 1, use the following code:</span>\r\n<span class="function_example">\r\n<pre>\r\n<code class="c">b = a | 1;\r\n</code>\r\n</pre>\r\n</span>', '2015-06-02 22:10:22', '2016-08-15 21:47:32', 1322, 39, 1, 84),
(131, 6, '*', '& (bitwise and)', '', 'bitwise-and/', 'Reference/bitwise-and/', '<h1>bitwise and</h1>\r\n<span  class="function_description">The bitwise AND operator in C++ is a single ampersand, &, used between two other integer expressions. Bitwise AND operates on each bit position of the surrounding expressions independently, according to this rule: if both input bits are 1, the resulting output is 1, otherwise the output is 0. Another way of expressing this is:</span>\r\n<span class="function_example">\r\n<pre>\r\n<code class="c">0 & 0 == 0\r\n0 & 1 == 0\r\n1 & 0 == 0\r\n1 & 1 == 1\r\n</code>\r\n</pre>\r\n</span>\r\n\r\n<span  class="function_description_more">One of the most common uses of bitwise AND is to select a particular bit (or bits) from an integer value, often called masking. For example, if you wanted to access the least significant bit in a variable x, and store the bit in another variable y, you could use the following code:</span>\r\n<span class="function_example">\r\n<pre>\r\n<code class="c">int x = 5;       // binary: 101\r\nint y = x & 1;   // now y == 1\r\nx = 4;           // binary: 100\r\ny = x & 1;       // now y == 0\r\n</code>\r\n</pre>\r\n</span>\r\n\r\n', '2015-06-02 22:09:57', '2016-08-15 21:45:03', 1322, 38, 1, 84),
(130, 6, '*', '& reference operator', '', 'reference-operator/', 'Reference/reference-operator/', '<h1>reference operator</h1>\r\n<span class="function_description">Pointers are one of the more complicated subjects for beginners in learning C, and it is possible to write the vast majority of Arduino sketches without ever encountering pointers. However for manipulating certain data structures, the use of pointers can simplify the code, and and knowledge of manipulating pointers is handy to have in one''s toolkit.</span>', '2015-06-02 22:09:08', '2016-08-15 21:43:29', 1322, 37, 1, 84),
(129, 6, '*', '* dereference operator', '', 'dereference-operator/', 'Reference/dereference-operator/', '<h1>dereference operator</h1>\r\n<span class="function_description">Pointers are one of the more complicated subjects for beginners in learning C, and it is possible to write the vast majority of Arduino sketches without ever encountering pointers. However for manipulating certain data structures, the use of pointers can simplify the code, and and knowledge of manipulating pointers is handy to have in one''s toolkit.</span>\r\n', '2015-06-02 21:34:49', '2016-08-15 21:43:03', 1322, 36, 1, 84),
(128, 6, '*', '! (not)', '', 'not/', 'Reference/not/', '<h1>not</h1>\r\n<span class="function_description">True if the operand is false</span>\r\n\r\n<span class="function_example">\r\n<pre>\r\n<code class="c">if (!x) { \r\n  // ...\r\n} \r\n</code>\r\n</pre>\r\nExecute statements inside <i>if</i> only if x is false (i.e. if x equals 0) \r\n</span>\r\n\r\n<span class="function_description_note">\r\nMake sure you don''t mistake the boolean AND operator && (double ampersand) for the bitwise AND operator & (single ampersand). They are entirely different beasts.\r\n\r\nSimilarly, do not confuse the boolean || (double pipe) operator with the bitwise OR operator | (single pipe).\r\n\r\nThe bitwise not ~ (tilde) looks much different than the boolean not ! (exclamation point or "bang" as the programmers say) but you still have to be sure which one you want where.\r\n</span>\r\n\r\n<span class="function_tip">These can be used inside the condition of an <span class="function_ref">if</span> statement.</span>\r\n', '2015-06-02 21:33:33', '2016-08-15 21:41:27', 1322, 35, 1, 84),
(126, 6, '*', '|| (or)', '', 'or/', 'Reference/or/', '<h1>or</h1>\r\n<span class="function_description">True if either operand is true.</span>\r\n\r\n<span class="function_example">\r\n<pre>\r\n<code class="c">if (x > 0 || y > 0) {\r\n  // ...\r\n}\r\n</code>\r\n</pre>\r\nExecute statements inside <i>if</i> if either x or y is greater than 0.\r\n</span>\r\n\r\n<span class="function_description_note">\r\nMake sure you don''t mistake the boolean AND operator && (double ampersand) for the bitwise AND operator & (single ampersand). They are entirely different beasts.\r\n\r\nSimilarly, do not confuse the boolean || (double pipe) operator with the bitwise OR operator | (single pipe).\r\n\r\nThe bitwise not ~ (tilde) looks much different than the boolean not ! (exclamation point or "bang" as the programmers say) but you still have to be sure which one you want where.\r\n</span>\r\n\r\n<span class="function_tip">These can be used inside the condition of an <span class="function_ref">if</span> statement.</span>', '2015-06-02 21:33:17', '2016-08-15 21:41:16', 1322, 34, 1, 84),
(124, 6, '*', '% (modulo)', '', 'modulo/', 'Reference/modulo/', '<h1>modulo</h1>\r\n<span class="function_description">\r\nCalculates the remainder when one integer is divided by another. It is useful for keeping a variable within a particular range (e.g. the size of an array).\r\n</span>\r\n<span class="function_syntax">\r\nresult = dividend % divisor\r\n</span>\r\n\r\n<span class="function_parameters">\r\n<span class="function_parameters_param">\r\n<span class="function_parameters_param_name">dividend</span>\r\n<span class="function_parameters_param_description">the number to be divided</span>\r\n</span>\r\n<span class="function_parameters_param">\r\n<span class="function_parameters_param_name">divisor</span>\r\n<span class="function_parameters_param_description">the number to divide by</span>\r\n</span>\r\n</span>\r\n\r\n<span class="function_returns">the remainder</span>\r\n\r\n<span class="function_example">\r\n<pre>\r\n<code class="c">x = 7 % 5;   // x now contains 2\r\nx = 9 % 5;   // x now contains 4\r\nx = 5 % 5;   // x now contains 0\r\nx = 4 % 5;   // x now contains 4\r\n</code>\r\n</pre>\r\n</span>  \r\n\r\n<span class="function_example">\r\n<pre>\r\n<code class="c">/* update one value in an array each time through a loop */\r\n\r\nint values[10];\r\nint i = 0;\r\n\r\nvoid setup() {\r\n}\r\n\r\nvoid loop() {\r\n  values[i] = analogRead(0);\r\n  i = (i + 1) % 10;   // modulo operator rolls over variable  \r\n}\r\n</code>\r\n</pre>    \r\n</span>\r\n\r\n<span class="function_tip">\r\nThe modulo operator does not work on floats.\r\n</span>\r\n', '2015-06-02 21:32:10', '2016-08-15 21:28:45', 1322, 26, 1, 84),
(120, 6, '*', '+, -, * and / operators', '', 'addition/', 'Reference/addition/', '<h1>+, -, * and / operators</h1>\r\n<span class="function_description">\r\nThese operators return the sum, difference, product, or quotient (respectively) of the two operands. The operation is conducted using the data type of the operands, so, for example, 9 / 4 gives 2 since 9 and 4 are ints. This also means that the operation can overflow if the result is larger than that which can be stored in the data type (e.g. adding 1 to an int with the value 32,767 gives -32,768). If the operands are of different types, the "larger" type is used for the calculation.\r\n\r\nIf one of the numbers (operands) are of the type float or of type double, floating point math will be used for the calculation.\r\n</span>\r\n<span class="function_example">\r\n<pre><code class="c">y = y + 3;\r\nx = x - 7;\r\ni = j * 6;\r\nr = r / 5;\r\n</code>\r\n</pre>\r\n</span>  \r\n<span class="function_syntax">\r\n<pre><code class="c">result = value1 + value2\r\nresult = value1 - value2;\r\nresult = value1 * value2;\r\nresult = value1 / value2;\r\n</code>\r\n</pre>\r\n</span>\r\n<span class="function_parameters">\r\n<span class="function_parameters_param">\r\n<span class="function_parameters_param_name">value1</span>\r\n<span class="function_parameters_param_description">any variable or constant</span>\r\n</span>\r\n<span class="function_parameters_param">\r\n<span class="function_parameters_param_name">value2</span>\r\n<span class="function_parameters_param_description">any variable or constant</span>\r\n</span>\r\n</span>\r\n<span class="function_programming_tips">\r\nKnow that integer constants default to int, so some constant calculations may overflow (e.g. 60 * 1000 will yield a negative result).\r\nChoose variable sizes that are large enough to hold the largest results from your calculations\r\nKnow at what point your variable will "roll over" and also what happens in the other direction e.g. (0 - 1) OR (0 - - 32768)\r\nFor math that requires fractions, use float variables, but be aware of their drawbacks: large size, slow computation speeds\r\nUse the cast operator e.g. (int)myFloat to convert one variable type to another on the fly.\r\n</span>', '2015-06-02 21:30:32', '2016-08-15 21:24:30', 1322, 25, 1, 84),
(119, 6, '*', '= (assignment operator) ', '', 'assignment-operator/', 'Reference/assignment-operator/', '<h1>assignment operator</h1>\r\n<span>\r\nStores the value to the right of the equal sign in the variable to the left of the equal sign.\r\n\r\nThe single equal sign in the C programming language is called the assignment operator. It has a different meaning than in algebra class where it indicated an equation or equality. The assignment operator tells the microcontroller to evaluate whatever value or expression is on the right side of the equal sign, and store it in the variable to the left of the equal sign.\r\n</span>\r\n<span class="function_example">\r\n<pre>\r\n<code class="c">int sensVal;               // declare an integer variable named sensVal\r\nsensVal = analogRead(0);   // store the (digitized) input voltage at analog pin 0 in SensVal\r\n</code>\r\n</pre>\r\n</span>  \r\n   \r\n<span class="function_programming_tips">The variable on the left side of the assignment operator (= sign) needs to be able to hold the value stored in it. If it is not large enough to hold a value, the value stored in the variable will be incorrect.</span>\r\n<span class="function_programming_tips">Don''t confuse the assignment operator = (single equal sign) with the comparison operator == (double equal signs), which evaluates whether two expressions are equal.</span>\r\n', '2015-06-02 21:29:55', '2016-08-15 21:15:09', 1322, 24, 1, 84),
(175, 6, '*', '#include', '', 'include/', 'Reference/include/', '<h1>#include</h1>\r\n<span class="function_description">The directive <i>#include</i> plugs content of the indicated file in text of the program. This directive has two forms:</span>\r\n<span class="function_syntax">\r\n<pre>\r\n<code class="c">#include "file name"\r\n#include &lt;file name&gt;\r\n</code>\r\n</pre>\r\n</span>\r\n<span class="function_description_more">The file name must correspond to the agreements of the operating system and can consist either only of the file name or from the file name with an antecedent to him by a route. If the file name is indicated in quotation marks, then the search of file comes true in accordance with the set route, and at his absence in a current directory. If the file name is set in angular brackets, then file man-hunted in the standard directories of the operating system, set by a command PATH.</span>\r\n\r\n<span class="function_description_more">A directive <i>#include</i> can be inlaid, i.e. in the included file too there can be a directive <i>#include,</i> that substituted for after including of file containing this directive.</span>\r\n\r\n<span class="function_description_more">The directive <i>#include</i> is widely used for plugging in the program of the so-called heading files, containing the prototypes of library functions, and most programs on SI are begun with this directive.</span>\r\n\r\n', '2015-06-14 17:32:46', '2016-08-15 20:46:44', 1322, 23, 1, 84),
(174, 6, '*', '#define', '', 'define/', 'Reference/define/', '<h1>#define</h1>\r\n<span class="function_description">\r\nThe directive <i>#define</i> serves as for replacement of the often used constants, keywords, operators or expressions some identifiers. Identifiers replacing hollerith or numerical constants name the named constants. Identifiers, replacing the fragments of the programs, name macro declarations, thus macro declarations can have arguments.\r\n</span>\r\n<span class="function_syntax">\r\nThe directive <i>#define</i> has two syntactic forms:\r\n<pre>\r\n    <code class="c">#define identifier text\r\n\r\n#define identifier(list of parameters) text\r\n    </code>\r\n</pre>\r\nThis directive substitutes all subsequent including of <i>identifier</i> by <i>text</i>. Such process is named a macro substitution. Text can be any fragment of the program on C or C++, and also can be absent. In last case all copies of identifier retire from the program.\r\n</span>\r\n<span class="function_example">\r\n    <pre>\r\n        <code class="c">#define WIDTH 80\r\n\r\n#define LENGTH (WIDTH+10)\r\n</code>\r\n</pre>\r\nThese directives will change in text of the program every word WIDTH on a number 80, and every word LENGTH on expression (80+10) together with surrounding him brackets.\r\n<br/><br/>\r\nThe brackets contained in macro declaration allow to avoid misunderstanding related to the order of calculation of triggerable operations. For example, in default of brackets expression t=LENGTH*7 will be regenerate in expression t=80+10*7, but not in expression t=(80+10)*7, as it turns out at presence of brackets, and 780 will ensue, but not 630.\r\n</span>\r\n\r\n<span class="function_description_more">In the second syntactic form in the directive of #define there is a list of formal parameters, that can contain one or a few identifiers divide commas. Formal parameters in text of macro declaration mark positions on that the actual arguments of macrocall must be put. Every formal parameter can appear in text of macro declaration several times.\r\n<br/><br/>\r\nAt a macrocall after an identifier the list of actual arguments the amount of that must coincide with the amount of formal parameters is written down.</span>\r\n\r\n<span class="function_example">\r\n<pre>\r\n<code class="c">#define  MAX(x, y) ((x)>(y))?(x):(y)\r\n\r\n// This directive will replace a fragment\r\nt = MAX(i, s[i]);\r\n\r\n// on a fragment\r\nt = ((i)>(s[i])?(i):(s[i]);\r\n</code>\r\n</pre>\r\n</span>\r\n\r\n<span class="function_description_more">As well as in a previous example, parentheses, in that are celled formal parameters of macro declaration, allow to avoid the errors of with the wrong order of implementation link transaction, if actual arguments are expressions.</span>\r\n<span class="function_example">\r\n<pre>\r\n<code class="c">// For example, at presence of brackets fragment\r\nt=MAX(i&j,s[i]||j);\r\n\r\n// will be substituted by a fragment\r\nt=((i&j)>(s[i]||j)?(i&j):(s[i]||j);\r\n\r\n// and in default of brackets - on a fragment\r\nt=(i&j>s[i]||j)?i&j:s[i]||j;\r\n// in that conditional expression calculates at a completely another order.\r\n</code>\r\n</pre>\r\n</span>', '2015-06-14 16:59:59', '2016-08-15 20:46:18', 1322, 22, 1, 84),
(118, 6, '*', '/* */ (multi-line comment)', '', 'multi-line-comment/', 'Reference/multi-line-comment/', '<h1>multi-line comment</h1>\r\n<span>\r\nComments are lines in the program that are used to inform yourself or others about the way the program works. They are ignored by the compiler, and not exported to the processor\r\nComments only purpose are to help you understand (or remember) how your program works or to inform others how your program works. There are two different ways of marking a line as a comment:\r\nsingle line comment and multi-line comments.\r\n</span>\r\n<span class="function_example">\r\n<pre>\r\n<code class="c">/* this is multiline comment - use it to comment out whole blocks of code\r\n\r\nif (gwb == 0) {\r\n    x = 3 \r\n} // single line comment is OK inside a multiline comment\r\n/* but not another multiline comment - this is invalid */\r\n\r\n// don''t forget the "closing" comment - they have to be balanced!\r\n</code>\r\n</pre>\r\n</span> \r\n<span class="function_tip"></span>\r\n<span>\r\nWhen experimenting with code, "commenting out" parts of your program is a convenient way to remove lines that may be buggy. This leaves the lines in the code, but turns them into comments, so the compiler just ignores them. This can be especially useful when trying to locate a problem, or when a program refuses to compile and the compiler error is cryptic or unhelpful.\r\n</span>  ', '2015-06-02 21:29:03', '2016-08-15 20:18:18', 1322, 21, 1, 84),
(117, 6, '*', '// (single line comment)', '', 'single-line-comment/', 'Reference/single-line-comment/', '<h1>single line comment</h1>\r\n<span>\r\nComments are lines in the program that are used to inform yourself or others about the way the program works. They are ignored by the compiler, and not exported to the processor\r\nComments only purpose are to help you understand (or remember) how your program works or to inform others how your program works. There are two different ways of marking a line as a comment:\r\nsingle line comment and multi-line comments\r\n</span>\r\n<span class="function_example">\r\n<pre>\r\n<code class="c">x = 5;  // This is a single line comment. Anything after the slashes is a comment \r\n        // to the end of the line\r\n</code>\r\n</pre>\r\n</span> \r\n ', '2015-06-02 21:28:22', '2016-08-15 20:14:52', 1322, 20, 1, 84),
(116, 6, '*', '{} (curly braces)', '', 'curly-braces/', 'Reference/curly-braces/', '<h1>curly braces</h1>\r\nCurly braces (also referred to as just "braces" or as "curly brackets") are a major part of the C programming language. They are used in several different constructs, outlined below, and this can sometimes be confusing for beginners.\r\n<span class="function_example">\r\n<pre>\r\n<code class="c">{\r\n    // code block\r\n}\r\n\r\nif (value > 5) {\r\n    // some statements\r\n}\r\n</code>\r\n</pre>\r\n</span>  ', '2015-06-02 21:24:27', '2016-08-15 19:31:49', 1322, 19, 1, 84),
(115, 6, '*', ';(semicolon)', '', 'semicolon/', 'Reference/semicolon/', '<h1>semicolon</h1>\r\n<span>\r\nUsed to end a statement.\r\n</span>\r\n<span class="function_example">\r\n<pre>\r\n<code class="c">pinMode(5, OUTPUT);\r\n</code>\r\n</pre>\r\n</span> \r\n<span class="function_tip"></span>\r\nForgetting to end a line in a semicolon will result in a compiler error. The error text may be obvious, and refer to a missing semicolon, or it may not. If an impenetrable or seemingly illogical compiler error comes up, one of the first things to check is a missing semicolon, in the immediate vicinity, preceding the line at which the compiler complained.\r\n</span>  ', '2015-06-02 21:06:16', '2016-08-15 19:25:04', 1322, 19, 1, 84),
(114, 6, '*', 'goto', '', 'goto/', 'Reference/goto/', '<h1>goto</h1>\r\nTransfers program flow to a labeled point in the program\r\n    <span class="function_syntax">\r\n    label:<br/><br/>\r\n    goto label; // sends program flow to the label\r\n    </span>\r\n<span>\r\n\r\n<span class="function_tip">The use of goto is discouraged in C programming, and some authors of C programming books claim that the goto statement is never necessary, but used judiciously, it can simplify certain programs. The reason that many programmers frown upon the use of goto is that with the unrestrained use of goto statements, it is easy to create a program with undefined program flow, which can never be debugged.\r\n\r\nWith that said, there are instances where a goto statement can come in handy, and simplify coding. One of   these situations is to break out of deeply nested for loops, or if logic blocks, on a certain condition.</span>\r\n    </span>\r\n<span class="function_example">\r\n<pre>\r\n<code class="c">for(byte r = 0; r < 255; r++) {\r\n    for (byte g = 255; g > -1; g--) {\r\n        for (byte b = 0; b < 255; b++) {\r\n            if (analogRead(0) > 250) { goto bailout; }\r\n            // more statements ... \r\n        }\r\n    }\r\n}\r\nbailout:\r\n// some code\r\n</code>\r\n</pre>\r\n</span> ', '2015-06-02 19:38:55', '2016-08-15 19:23:01', 1322, 17, 1, 84),
(113, 6, '*', 'return', '', 'return/', 'Reference/return/', '<h1>return</h1>\r\n<span>Terminate a function and return a value from a function to the calling function, if desired.\r\n</span>\r\n<span class="function_syntax">return;</span>\r\n <span>return value; // both forms are valid</span>\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param"></span>\r\n        <span class="function_parameters_param_name">value</span>\r\n        <span class="function_parameters_param_description">any variable or constant type</span>\r\n    </span>\r\n </span>\r\n</span> \r\n<span class="function_example">\r\nA function to compare a sensor input to a threshold\r\n<pre>\r\n<code class="c">int checkSensor() {\r\n    if (analogRead(0) > 400) {\r\n        return 1;\r\n    else {\r\n        return 0;\r\n    }\r\n}\r\n</code>\r\n</pre>\r\n</span> \r\nThe return keyword is handy to test a section of code without having to "comment out" large sections of possibly buggy code.\r\n<span>\r\n<pre>\r\n<code class="c">void loop() {\r\n    // brilliant code idea to test here\r\n    return;\r\n\r\n    // the rest of a dysfunctional sketch here\r\n    // this code will never be executed\r\n}\r\n</code>\r\n</pre>\r\n</span> ', '2015-06-02 19:38:37', '2016-08-15 19:20:28', 1322, 16, 1, 84),
(111, 6, '*', 'break', '', 'break/', 'Reference/break/', '<h1>break</h1>\r\n<span><i>break</i> is used to exit from a <i><span class="function_ref">switch-case</span></i>, <i><span class="function_ref">for</span></i>, <i><span class="function_ref">while</span></i>, or <i><span class="function_ref">do-while</span></i> loop, bypassing the normal loop condition. It is also used to exit from a <i>switch</i> statement.\r\n</span>\r\n<span class="function_example">\r\n<pre>\r\n<code class="c">for (x = 0; x < 255; x++) {\r\n    analogWrite(PWMpin, x);\r\n    sens = analogRead(sensorPin);  \r\n    if (sens > threshold) {      // bail out on sensor detect\r\n        x = 0;\r\n        break;\r\n    }  \r\n    delay(50);\r\n}\r\n</code>\r\n</pre>\r\n</span>  ', '2015-06-02 19:38:11', '2016-08-15 19:17:32', 1322, 14, 1, 84),
(112, 6, '*', 'continue', '', 'continue/', 'Reference/continue/', '<h1>continue</h1>\r\n<span>The <i>continue</i> statement skips the rest of the current iteration of a loop (<i><span class="function_ref">for</span></i>, <i><span class="function_ref">while</span></i>, or <i><span class="function_ref">do-while</span></i>). It continues by checking the conditional expression of the loop, and proceeding with any subsequent iterations.\r\n</span>\r\n\r\n<span class="function_example">\r\n<pre>\r\n<code class="c">for (x = 0; x < 255; x++) {\r\n    if (x > 40 && x < 120){      // create jump in values\r\n        continue;\r\n    }\r\n\r\n    analogWrite(PWMpin, x);\r\n    delay(50);\r\n}\r\n</code>\r\n</pre>\r\n</span>  ', '2015-06-02 19:38:24', '2016-08-15 19:17:00', 1322, 15, 1, 84),
(109, 6, '*', 'while', '', 'while/', 'Reference/while/', '<h1>while</h1>\r\n<span class="function_description">\r\n  <i>while</i> loops will loop continuously, and infinitely, until the expression inside the parenthesis, () becomes false. Something must change the tested variable, or the <i>while</i> loop will never exit. This could be in your code, such as an incremented variable, or an external condition, such as testing a sensor.\r\n   \r\n<span class="function_syntax">\r\n<pre>\r\n<code class="c">while (expression) {\r\n  // statement(s)\r\n}\r\n</code>\r\n</pre>\r\n</span>  \r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">expression </span>\r\n        <span class="function_parameters_param_description">a boolean C statement that evaluates to true or false</span>\r\n    </span>\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name"></span>\r\n        <span class="function_parameters_param_description"></span>\r\n    </span>\r\n</span>\r\n\r\n</span>\r\n<span class="function_example">\r\n<pre>\r\n<code class="c">var = 0;\r\nwhile (var < 200) {\r\n  // do something repetitive 200 times\r\n  var++;\r\n}\r\n</code>\r\n</pre>\r\n</span>  ', '2015-06-02 19:37:41', '2016-08-15 19:09:02', 1322, 12, 1, 84),
(110, 6, '*', 'do...while', '', 'do-while/', 'Reference/do-while/', '<h1>do...while</h1>\r\n<span class="function_description">\r\n   The <i>do</i> loop works in the same manner as the <i><span class="function_ref">while</span></i> loop, with the exception that the condition is tested at the end of the loop, so the <i>do</i> loop will always run at least once.\r\n</span>\r\n<span class="function_syntax">\r\n<pre>   \r\n<code class="c">do {\r\n    // statement block\r\n} while (test condition);\r\n</code>\r\n</pre>\r\n</span>\r\n<span class="function_example">\r\n<pre>\r\n<code class="c">do {\r\n  delay(50);          // wait for sensors to stabilize\r\n  x = readSensors();  // check the sensors\r\n} while (x < 100);\r\n</code>\r\n</pre>\r\n</span>  ', '2015-06-02 19:38:01', '2016-08-15 19:08:18', 1322, 13, 1, 84),
(108, 6, '*', 'switch case', '', 'switch-case/', 'Reference/switch-case/', '<h1>switch case</h1>\r\n<span class="function_description">\r\nLike <i><span class="function_ref">if</span></i> statements, <i>switch...case</i> controls the flow of programs by allowing programmers to specify different code that should be executed in various conditions. In particular, a switch statement compares the value of a variable to the values specified in case statements. When a case statement is found whose value matches that of the variable, the code in that case statement is run.\r\n<br/><br/>\r\nThe <i><span class="function_ref">break</span></i> keyword exits the switch statement, and is typically used at the end of each case. Without a break statement, the switch statement will continue executing the following expressions ("falling-through") until a break, or the end of the switch statement is reached.\r\n</span>\r\n\r\n<span class="function_syntax">\r\n<pre>\r\n<code class="c">switch (var) {\r\n  case label:\r\n    // statements\r\n    break;\r\n  case label:\r\n    // statements\r\n    break;\r\n  default: \r\n    // statements\r\n}</code></pre>\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">var</span>\r\n        <span class="function_parameters_param_description"> the variable whose value to compare to the various cases</span>\r\n    </span>\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">label</span>\r\n        <span class="function_parameters_param_description">a value to compare the variable to</span>\r\n    </span>\r\n</span>\r\n</span>\r\n\r\n<span class="function_example">\r\n<pre>\r\n<code class="c">switch (var) {\r\n    case 1:\r\n        // do something when var equals 1\r\n        break;\r\n    case 2:\r\n        // do something when var equals 2\r\n        break;\r\n    default: \r\n        // if nothing else matches, do the default\r\n        // default is optional\r\n}\r\n</code>\r\n</pre>\r\n</span>  ', '2015-06-02 19:37:09', '2016-08-15 19:03:22', 1322, 11, 1, 84),
(107, 6, '*', 'for', '', 'for/', 'Reference/for/', '<h1>for</h1>\r\n<span class="function_description">\r\n   The <i>for</i> statement is used to repeat a block of statements enclosed in curly braces. An increment counter is usually used to increment and terminate the loop. The <i>for</i> statement is useful for any repetitive operation, and is often used in combination with arrays to operate on collections of data/pins.\r\n<br/><br/>\r\nThere are three parts to the <i>for</i> loop header: <i>for(initialization; condition; increment)</i>.\r\nThe <i>initialization</i> happens first and exactly once. Each time through the loop, the <i>condition</i> is tested; if it''s true, the statement block, and the <i>increment</i> is executed, then the condition is tested again. When the condition becomes false, the loop ends.\r\n</span> \r\n<span class="function_example">\r\n<pre>\r\n<code class="c">// Fade a LED brightness from zero to max\r\nint PWMpin = 10;\r\n\r\nvoid setup() {\r\n  // no setup needed\r\n}\r\n\r\nvoid loop() {\r\n   for (int i = 0; i <= 255; i++) {\r\n      analogWrite(PWMpin, i);\r\n      delay(10);\r\n   } \r\n}\r\n</code>\r\n</pre>\r\n</span> \r\nThe C <i>for</i> loop is much more flexible than for loops found in some other computer languages, including BASIC. Any or all of the three header elements may be omitted, although the semicolons are required. Also the statements for initialization, condition, and increment can be any valid C statements with unrelated variables, and use any C datatypes including floats. These types of unusual for statements may provide solutions to some rare programming problems.\r\n\r\nFor example, using a multiplication in the increment line will generate a logarithmic progression:\r\n<span class="function_example">\r\nThe following code generates: 2, 3, 4, 6, 9, 13, 19, 28, 42, 63, 94\r\n<pre>\r\n<code class="c">for(int x = 2; x < 100; x = x * 1.5){\r\n    Serial.println(x);\r\n}\r\n</code>\r\n</pre>\r\n</span> \r\n\r\n<span class="function_example">\r\nAnother example, fade a LED up and down with one for loop:\r\n<pre>\r\n<code class="c">void loop() {\r\n   int x = 1;\r\n   for (int i = 0; i > -1; i = i + x) {\r\n      analogWrite(PWMpin, i);\r\n      if (i == 255) x = -1;             // switch direction at peak\r\n      delay(10);\r\n   } \r\n}\r\n</code>\r\n</pre>\r\n</span>\r\n', '2015-06-02 19:36:51', '2016-08-15 18:52:11', 1322, 10, 1, 84),
(105, 6, '*', 'if', '', 'if/', 'Reference/if/', '<h1>if</h1>\r\n<span class="function_description">\r\n   <i>if</i>, which is used in conjunction with a comparison operator, tests whether a certain condition has been reached, such as an input being above a certain number.\r\n<span class="function_example">\r\n<pre>\r\n<code class="c">if (someVariable > 10) {\r\n    // do something here\r\n}\r\n</code>\r\n</pre>\r\n   This program tests to see if some variable is greater than 10. If it is, the program takes a particular action. In other words, if the statement in parentheses is true, the statements inside the brackets are run. If not, the program skips over the code.\r\n</span> \r\n\r\n<span class="function_description_note">\r\n    The brackets may be omitted after an <i>if</i> statement. If this is done, the next line (ended by the <span class="function_ref">semicolon</span>) becomes the only conditional statement.\r\n    </span>\r\n</span>\r\n<span class="function_example">\r\n<pre>\r\n<code class="c">// all are correct\r\n\r\nif (x > 120) digitalWrite(LEDpin, HIGH); \r\n\r\nif (x > 120)\r\n    digitalWrite(15, HIGH); \r\n\r\nif (x > 120) { digitalWrite(15, HIGH); } \r\n\r\nif (x > 120){ \r\n    digitalWrite(15, HIGH);\r\n    digitalWrite(16, HIGH); \r\n}</code>\r\n</pre>\r\n</span>\r\n<span class="function_description_note"><i>if</i> can also be part of a branching control structure using the <span class="function_ref"link="if-else">if...else</span> construction</span>\r\n\r\n', '2015-06-02 19:36:11', '2016-08-15 16:34:42', 1322, 8, 1, 84);
INSERT INTO `site_page` (`id`, `domain_id`, `route`, `name`, `title`, `url`, `full_url`, `content`, `create_datetime`, `update_datetime`, `create_contact_id`, `sort`, `status`, `parent_id`) VALUES
(106, 6, '*', 'if...else', '', 'if-else/', 'Reference/if-else/', '<h1>if...else</h1>\r\n<span class="function_description"><i>if/else</i> allows greater control over the flow of code than the basic <i><span <span class="function_ref">if</span></i> statement, by allowing multiple tests to be grouped together. For example, an analog input could be tested and one action taken if the input was less than 500, and another action taken if the input was 500 or greater. The code would look like this:\r\n</span>\r\n<span class="function_example">\r\n    <pre>\r\n        <code class="c">if (pinFiveInput < 500) {\r\n  // action A\r\n} else {\r\n  // action B\r\n}</code>\r\n    </pre>\r\n</span> \r\n<span class="function_description_more">\r\n    <i>else</i> can proceed another <i>if</i> test, so that multiple, mutually exclusive tests can be run at the same time.\r\n    Each test will proceed to the next one until a true test is encountered. When a true test is found, its associated block of code is run, and the program then skips to the line following the entire <i>if/else</i> construction. If no test proves to be true, the default <i>else</i> block is executed, if one is present, and sets the default behavior.\r\n    Note that an <i>else if</i> block may be used with or without a terminating <i>else</i> block and vice versa. An unlimited number of such <i>else if</i> branches is allowed. \r\n</span>\r\n<span class="function_example">\r\n    <pre>\r\n        <code class="c">if (pinFiveInput < 500) {\r\n  // do Thing A\r\n} else if (pinFiveInput >= 1000) {\r\n  // do Thing B\r\n} else {\r\n  // do Thing C\r\n}</code>\r\n    </pre>\r\n</span>\r\n<span class="function_description_more">\r\nAnother way to express branching, mutually exclusive tests, is with the <span class="function_ref" link="switch-case">switch case</span> statement.\r\n</span>\r\n', '2015-06-02 19:36:34', '2016-08-15 16:33:54', 1322, 9, 1, 84),
(98, 6, '*', 'loop()', '', 'loop/', 'Reference/loop/', '<h1>loop()</h1>\r\n<span class="function_description">\r\n    After executing <span class="function_ref">setup</span>() function, which initializes and sets the initial values, the loop() function does precisely what its name suggests, and loops consecutively, allowing your program to change and respond. Use it to actively control the Z-Uno board.\r\n<span class="function_example">\r\n<pre>\r\n<code class="c">void setup() {\r\n  // put your setup code here, to run once:\r\n  pinMode(5, OUTPUT);\r\n}\r\n\r\nvoid loop() {\r\n  // put your main code here, to run repeatedly:\r\n  digitalWrite(5, HIGH);\r\n}\r\n</code>\r\n</pre>\r\n</span> ', '2015-06-02 18:29:13', '2016-08-15 16:24:16', 1322, 2, 1, 84),
(97, 6, '*', 'setup()', '', 'setup/', 'Reference/setup/', '<h1>setup()</h1>\r\n<span class="function_description">\r\n    The setup() function is called when a sketch starts. Use it to initialize variables or pin modes. The setup function will only run once after each power up, reset or wake up of the Zuno board.\r\n<span class="function_example">\r\n<pre>\r\n<code class="c">BYTE first_run;\r\n\r\nvoid setup() {\r\n  serial.begin();\r\n  first_run = 0;\r\n}\r\n\r\nvoid loop() {\r\n  ... \r\n}\r\n</code>\r\n</pre>\r\n</span> ', '2015-06-02 18:09:40', '2016-08-15 16:20:58', 1322, 1, 1, 84),
(336, 6, '*', 'Libraries', '', 'libraries/', 'Reference/libraries/', ' ', '2016-08-15 16:10:13', '2016-08-15 16:10:13', 1, 119, 1, 84),
(328, 6, '*', 'BeginTransmission', '', 'BeginTransmission/', 'Reference/Wire/BeginTransmission/', '<h4>Wire.beginTransmission(address)</h4></br>\r\n<span class="function_description">\r\n    Begin a transmission to the I2C slave device with the given address. Subsequently, queue bytes for transmission with the write() function and transmit them by calling endTransmission().\r\n</span>\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param_name">address:</span>\r\n    <span class="function_parameters_param_description">the 7-bit address of the device to transmit to</span>\r\n</span>\r\n<span class="function_returns">\r\n    None\r\n</span> ', '2016-07-14 14:41:48', '2016-07-14 15:26:25', 1322, 3, 1, 324),
(327, 6, '*', 'RequestFrom', '', 'RequestFrom/', 'Reference/Wire/RequestFrom/', '<h4>Wire.requestFrom()</h4></br>\r\n<span class="function_description">\r\n    Used by the master to request bytes from a slave device. The bytes may then be retrieved with the available() and read() functions.</br>\r\n\r\nRequestFrom() accepts a boolean argument changing its behavior for compatibility with certain I2C devices.</br>\r\n\r\n- If true, requestFrom() sends a stop message after the request, releasing the I2C bus.</br>\r\n\r\n- If false, requestFrom() sends a restart message after the request. The bus will not be released, which prevents another master device from requesting between messages. This allows one master device to send multiple requests while in control.</br>\r\n\r\nThe default value is true.\r\n</span>\r\n<span class="function_syntax">\r\n    Wire.requestFrom(address, quantity)</br>\r\n    Wire.requestFrom(address, quantity, stop)</br>\r\n</span>\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param_name">address:</span>\r\n    <span class="function_parameters_param_description">the 7-bit address of the device ti request bytes from</span></br>\r\n    <span class="function_parameters_param_name">quantity:</span>\r\n    <span class="function_parameters_param_description">the number of bytes to request</span></br>\r\n    <span class="function_parameters_param_name">stop:</span>\r\n    <span class="function_parameters_param_description">boolean. true will send a stop message after request, releasing the bus. false will continually send a restart after the request, keeping the connection active.</span>\r\n</span>\r\n<span class="function_returns">\r\n    byte &mdash; the number of bytes returned from the slave device\r\n</span>', '2016-07-14 12:42:31', '2016-07-14 15:18:09', 1322, 2, 1, 324),
(317, 6, '*', 'BeginTransaction', '', 'BeginTransaction/', 'Reference/SPI/BeginTransaction/', '<h4>beginTransaction()</h4>\r\n<span class="function_description">\r\n    Initializes the SPI bus using the defined SPISettings.\r\n</span>\r\n<span class="function_syntax">\r\n    SPI.beginTransaction(mySettings);\r\n</span>\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param_name">mySettings</span>\r\n    <span class="function_parameters_param_description">the chosen settings according o SPISettings</sapan></br>\r\n</span>\r\n<span class="function_returns">\r\n    None\r\n</span>', '2016-07-12 12:13:52', '2016-07-14 13:02:15', 1322, 3, 1, 313),
(316, 6, '*', 'End', '', 'end/', 'Reference/SPI/end/', '<h4>end()</h4>\r\n<span class="function_description">\r\n    Disables the SPI bus (leaving pin modes unchanged).\r\n</span>\r\n<span class="function_syntax">\r\n    SPI.end()</br>\r\n</span>\r\n<span class="function_parameters">\r\n    None\r\n</span>\r\n<span class="function_returns">\r\n    None\r\n</span>', '2016-07-12 11:53:09', '2016-07-14 11:49:31', 1322, 2, 1, 313),
(322, 6, '*', 'Transfer', '', 'Transfer/', 'Reference/SPI/Transfer/', '<h4>transfer()</h4>\r\n<span class="function_description">\r\n    SPI transfer is based on a simultaneous send and recieve: the received data is returned in receivedVal. In case of buffer transfer the received data is stored in the buffer in-place (the old data is replaced with the data received)\r\n</span>\r\n<span class="function_syntax">\r\n    receivedVal = SPI.transfer(val)</br>\r\n    SPI.transfer(buffer, size)\r\n</span>\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param_name">val:</span>\r\n    <span class="function_parameters_param_description">the byte ti send out over the bus</span></br>\r\n    <span class="function_parameters_param_name">buffer:</span>\r\n    <span class="function_parameters_param_description">the array of data to be transferred</span>\r\n</span>\r\n<span class="function_returns">\r\n    the received data\r\n</span>', '2016-07-12 13:34:02', '2016-07-14 11:43:56', 1322, 8, 1, 313),
(320, 6, '*', 'SetClockDivider', '', 'SetClockDivider/', 'Reference/SPI/SetClockDivider/', '<h4>setClockDivider()</h4>\r\n<span class="function_description">\r\n    Sets the SPI clock divider relative to the system clock. On AVR based boards, the dividers available are 2, 4, 8, 16, 32, 64 or 128. The default setting is SPI_CLOCK_DIV4, which sets the SPI clock to one-quarter the frequency of the system clock (4 Mhz for the boards at 16 MHz).\r\n</span>\r\n<span class="function_syntax">\r\n    SPI.setClockDivider(divider)\r\n</span>\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param_name">divider:</span>\r\n    <span class="function_parameters_param_description">\r\n        <ul>\r\n            </li><li>SPI_CLOCK_DIV2</li>\r\n            </li><li>SPI_CLOCK_DIV4</li>\r\n            </li><li>SPI_CLOCK_DIV8</li>\r\n            </li><li>SPI_CLOCK_DIV16</li>\r\n            </li><li>SPI_CLOCK_DIV32</li>\r\n            </li><li>SPI_CLOCK_DIV64</li>\r\n            </li><li>SPI_CLOCK_DIV128</li>\r\n        </ul>\r\n    </span>\r\n</span>\r\n<span class="function_returns">\r\n    None\r\n</span>', '2016-07-12 13:06:49', '2016-07-12 13:35:17', 1322, 6, 1, 313),
(319, 6, '*', 'SetBitOrder', '', 'SetBitOrder/', 'Reference/SPI/SetBitOrder/', '<h4>setBitOrder()</h4>\r\n<span class="function_description">\r\n    Sets the order of the bits shifted out of and into the SPI bus, either LSBFIRST(least-significant bit first) or MSBFIRST (most-significant bit first).\r\n</span>\r\n<span class="function_syntax">\r\n    SPI.setBitOrder(order)\r\n</span>\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param_name">order:</span>\r\n    <span class="function_parameters_param_description">either LSBFIRST or MSBFIRST</span>\r\n</span>\r\n<span class="function_returns">\r\n    None\r\n</span>', '2016-07-12 12:42:01', '2016-07-12 13:35:07', 1322, 5, 1, 313),
(318, 6, '*', 'EndTransaction', '', 'EndTransaction/', 'Reference/SPI/EndTransaction/', '<h4>endTransaction()</h4>\r\n<span class="function_description">\r\n    Stop using the SPI bus. Normally this is called after de-asserting the chip select, to allow other libraries to use the SPI bus.\r\n</span>\r\n<span class="function_syntax">\r\n    SPI.endTransaction()\r\n</span>\r\n<span class="function_parameters">\r\n    None\r\n</span>\r\n<span class="function_returns">\r\n    None\r\n</span>', '2016-07-12 12:24:25', '2016-07-12 13:34:57', 1322, 4, 1, 313),
(315, 6, '*', 'Begin', '', 'Begin/', 'Reference/SPI/Begin/', '<h4>begin()</h4>\r\n<span clas="function_description">\r\n    Initializes the SPI bus by setting SCK, MOSI, and SS to outputs, pulling SCK and MOSI low, and SS high.\r\n</span>\r\n<span class="function_syntax">\r\n    SPI.begin()</br>\r\n</span>\r\n<span class="function_parameters">\r\n    None\r\n</span>\r\n<span class="function_returns">\r\n    None\r\n</span>', '2016-07-12 11:49:10', '2016-07-12 11:49:29', 1322, 1, 1, 313),
(305, 6, '*', 'parseInt', '', 'parseint/', 'Reference/Serial/parseint/', '<h2>parseInt()</h2>\r\n<span class="function_description">\r\nLooks for the next valid integer in the incoming serial stream. parseInt() inherits from the Stream utility class.\r\n\r\nIn particular:\r\n    <span>\r\n    <ul>\r\n<li>Initial characters that are not digits or a minus sign, are skipped;</li>\r\n<li>Parsing stops when no characters have been read for a configurable time-out value, or a non-digit is read;</li>\r\n<li>If no valid digits were read when the time-out (see Serial.setTimeout()) occurs, 0 is returned;</li>    \r\n    </ul>\r\n    </span>\r\n</span>\r\n<span class="function_syntax">\r\n<br>Serial.parseInt()</br>\r\n<br>Serial.parseInt(char skipChar)</br>\r\n<br>Z-Uno also supports UART0, UART1 communication &mdash; Serial0.perseInt(), Serial1.parseInt()\r\n</br></span>\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">skipChar</span>\r\n        <span class="function_parameters_param_description">used to skip the indicated char in the search. Used for example to skip thousands divider.</span>\r\n    </span>\r\n</span>\r\n<span class="function_returns">\r\n<br>long : the next valid integer</br>\r\n</span>\r\n', '2016-07-05 17:46:40', '2016-07-11 12:52:34', 1322, 15, 1, 285),
(292, 6, '*', 'Write', '', 'write/', 'Reference/Serial/write/', '<h2>write()</h2>\r\n    <span class="function_description">\r\nWrites binary data to the serial port. This data is sent as a byte or series of bytes; to send the characters representing the digits of a number use the <a href="http://z-uno.z-wave.me/Reference/Serial/Print/">Print()</a> function instead.     </span>\r\n</span>\r\n<span class="function_syntax">\r\n<br>Serial.write(val)</br>\r\n<br>Serial.write(str)</br>\r\n<br>Serial.write(buf, len)</br>\r\n\r\n<br> Z-Uno board also supports Serial0 and Serial1.</br>\r\n    \r\n</span>\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">val:</span>\r\n        <span class="function_parameters_param_description">a value to send as a single byte</br></span>\r\n    </span>    \r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">str:</span>\r\n        <span class="function_parameters_param_description">a value to send as a string of bytes</br></span>\r\n    </span>\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">buf:</span>\r\n        <span class="function_parameters_param_description">a value to send a array of bytes</span>\r\n    </span>\r\n    <span class="function_parameters_param">    \r\n        <span class="function_parameters_param_name">len:</span>\r\n        <span class="function_parameters_param_description">the length of the buffer</span>\r\n    </span>\r\n    </span>\r\n</span>\r\n<span class="function_returns">\r\n<br>byte</br>\r\n<br>write() will return the number of bytes written, though reading that number is optional</br>\r\n    \r\n</span>\r\n<span class="function_example">\r\n    <pre>\r\n        <code class="c">void setup(){\r\n  Serial.begin();\r\n}\r\n\r\nvoid loop(){\r\n  Serial.write(45); // send a byte with the value 45\r\n\r\n   int bytesSent = Serial.write(“hello”); //send the string “hello” and return the length of the string.\r\n}\r\n\r\n        </code>\r\n    </pre>\r\n</span>  ', '2016-07-04 13:47:48', '2016-07-10 15:52:10', 1322, 11, 1, 285),
(291, 6, '*', 'Read', '', 'read/', 'Reference/Serial/read/', ' <h2>read()</h2>\r\n    <span class="function_description">\r\n        Reads incoming serial data.\r\n    </span>\r\n<span class="function_syntax">Serial.read() &mdash; for USB communication baudrate always is 115200. We can''t set the baudrate.</br>\r\nSerial0.read() &mdash; for UART communication. We can set the baudrate.</br>\r\nSerial1.read() &mdash; for UART communication. We can set the baudrate.</br></span>\r\n    <span class="function_parameters">\r\n    none\r\n    </span>\r\n<span class="function_returns">\r\nthe first byte of incoming serial data available (or -1 if no data is available) - int</span>\r\n<span class="function_example">\r\n    <pre>\r\n        <code class="c">int incomingByte = 0;   // for incoming serial data\r\n\r\nvoid setup() {\r\n    Serial.begin() ;     // opens serial port, sets data rate to 115200 bps\r\n}\r\n\r\nvoid loop() {\r\n\r\n// send data only when you receive data:\r\nif (Serial.available() > 0) {\r\n// read the incoming byte:\r\nincomingByte = Serial.read();\r\n\r\n// say what you got:\r\nSerial.print("I received: ");\r\nSerial.println(incomingByte, DEC);\r\n        }\r\n}\r\n\r\n        </code>\r\n    </pre>\r\n</span> ', '2016-07-04 13:43:21', '2016-07-10 15:47:53', 1322, 10, 1, 285),
(312, 6, '*', 'SerialEvent', '', 'serialevent/', 'Reference/Serial/serialevent/', ' <h2>serialEvent()</h2>\r\n    <span class="function_description">\r\nCalled when data is available. Use Serial.read() to capture this data.\r\n</span>\r\n<span class="function_syntax">\r\n<br>serialEvent()</span>\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">statements:</span>\r\n        <span class="function_parameters_param_description">any valid statements\r\n</br></span>\r\n</span>\r\n<span class="function_example">\r\n    <pre>\r\n        <code = "c">void serialEvent(){\r\n//statements\r\n}\r\n        </code>\r\n    </pre>\r\n</span>\r\n', '2016-07-08 12:51:04', '2016-07-08 12:52:34', 1322, 21, 1, 285),
(311, 6, '*', 'setTimeout', '', 'settimeout/', 'Reference/Serial/settimeout/', ' <h2>setTimeOut()</h2>\r\n    <span class="function_description">\r\nSerial.setTimeout() sets the maximum milliseconds to wait for serial data when using Serial.readBytesUntil(), Serial.readBytes(), Serial.parseInt() or Serial.parseFloat(). It defaults to 1000 milliseconds.\r\n</span>\r\n<span class="function_syntax">\r\n<br>Serial.setTimeout(time)</span>\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">time:</span>\r\n        <span class="function_parameters_param_description">timeout duration in milliseconds (long).\r\n</br></span>\r\n<span class="function_returns">\r\n<br>none</br>\r\n</span>', '2016-07-08 12:45:11', '2016-07-08 12:45:11', 1322, 20, 1, 285),
(310, 6, '*', 'ReadStringUntil', '', 'readstringuntil/', 'Reference/Serial/readstringuntil/', ' <h2>readStringUntil()</h2>\r\n    <span class="function_description">\r\nreadStringUntil() reads characters from the serial buffer into a string. The function terminates if the terminator character is detected or it times out \r\n</span>\r\n<span class="function_syntax">\r\n<br>Serial.readStringUntil(terminator)</span>\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">terminator:</span>\r\n        <span class="function_parameters_param_description">the character to search for (char)\r\n</br></span>\r\n<span class="function_returns">\r\n<br>The entire string read from the serial buffer, until the terminator character is detected</br>\r\n</span>', '2016-07-08 12:38:52', '2016-07-08 12:38:52', 1322, 19, 1, 285),
(309, 6, '*', 'ReadString', '', 'readstring/', 'Reference/Serial/readstring/', ' <h2>readString()</h2>\r\n<span class="function_description">\r\nSerial.readString() reads characters from the serial buffer into a string. The function terminates if it times out\r\n</span>\r\n<span class="function_syntax">\r\n<br>Serial.readString()</br>\r\n</span>\r\n<span class="function_parameters">\r\n<span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">none</span>\r\n    </span>\r\n</span>\r\n<span class="function_returns">\r\nA string read from the serial buffer\r\n</span> ', '2016-07-07 12:42:42', '2016-07-07 12:42:42', 1322, 18, 1, 285),
(308, 6, '*', 'ReadBytesUntil', '', 'readbytesuntil/', 'Reference/Serial/readbytesuntil/', ' <h2>readBytesUntil()</h2>\r\n<span class="function_description">\r\nSerial.readBytesUntil() reads characters from the serial buffer into an array. The function terminates if the terminator character is detected, the determined length has been read, or it times out\r\n</span>\r\n<span class="function_syntax">\r\n<br>Serial.readBytesUntil(character, buffer, length)</br>\r\n</span>\r\n<span class="function_parameters">\r\n<span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">character:</span>\r\n        <span class="function_parameters_param_description"> the character to search for (char).</span>\r\n    </span>\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">buffer:</span>\r\n        <span class="function_parameters_param_description">the buffer to store the bytes in (char[] or byte[]).</span>\r\n    </span>\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">length:</span>\r\n        <span class="function_parameters_param_description">the number of bytes to read (int).</span>\r\n    </span>\r\n</span>\r\n<span class="function_returns">\r\nbyte\r\n</span>  ', '2016-07-07 12:23:41', '2016-07-07 12:31:45', 1322, 17, 1, 285),
(307, 6, '*', 'ReadBytes', '', 'readbytes/', 'Reference/Serial/readbytes/', ' <h2>readBytes()</h2>\r\n<span class="function_description">\r\nSerial.readBytes() reads characters from the serial port into a buffer.</br>\r\nSerial.readBytes() returns the number of characters placed in the buffer. A 0 means no valid data was found.\r\n</span>\r\n<span class="function_syntax">\r\n<br>Serial.readBytes(buffer, length)</br>\r\n</span>\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">buffer:</span>\r\n        <span class="function_parameters_param_description">the buffer to store the bytes in (char[] or byte[]).</span>\r\n    </span>\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">length:</span>\r\n        <span class="function_parameters_param_description">the number of bytes to read (int).</span>\r\n    </span>\r\n</span>\r\n<span class="function_returns">\r\nbytes\r\n</span> ', '2016-07-07 12:05:16', '2016-07-07 12:05:16', 1322, 16, 1, 285),
(304, 6, '*', 'parseFloat', '', 'parsefloat/', 'Reference/Serial/parsefloat/', '<h2>parseFloat()</h2>\r\n    <span class="function_description">\r\nSerial.parseFloat() returns the first valid floating point number from the Serial buffer. Characters that are not digits (or the minus sign) are skipped. parseFloat() is terminated by the first character that is not a floating point number.\r\n</span>\r\n<span class="function_syntax">\r\n<br>Serial.parseFloat()</span>\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">none</span>\r\n</span>\r\n    </span>\r\n        </span>\r\n<span class="function_returns">\r\n<br>float</br>\r\n</span>\r\n', '2016-07-05 17:39:11', '2016-07-05 17:39:11', 1322, 14, 1, 285),
(302, 6, '*', 'findUntil', '', 'finduntil/', 'Reference/Serial/finduntil/', '<h2>findUntil()</h2>\r\n    <span class="function_description">\r\nSerial.findUntil() reads data from the serial buffer until a target string of given length or terminator string is found.\r\n\r\nThe function returns true if the target string is found, false if it times out.\r\n</span>\r\n<span class="function_syntax">\r\n<br>Serial.findUntil(target, terminal)</span>\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">target:</span>\r\n        <span class="function_parameters_param_description">the string to search for (char)\r\n</br></span>\r\n<span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">terminal:</span>\r\n        <span class="function_parameters_param_description">the terminal string in the search (char)\r\n</br></span>\r\n<span class="function_returns">\r\n<br>boolean</br>\r\n</span>', '2016-07-05 17:26:20', '2016-07-05 17:28:19', 1322, 13, 1, 285),
(301, 6, '*', 'Find', '', 'find/', 'Reference/Serial/find/', '<h2>find()</h2>\r\n    <span class="function_description">\r\nSerial.find() reads data from the serial buffer until the target string of given length is found. The function returns true if target string is found, false if it times out.\r\n</span>\r\n<span class="function_syntax">\r\n<br>Serial.find(target)</span>\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">target:</span>\r\n        <span class="function_parameters_param_description">the string to search for (char)\r\n</br></span>\r\n<span class="function_returns">\r\n<br>boolean</br>\r\n</span>\r\n', '2016-07-05 17:22:35', '2016-07-05 17:22:35', 1322, 12, 1, 285),
(290, 6, '*', 'Println', '', 'println/', 'Reference/Serial/println/', '<h2>println()</h2>\r\n    <span class="function_description">\r\nPrints data to the serial port as human-readable ASCII text followed by a carriage return character (ASCII 13, or ''\\r'') and a newline character (ASCII 10, or ''\\n''). This command takes the same forms as Serial.print().\r\n    </span>\r\n<span class="function_syntax">\r\n Serial.println(val)</br>\r\nSerial.println(val, format)</br> \r\n</span>\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">val</span>\r\n        <span class="function_parameters_param_description">the value to print - any data type</span>\r\n    </span>\r\n        <span class="function_parameters_param">\r\n            <span class="function_parameters_param_name">format</span>\r\n            <span class="function_parameters_param_description">pecifies the number base (for integral data types) or number of decimal places (for floating point types)</span>\r\n</span>\r\n        </span>    \r\n        \r\n    </span>\r\n</span>\r\n</span>\r\n<span class="function_returns">\r\n    size_t (long): println() returns the number of bytes written, though reading that number is optional\r\n</span>\r\n<span class="function_example">\r\n    <pre>\r\n        <code class="c">int analogValue = 0;    // variable to hold the analog value\r\n\r\nvoid setup() {\r\n  // open the serial port at 115200 bps:\r\n  Serial.begin();\r\n}\r\n\r\nvoid loop() {\r\n  // read the analog input on pin 0:\r\n  analogValue = analogRead(0);\r\n\r\n  // print it out in many formats:\r\n  Serial.println(analogValue);       // print as an ASCII-encoded decimal\r\n  Serial.println(analogValue, DEC);  // print as an ASCII-encoded decimal\r\n  Serial.println(analogValue, HEX);  // print as an ASCII-encoded hexadecimal\r\n  Serial.println(analogValue, OCT);  // print as an ASCII-encoded octal\r\n  Serial.println(analogValue, BIN);  // print as an ASCII-encoded binary\r\n\r\n  // delay 10 milliseconds before the next reading:\r\n  delay(10);\r\n}', '2016-07-04 13:40:00', '2016-07-04 13:40:58', 1322, 9, 1, 285),
(209, 6, '*', 'zunoSendToGroupScene()', '', 'zunoSendToGroupScene/', 'Reference/zunoSendToGroupScene/', '<h1>zunoSendToGroupScene()</h1>\r\n<span class="function_description">\r\n    This function sends scene activation commands (using Scene Activation Command Class) to devices in association group defined as ZUNO_ASSOCIATION_GROUP_SCENE_CONTROL (see <span class="function_ref">ZUNO_SETUP_ASSOCIATIONS</span>).\r\n</span>\r\n<span class="function_syntax">\r\n    zunoSendToGroupScene(CTRL_GROUP_n, scene_number)\r\n</span>\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">CTRL_GROUP_n</span>\r\n        <span class="function_parameters_param_description">number of group: CTRL_GROUP_1, ... CTRL_GROUP_5</span>\r\n    </span>\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">scene_number</span>\r\n        <span class="function_parameters_param_description">scene number to send</span>\r\n    </span>\r\n    </span>\r\n</span>\r\n<span class="function_example">\r\n    <pre>\r\n        <code class="c">zunoSendToGroupScene(CTRL_GROUP_1, 3); // Activate scene #3</code>\r\n    </pre>\r\n</span> ', '2015-08-10 15:30:30', '2016-06-03 11:32:41', 1322, 98, 1, 84),
(203, 6, '*', 'zunoSendToGroupSetValueCommand', '', 'zunoSendToGroupSetValueCommand/', 'Reference/zunoSendToGroupSetValueCommand/', '<h1>zunoSendToGroupSetValueCommand()</h1>\r\n<span class="function_description">\r\n    This function sends switch on/off commands (using Basic Command Class) to devices in association group defined as ZUNO_ASSOCIATION_GROUP_SET_VALUE or ZUNO_ASSOCIATION_GROUP_SET_VALUE_AND_DIM (see <span class="function_ref">ZUNO_SETUP_ASSOCIATIONS</span>).\r\n</span>\r\n<span class="function_syntax">\r\n    zunoSendToGroupSetValueCommand(CTRL_GROUP_n, value)\r\n</span>\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">CTRL_GROUP_n</span>\r\n        <span class="function_parameters_param_description">number of group: CTRL_GROUP_1, ... CTRL_GROUP_5</span>\r\n    </span>\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">value</span>\r\n        <span class="function_parameters_param_description">0 (off) or 255 (on)</span>\r\n    </span>\r\n    </span>\r\n</span>\r\n<span class="function_example">\r\n    <pre>\r\n        <code class="c">zunoSendToGroupSetValueCommand(CTRL_GROUP_1, 50); // Dim to 50%</code>\r\n    </pre>\r\n</span> ', '2015-08-05 10:48:15', '2016-06-03 11:32:24', 1322, 93, 1, 84),
(259, 6, '*', 'MultiCommand', '', 'MultiCommand/', 'Reference/MultiCommand/', '<h1>MultiCommand</h1>\r\n<span class="function_description">\r\n    MultiCommand Command Class can be turned on or off in Arduino IDE menu.\r\n</span>\r\n<span class="function_description_more">\r\n    This flag adds MultiCommand in Z-Uno. This Command Class allows to reduce the number of packets transmitted between Z-Uno and other devices on the network, so communication will be faster and consume less battery power. Most notably, it will affect the process of inclusion in the network, which will be held 3-5 times faster\r\n</span>\r\n<span class="function_description_note">\r\n    This class is not supported by all Z-Wave controllers , in case of problems it is recommended to disable it\r\n</span>\r\n<span class="function_description_note">\r\n    You must upload your sektch and then exclude or reset Z-Uno to apply these changes.\r\n</span>\r\n\r\n<span class="function_example">\r\n    <img src="http://rus.z-wave.me/drive/?file=d8b61311776e0f142369f7c0a3e346c20d84">\r\n</span>', '2016-05-19 14:01:55', '2016-06-01 12:22:08', 1322, 102, 1, 84),
(172, 6, '*', 'ZUNO_SWITCH_BINARY()', '', 'ZUNO_SWITCH_BINARY/', 'Reference/ZUNO_SWITCH_BINARY/', '<h1>ZUNO_SWITСH_BINARY()</h1>\r\n\r\n<span class="function_description">\r\nThis macro is used to setup binary switch channel for Z-Uno board using <span class="function_ref">ZUNO_SETUP_CHANNELS</span>.\r\n</span>\r\n\r\n<span class="function_syntax">ZUNO_SWITCH_BINARY(getter, setter)</span>\r\n\r\n<span class="function_parameters">\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">getter</span>\r\n        <span class="function_parameters_param_description">pointer to a user defined function, which is supposed to return current value for this channel.</span>\r\n    </span>\r\n    <span class="function_parameters_param">\r\n        <span class="function_parameters_param_name">setter</span>\r\n        <span class="function_parameters_param_description">pointer to a user defined function, which is called when new value is received for this channel. </span>\r\n    </span>\r\n</span>\r\n\r\n<span class="function_description">\r\nFunctions getter should return 0 for Off and any non-zero value for On\r\n</span>\r\n<span class="function_syntax">BYTE getter(void)</span>\r\n\r\n<span class="function_description">\r\nFunctions setter accepts next values:\r\n<ul>\r\n    <li>0 for off</li>\r\n    <li>1-99 for on</li>\r\n    <li>>=100 - reserved value</li>\r\n</ul>\r\n</span>\r\n<span class="function_syntax">void setter(BYTE value)</span>\r\n\r\n\r\n<span class="function_tip">\r\nChannel generated using this macro will have Z-Wave Device Class GENERIC_TYPE_SWITCH_BINARY / SPECIFIC_TYPE_POWER_SWITCH_BINARY with Switch Binary Command Class.\r\n</span>\r\n\r\n<span class="function_description_note">\r\nThis type is allowed only in ZUNO_SLEEPING_MODE_ALWAYS_AWAKE power mode (see <span class="function_ref">ZUNO_SETUP_SLEEPING_MODE</span>).\r\n</span>\r\n\r\n<span class="function_example">\r\n    <pre>\r\n        <code class="c">ZUNO_SETUP_CHANNELS(ZUNO_SWITCH_BINARY(getterFunction, setterFunction));\r\n           \r\nvoid setup() {\r\n    ...\r\n}\r\n\r\nvoid loop() {\r\n    ...\r\n}\r\n\r\nBYTE getterFunction() {\r\n    return currentValue;\r\n}\r\n\r\nvoid setterFunction(BYTE newValue) {\r\n    ...\r\n}\r\n        </code>\r\n    </pre>\r\n</span>', '2015-06-13 17:13:47', '2016-05-31 14:20:34', 1322, 83, 1, 84),
(96, 6, '*', 'Functions', '', 'Functions/', 'Reference/Functions/', '<h1>Functions</h1>\r\n<p>Segmenting code into functions allows a programmer to create modular pieces of code that perform a defined task and then return to the area of code from which the function was "called". The typical case for creating a function is when one needs to perform the same action multiple times in a program.</p>\r\n\r\n<p>For programmers accustomed to using BASIC, functions in Arduino provide (and extend) the utility of using subroutines (GOSUB in BASIC).</p>\r\n\r\n<p>Standardizing code fragments into functions has several advantages:</p>\r\n<ul type="circle">\r\n<li>Functions help the programmer stay organized. Often this helps to conceptualize the program.</li>\r\n<li>Functions codify one action in one place so that the function only has to be thought out and debugged once.</li>\r\n<li>This also reduces chances for errors in modification, if the code needs to be changed.</li>\r\n<li>Functions make the whole sketch smaller and more compact because sections of code are reused many times.</li>\r\n<li>They make it easier to reuse code in other programs by making it more modular, and as a nice side effect, using functions also often makes the code more readable.</li>\r\n</ul>\r\n<p>\r\nThere are two required functions in an Arduino sketch, setup() and loop(). Other functions must be created outside the brackets of those two functions. As an example, we will create a simple function to multiply two numbers.\r\n</p>\r\n<p></p>\r\n<img src="/files/FuncAnatomy.png" alt="" title="">\r\n<p></p>\r\n\r\n<span class="function_example">\r\n<p>To "call" our simple multiply function, we pass it parameters of the datatype that it is expecting:</p>\r\n<pre>\r\n<code class="c">\r\nvoid loop() {\r\n  int i = 2;\r\n  int j = 3;\r\n  int k;\r\n\r\n  k = myMultiplyFunction(i, j); // k now contains 6\r\n}\r\n</code>\r\n</pre>\r\n\r\n<p>\r\nOur function needs to be declared outside any other function, so "myMultiplyFunction()" can go either above or below the "loop()" function. The entire sketch would then look like this:\r\n</p>\r\n</span>\r\n\r\n<pre>\r\n<code class="c">\r\nvoid setup() {\r\n  Serial.begin();\r\n}\r\n\r\nvoid loop() {\r\n  int i = 2;\r\n  int j = 3;\r\n  int k;\r\n\r\n  k = myMultiplyFunction(i, j); // k now contains 6\r\n  Serial.println(k);\r\n  delay(500);\r\n}\r\n\r\nint myMultiplyFunction(int x, int y) {\r\n  int result;\r\n  result = x * y;\r\n  return result;\r\n}\r\n</code>\r\n</pre>\r\n</span>\r\n\r\n<span class="function_example">\r\n<p>\r\nThis function will read a sensor five times with analogRead() and calculate the average of five readings. It then scales the data to 8 bits (0-255), and inverts it, returning the inverted result.\r\n</p>\r\n<pre>\r\n<code class="c">\r\nint ReadSens_and_Condition(){\r\n  int i;\r\n  int sval = 0;\r\n\r\n  for (i = 0; i < 5; i++){\r\n    sval = sval + analogRead(0);    // sensor on analog pin 0\r\n  }\r\n\r\n  sval = sval / 5;    // average\r\n  sval = sval / 4;    // scale to 8 bits (0 - 255)\r\n  sval = 255 - sval;  // invert output\r\n  return sval;\r\n}\r\n</code>\r\n</pre>\r\n\r\n<p>\r\nTo call our function we just assign it to a variable:\r\n</p>\r\n</span>\r\n\r\n<pre>\r\n<code class="c">\r\nint sens;\r\n\r\nsens = ReadSens_and_Condition();\r\n</code>\r\n</pre>\r\n</span>\r\n', '2015-06-01 18:48:34', '2016-05-18 16:35:52', 1, 8, 1, 84),
(155, 6, '*', 'array', '', 'array/', 'Reference/array/', ' ', '2015-06-09 21:50:27', '2015-06-09 21:50:27', 1322, 65, 1, 84),
(154, 6, '*', 'short', '', 'short/', 'Reference/short/', ' <span class="function_description">\r\nA short is a 16-bit data-type.\r\nThis yields a range of -32,768 to 32,767 (minimum value of -2^15 and a maximum value of (2^15) - 1). \r\n</span>\r\n<span class="function_example">\r\n\r\n  <pre>\r\n    <code class="c">\r\n   short ledPin = 13;\r\n    </code>\r\n  </pre>\r\n</span>\r\n<span class="function_syntax">\r\n <pre>\r\n    <code class="c">\r\n         short var = val;\r\n    </code>\r\n </pre>\r\n</span>\r\n<span>\r\n<br>var - your short variable name</br>\r\n<br>val - the value you assign to that variable</br>\r\n</span>\r\n<span class="function_see_also">\r\n    <li><span class="function_ref">byte</span></li>\r\n    <li><span class="function_ref">int</span></li>\r\n    <li><span class="function_ref">unsigned int</span></li>\r\n</span>', '2015-06-07 16:15:59', '2015-06-07 16:17:27', 1322, 64, 1, 84),
(136, 6, '*', '>> (bithift right)', '', 'bithift-right/', 'Reference/bithift-right/', ' ', '2015-06-02 22:12:53', '2015-06-02 22:12:53', 1322, 43, 1, 84),
(135, 6, '*', '<< (bitshift left)', '', 'bitshift-left/', 'Reference/bitshift-left/', ' ', '2015-06-02 22:12:25', '2015-06-02 22:12:25', 1322, 42, 1, 84);
